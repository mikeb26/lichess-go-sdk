/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses.

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GameJson struct for GameJson
type GameJson struct {
	Id          interface{}      `json:"id"`
	Rated       interface{}      `json:"rated"`
	Variant     VariantKey       `json:"variant"`
	Speed       Speed            `json:"speed"`
	Perf        interface{}      `json:"perf"`
	CreatedAt   interface{}      `json:"createdAt"`
	LastMoveAt  interface{}      `json:"lastMoveAt"`
	Status      GameStatus       `json:"status"`
	Players     GameJsonPlayers  `json:"players"`
	InitialFen  interface{}      `json:"initialFen,omitempty"`
	Winner      interface{}      `json:"winner,omitempty"`
	Opening     *GameJsonOpening `json:"opening,omitempty"`
	Moves       interface{}      `json:"moves,omitempty"`
	Pgn         interface{}      `json:"pgn,omitempty"`
	DaysPerTurn interface{}      `json:"daysPerTurn,omitempty"`
	Analysis    interface{}      `json:"analysis,omitempty"`
	Tournament  interface{}      `json:"tournament,omitempty"`
	Swiss       interface{}      `json:"swiss,omitempty"`
	Clock       *GameJsonClock   `json:"clock,omitempty"`
}

// NewGameJson instantiates a new GameJson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGameJson(id interface{}, rated interface{}, variant VariantKey, speed Speed, perf interface{}, createdAt interface{}, lastMoveAt interface{}, status GameStatus, players GameJsonPlayers) *GameJson {
	this := GameJson{}
	this.Id = id
	this.Rated = rated
	this.Variant = variant
	this.Speed = speed
	this.Perf = perf
	this.CreatedAt = createdAt
	this.LastMoveAt = lastMoveAt
	this.Status = status
	this.Players = players
	return &this
}

// NewGameJsonWithDefaults instantiates a new GameJson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameJsonWithDefaults() *GameJson {
	this := GameJson{}
	var variant VariantKey
	this.Variant = variant
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *GameJson) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetIdOk() (*interface{}, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GameJson) SetId(v interface{}) {
	o.Id = v
}

// GetRated returns the Rated field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *GameJson) GetRated() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Rated
}

// GetRatedOk returns a tuple with the Rated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetRatedOk() (*interface{}, bool) {
	if o == nil || o.Rated == nil {
		return nil, false
	}
	return &o.Rated, true
}

// SetRated sets field value
func (o *GameJson) SetRated(v interface{}) {
	o.Rated = v
}

// GetVariant returns the Variant field value
func (o *GameJson) GetVariant() VariantKey {
	if o == nil {
		var ret VariantKey
		return ret
	}

	return o.Variant
}

// GetVariantOk returns a tuple with the Variant field value
// and a boolean to check if the value has been set.
func (o *GameJson) GetVariantOk() (*VariantKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Variant, true
}

// SetVariant sets field value
func (o *GameJson) SetVariant(v VariantKey) {
	o.Variant = v
}

// GetSpeed returns the Speed field value
func (o *GameJson) GetSpeed() Speed {
	if o == nil {
		var ret Speed
		return ret
	}

	return o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value
// and a boolean to check if the value has been set.
func (o *GameJson) GetSpeedOk() (*Speed, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Speed, true
}

// SetSpeed sets field value
func (o *GameJson) SetSpeed(v Speed) {
	o.Speed = v
}

// GetPerf returns the Perf field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *GameJson) GetPerf() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Perf
}

// GetPerfOk returns a tuple with the Perf field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetPerfOk() (*interface{}, bool) {
	if o == nil || o.Perf == nil {
		return nil, false
	}
	return &o.Perf, true
}

// SetPerf sets field value
func (o *GameJson) SetPerf(v interface{}) {
	o.Perf = v
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *GameJson) GetCreatedAt() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetCreatedAtOk() (*interface{}, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *GameJson) SetCreatedAt(v interface{}) {
	o.CreatedAt = v
}

// GetLastMoveAt returns the LastMoveAt field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *GameJson) GetLastMoveAt() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.LastMoveAt
}

// GetLastMoveAtOk returns a tuple with the LastMoveAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetLastMoveAtOk() (*interface{}, bool) {
	if o == nil || o.LastMoveAt == nil {
		return nil, false
	}
	return &o.LastMoveAt, true
}

// SetLastMoveAt sets field value
func (o *GameJson) SetLastMoveAt(v interface{}) {
	o.LastMoveAt = v
}

// GetStatus returns the Status field value
func (o *GameJson) GetStatus() GameStatus {
	if o == nil {
		var ret GameStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GameJson) GetStatusOk() (*GameStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GameJson) SetStatus(v GameStatus) {
	o.Status = v
}

// GetPlayers returns the Players field value
func (o *GameJson) GetPlayers() GameJsonPlayers {
	if o == nil {
		var ret GameJsonPlayers
		return ret
	}

	return o.Players
}

// GetPlayersOk returns a tuple with the Players field value
// and a boolean to check if the value has been set.
func (o *GameJson) GetPlayersOk() (*GameJsonPlayers, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Players, true
}

// SetPlayers sets field value
func (o *GameJson) SetPlayers(v GameJsonPlayers) {
	o.Players = v
}

// GetInitialFen returns the InitialFen field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameJson) GetInitialFen() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.InitialFen
}

// GetInitialFenOk returns a tuple with the InitialFen field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetInitialFenOk() (*interface{}, bool) {
	if o == nil || o.InitialFen == nil {
		return nil, false
	}
	return &o.InitialFen, true
}

// HasInitialFen returns a boolean if a field has been set.
func (o *GameJson) HasInitialFen() bool {
	if o != nil && o.InitialFen != nil {
		return true
	}

	return false
}

// SetInitialFen gets a reference to the given interface{} and assigns it to the InitialFen field.
func (o *GameJson) SetInitialFen(v interface{}) {
	o.InitialFen = v
}

// GetWinner returns the Winner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameJson) GetWinner() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Winner
}

// GetWinnerOk returns a tuple with the Winner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetWinnerOk() (*interface{}, bool) {
	if o == nil || o.Winner == nil {
		return nil, false
	}
	return &o.Winner, true
}

// HasWinner returns a boolean if a field has been set.
func (o *GameJson) HasWinner() bool {
	if o != nil && o.Winner != nil {
		return true
	}

	return false
}

// SetWinner gets a reference to the given interface{} and assigns it to the Winner field.
func (o *GameJson) SetWinner(v interface{}) {
	o.Winner = v
}

// GetOpening returns the Opening field value if set, zero value otherwise.
func (o *GameJson) GetOpening() GameJsonOpening {
	if o == nil || o.Opening == nil {
		var ret GameJsonOpening
		return ret
	}
	return *o.Opening
}

// GetOpeningOk returns a tuple with the Opening field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameJson) GetOpeningOk() (*GameJsonOpening, bool) {
	if o == nil || o.Opening == nil {
		return nil, false
	}
	return o.Opening, true
}

// HasOpening returns a boolean if a field has been set.
func (o *GameJson) HasOpening() bool {
	if o != nil && o.Opening != nil {
		return true
	}

	return false
}

// SetOpening gets a reference to the given GameJsonOpening and assigns it to the Opening field.
func (o *GameJson) SetOpening(v GameJsonOpening) {
	o.Opening = &v
}

// GetMoves returns the Moves field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameJson) GetMoves() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Moves
}

// GetMovesOk returns a tuple with the Moves field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetMovesOk() (*interface{}, bool) {
	if o == nil || o.Moves == nil {
		return nil, false
	}
	return &o.Moves, true
}

// HasMoves returns a boolean if a field has been set.
func (o *GameJson) HasMoves() bool {
	if o != nil && o.Moves != nil {
		return true
	}

	return false
}

// SetMoves gets a reference to the given interface{} and assigns it to the Moves field.
func (o *GameJson) SetMoves(v interface{}) {
	o.Moves = v
}

// GetPgn returns the Pgn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameJson) GetPgn() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Pgn
}

// GetPgnOk returns a tuple with the Pgn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetPgnOk() (*interface{}, bool) {
	if o == nil || o.Pgn == nil {
		return nil, false
	}
	return &o.Pgn, true
}

// HasPgn returns a boolean if a field has been set.
func (o *GameJson) HasPgn() bool {
	if o != nil && o.Pgn != nil {
		return true
	}

	return false
}

// SetPgn gets a reference to the given interface{} and assigns it to the Pgn field.
func (o *GameJson) SetPgn(v interface{}) {
	o.Pgn = v
}

// GetDaysPerTurn returns the DaysPerTurn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameJson) GetDaysPerTurn() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DaysPerTurn
}

// GetDaysPerTurnOk returns a tuple with the DaysPerTurn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetDaysPerTurnOk() (*interface{}, bool) {
	if o == nil || o.DaysPerTurn == nil {
		return nil, false
	}
	return &o.DaysPerTurn, true
}

// HasDaysPerTurn returns a boolean if a field has been set.
func (o *GameJson) HasDaysPerTurn() bool {
	if o != nil && o.DaysPerTurn != nil {
		return true
	}

	return false
}

// SetDaysPerTurn gets a reference to the given interface{} and assigns it to the DaysPerTurn field.
func (o *GameJson) SetDaysPerTurn(v interface{}) {
	o.DaysPerTurn = v
}

// GetAnalysis returns the Analysis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameJson) GetAnalysis() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Analysis
}

// GetAnalysisOk returns a tuple with the Analysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetAnalysisOk() (*interface{}, bool) {
	if o == nil || o.Analysis == nil {
		return nil, false
	}
	return &o.Analysis, true
}

// HasAnalysis returns a boolean if a field has been set.
func (o *GameJson) HasAnalysis() bool {
	if o != nil && o.Analysis != nil {
		return true
	}

	return false
}

// SetAnalysis gets a reference to the given interface{} and assigns it to the Analysis field.
func (o *GameJson) SetAnalysis(v interface{}) {
	o.Analysis = v
}

// GetTournament returns the Tournament field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameJson) GetTournament() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Tournament
}

// GetTournamentOk returns a tuple with the Tournament field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetTournamentOk() (*interface{}, bool) {
	if o == nil || o.Tournament == nil {
		return nil, false
	}
	return &o.Tournament, true
}

// HasTournament returns a boolean if a field has been set.
func (o *GameJson) HasTournament() bool {
	if o != nil && o.Tournament != nil {
		return true
	}

	return false
}

// SetTournament gets a reference to the given interface{} and assigns it to the Tournament field.
func (o *GameJson) SetTournament(v interface{}) {
	o.Tournament = v
}

// GetSwiss returns the Swiss field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameJson) GetSwiss() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Swiss
}

// GetSwissOk returns a tuple with the Swiss field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameJson) GetSwissOk() (*interface{}, bool) {
	if o == nil || o.Swiss == nil {
		return nil, false
	}
	return &o.Swiss, true
}

// HasSwiss returns a boolean if a field has been set.
func (o *GameJson) HasSwiss() bool {
	if o != nil && o.Swiss != nil {
		return true
	}

	return false
}

// SetSwiss gets a reference to the given interface{} and assigns it to the Swiss field.
func (o *GameJson) SetSwiss(v interface{}) {
	o.Swiss = v
}

// GetClock returns the Clock field value if set, zero value otherwise.
func (o *GameJson) GetClock() GameJsonClock {
	if o == nil || o.Clock == nil {
		var ret GameJsonClock
		return ret
	}
	return *o.Clock
}

// GetClockOk returns a tuple with the Clock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameJson) GetClockOk() (*GameJsonClock, bool) {
	if o == nil || o.Clock == nil {
		return nil, false
	}
	return o.Clock, true
}

// HasClock returns a boolean if a field has been set.
func (o *GameJson) HasClock() bool {
	if o != nil && o.Clock != nil {
		return true
	}

	return false
}

// SetClock gets a reference to the given GameJsonClock and assigns it to the Clock field.
func (o *GameJson) SetClock(v GameJsonClock) {
	o.Clock = &v
}

func (o GameJson) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Rated != nil {
		toSerialize["rated"] = o.Rated
	}
	if true {
		toSerialize["variant"] = o.Variant
	}
	if true {
		toSerialize["speed"] = o.Speed
	}
	if o.Perf != nil {
		toSerialize["perf"] = o.Perf
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.LastMoveAt != nil {
		toSerialize["lastMoveAt"] = o.LastMoveAt
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["players"] = o.Players
	}
	if o.InitialFen != nil {
		toSerialize["initialFen"] = o.InitialFen
	}
	if o.Winner != nil {
		toSerialize["winner"] = o.Winner
	}
	if o.Opening != nil {
		toSerialize["opening"] = o.Opening
	}
	if o.Moves != nil {
		toSerialize["moves"] = o.Moves
	}
	if o.Pgn != nil {
		toSerialize["pgn"] = o.Pgn
	}
	if o.DaysPerTurn != nil {
		toSerialize["daysPerTurn"] = o.DaysPerTurn
	}
	if o.Analysis != nil {
		toSerialize["analysis"] = o.Analysis
	}
	if o.Tournament != nil {
		toSerialize["tournament"] = o.Tournament
	}
	if o.Swiss != nil {
		toSerialize["swiss"] = o.Swiss
	}
	if o.Clock != nil {
		toSerialize["clock"] = o.Clock
	}
	return json.Marshal(toSerialize)
}

type NullableGameJson struct {
	value *GameJson
	isSet bool
}

func (v NullableGameJson) Get() *GameJson {
	return v.value
}

func (v *NullableGameJson) Set(val *GameJson) {
	v.value = val
	v.isSet = true
}

func (v NullableGameJson) IsSet() bool {
	return v.isSet
}

func (v *NullableGameJson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameJson(val *GameJson) *NullableGameJson {
	return &NullableGameJson{value: val, isSet: true}
}

func (v NullableGameJson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameJson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
