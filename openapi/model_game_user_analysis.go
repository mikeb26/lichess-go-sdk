/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GameUserAnalysis struct for GameUserAnalysis
type GameUserAnalysis struct {
	Inaccuracy interface{} `json:"inaccuracy"`
	Mistake interface{} `json:"mistake"`
	Blunder interface{} `json:"blunder"`
	Acpl interface{} `json:"acpl"`
}

// NewGameUserAnalysis instantiates a new GameUserAnalysis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGameUserAnalysis(inaccuracy interface{}, mistake interface{}, blunder interface{}, acpl interface{}) *GameUserAnalysis {
	this := GameUserAnalysis{}
	this.Inaccuracy = inaccuracy
	this.Mistake = mistake
	this.Blunder = blunder
	this.Acpl = acpl
	return &this
}

// NewGameUserAnalysisWithDefaults instantiates a new GameUserAnalysis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameUserAnalysisWithDefaults() *GameUserAnalysis {
	this := GameUserAnalysis{}
	return &this
}

// GetInaccuracy returns the Inaccuracy field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *GameUserAnalysis) GetInaccuracy() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Inaccuracy
}

// GetInaccuracyOk returns a tuple with the Inaccuracy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameUserAnalysis) GetInaccuracyOk() (*interface{}, bool) {
	if o == nil || o.Inaccuracy == nil {
		return nil, false
	}
	return &o.Inaccuracy, true
}

// SetInaccuracy sets field value
func (o *GameUserAnalysis) SetInaccuracy(v interface{}) {
	o.Inaccuracy = v
}

// GetMistake returns the Mistake field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *GameUserAnalysis) GetMistake() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Mistake
}

// GetMistakeOk returns a tuple with the Mistake field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameUserAnalysis) GetMistakeOk() (*interface{}, bool) {
	if o == nil || o.Mistake == nil {
		return nil, false
	}
	return &o.Mistake, true
}

// SetMistake sets field value
func (o *GameUserAnalysis) SetMistake(v interface{}) {
	o.Mistake = v
}

// GetBlunder returns the Blunder field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *GameUserAnalysis) GetBlunder() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Blunder
}

// GetBlunderOk returns a tuple with the Blunder field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameUserAnalysis) GetBlunderOk() (*interface{}, bool) {
	if o == nil || o.Blunder == nil {
		return nil, false
	}
	return &o.Blunder, true
}

// SetBlunder sets field value
func (o *GameUserAnalysis) SetBlunder(v interface{}) {
	o.Blunder = v
}

// GetAcpl returns the Acpl field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *GameUserAnalysis) GetAcpl() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Acpl
}

// GetAcplOk returns a tuple with the Acpl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameUserAnalysis) GetAcplOk() (*interface{}, bool) {
	if o == nil || o.Acpl == nil {
		return nil, false
	}
	return &o.Acpl, true
}

// SetAcpl sets field value
func (o *GameUserAnalysis) SetAcpl(v interface{}) {
	o.Acpl = v
}

func (o GameUserAnalysis) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Inaccuracy != nil {
		toSerialize["inaccuracy"] = o.Inaccuracy
	}
	if o.Mistake != nil {
		toSerialize["mistake"] = o.Mistake
	}
	if o.Blunder != nil {
		toSerialize["blunder"] = o.Blunder
	}
	if o.Acpl != nil {
		toSerialize["acpl"] = o.Acpl
	}
	return json.Marshal(toSerialize)
}

type NullableGameUserAnalysis struct {
	value *GameUserAnalysis
	isSet bool
}

func (v NullableGameUserAnalysis) Get() *GameUserAnalysis {
	return v.value
}

func (v *NullableGameUserAnalysis) Set(val *GameUserAnalysis) {
	v.value = val
	v.isSet = true
}

func (v NullableGameUserAnalysis) IsSet() bool {
	return v.isSet
}

func (v *NullableGameUserAnalysis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameUserAnalysis(val *GameUserAnalysis) *NullableGameUserAnalysis {
	return &NullableGameUserAnalysis{value: val, isSet: true}
}

func (v NullableGameUserAnalysis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameUserAnalysis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


