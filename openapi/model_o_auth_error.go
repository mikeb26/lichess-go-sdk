/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OAuthError struct for OAuthError
type OAuthError struct {
	// The cause of the error.
	Error interface{} `json:"error,omitempty"`
	// The reason why the request was rejected.
	ErrorDescription interface{} `json:"error_description,omitempty"`
}

// NewOAuthError instantiates a new OAuthError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthError() *OAuthError {
	this := OAuthError{}
	return &this
}

// NewOAuthErrorWithDefaults instantiates a new OAuthError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthErrorWithDefaults() *OAuthError {
	this := OAuthError{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthError) GetError() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthError) GetErrorOk() (*interface{}, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return &o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *OAuthError) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given interface{} and assigns it to the Error field.
func (o *OAuthError) SetError(v interface{}) {
	o.Error = v
}

// GetErrorDescription returns the ErrorDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthError) GetErrorDescription() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ErrorDescription
}

// GetErrorDescriptionOk returns a tuple with the ErrorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthError) GetErrorDescriptionOk() (*interface{}, bool) {
	if o == nil || o.ErrorDescription == nil {
		return nil, false
	}
	return &o.ErrorDescription, true
}

// HasErrorDescription returns a boolean if a field has been set.
func (o *OAuthError) HasErrorDescription() bool {
	if o != nil && o.ErrorDescription != nil {
		return true
	}

	return false
}

// SetErrorDescription gets a reference to the given interface{} and assigns it to the ErrorDescription field.
func (o *OAuthError) SetErrorDescription(v interface{}) {
	o.ErrorDescription = v
}

func (o OAuthError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.ErrorDescription != nil {
		toSerialize["error_description"] = o.ErrorDescription
	}
	return json.Marshal(toSerialize)
}

type NullableOAuthError struct {
	value *OAuthError
	isSet bool
}

func (v NullableOAuthError) Get() *OAuthError {
	return v.value
}

func (v *NullableOAuthError) Set(val *OAuthError) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthError) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthError(val *OAuthError) *NullableOAuthError {
	return &NullableOAuthError{value: val, isSet: true}
}

func (v NullableOAuthError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


