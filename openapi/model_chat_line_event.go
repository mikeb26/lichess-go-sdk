/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ChatLineEvent struct for ChatLineEvent
type ChatLineEvent struct {
	Type interface{} `json:"type"`
	Room interface{} `json:"room"`
	Username interface{} `json:"username"`
	Text interface{} `json:"text"`
}

// NewChatLineEvent instantiates a new ChatLineEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatLineEvent(type_ interface{}, room interface{}, username interface{}, text interface{}) *ChatLineEvent {
	this := ChatLineEvent{}
	this.Type = type_
	this.Room = room
	this.Username = username
	this.Text = text
	return &this
}

// NewChatLineEventWithDefaults instantiates a new ChatLineEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatLineEventWithDefaults() *ChatLineEvent {
	this := ChatLineEvent{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChatLineEvent) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatLineEvent) GetTypeOk() (*interface{}, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ChatLineEvent) SetType(v interface{}) {
	o.Type = v
}

// GetRoom returns the Room field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChatLineEvent) GetRoom() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Room
}

// GetRoomOk returns a tuple with the Room field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatLineEvent) GetRoomOk() (*interface{}, bool) {
	if o == nil || o.Room == nil {
		return nil, false
	}
	return &o.Room, true
}

// SetRoom sets field value
func (o *ChatLineEvent) SetRoom(v interface{}) {
	o.Room = v
}

// GetUsername returns the Username field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChatLineEvent) GetUsername() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatLineEvent) GetUsernameOk() (*interface{}, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *ChatLineEvent) SetUsername(v interface{}) {
	o.Username = v
}

// GetText returns the Text field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChatLineEvent) GetText() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatLineEvent) GetTextOk() (*interface{}, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *ChatLineEvent) SetText(v interface{}) {
	o.Text = v
}

func (o ChatLineEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Room != nil {
		toSerialize["room"] = o.Room
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableChatLineEvent struct {
	value *ChatLineEvent
	isSet bool
}

func (v NullableChatLineEvent) Get() *ChatLineEvent {
	return v.value
}

func (v *NullableChatLineEvent) Set(val *ChatLineEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableChatLineEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableChatLineEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatLineEvent(val *ChatLineEvent) *NullableChatLineEvent {
	return &NullableChatLineEvent{value: val, isSet: true}
}

func (v NullableChatLineEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatLineEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


