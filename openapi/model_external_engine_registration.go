/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExternalEngineRegistration struct for ExternalEngineRegistration
type ExternalEngineRegistration struct {
	// Display name of the engine.
	Name interface{} `json:"name"`
	// Maximum number of available threads.
	MaxThreads interface{} `json:"maxThreads"`
	// Maximum available hash table size, in MiB.
	MaxHash interface{} `json:"maxHash"`
	// Estimated depth of normal search.
	DefaultDepth interface{} `json:"defaultDepth"`
	// Optional list of supported chess variants.
	Variants interface{} `json:"variants,omitempty"`
	// A random token that can be used to [wait for analysis requests](#tag/External-engine/operation/apiExternalEngineAcquire) and provide analysis.  The engine provider should securely generate a random string.  The token will not be readable again, even by the user.  The analysis provider can register multiple engines with the same token, even for different users, and wait for analysis requests from any of them. In this case, the request must not be made via CORS, so that the token is not revealed to any of the users. 
	ProviderSecret interface{} `json:"providerSecret"`
	// Arbitrary data that the engine provider can use for identification or bookkeeping.  Users can read this information, but updating it requires knowing or changing the `providerSecret`. 
	ProviderData interface{} `json:"providerData,omitempty"`
}

// NewExternalEngineRegistration instantiates a new ExternalEngineRegistration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalEngineRegistration(name interface{}, maxThreads interface{}, maxHash interface{}, defaultDepth interface{}, providerSecret interface{}) *ExternalEngineRegistration {
	this := ExternalEngineRegistration{}
	this.Name = name
	this.MaxThreads = maxThreads
	this.MaxHash = maxHash
	this.DefaultDepth = defaultDepth
	this.ProviderSecret = providerSecret
	return &this
}

// NewExternalEngineRegistrationWithDefaults instantiates a new ExternalEngineRegistration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalEngineRegistrationWithDefaults() *ExternalEngineRegistration {
	this := ExternalEngineRegistration{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExternalEngineRegistration) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalEngineRegistration) GetNameOk() (*interface{}, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExternalEngineRegistration) SetName(v interface{}) {
	o.Name = v
}

// GetMaxThreads returns the MaxThreads field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExternalEngineRegistration) GetMaxThreads() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.MaxThreads
}

// GetMaxThreadsOk returns a tuple with the MaxThreads field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalEngineRegistration) GetMaxThreadsOk() (*interface{}, bool) {
	if o == nil || o.MaxThreads == nil {
		return nil, false
	}
	return &o.MaxThreads, true
}

// SetMaxThreads sets field value
func (o *ExternalEngineRegistration) SetMaxThreads(v interface{}) {
	o.MaxThreads = v
}

// GetMaxHash returns the MaxHash field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExternalEngineRegistration) GetMaxHash() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.MaxHash
}

// GetMaxHashOk returns a tuple with the MaxHash field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalEngineRegistration) GetMaxHashOk() (*interface{}, bool) {
	if o == nil || o.MaxHash == nil {
		return nil, false
	}
	return &o.MaxHash, true
}

// SetMaxHash sets field value
func (o *ExternalEngineRegistration) SetMaxHash(v interface{}) {
	o.MaxHash = v
}

// GetDefaultDepth returns the DefaultDepth field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExternalEngineRegistration) GetDefaultDepth() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.DefaultDepth
}

// GetDefaultDepthOk returns a tuple with the DefaultDepth field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalEngineRegistration) GetDefaultDepthOk() (*interface{}, bool) {
	if o == nil || o.DefaultDepth == nil {
		return nil, false
	}
	return &o.DefaultDepth, true
}

// SetDefaultDepth sets field value
func (o *ExternalEngineRegistration) SetDefaultDepth(v interface{}) {
	o.DefaultDepth = v
}

// GetVariants returns the Variants field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalEngineRegistration) GetVariants() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalEngineRegistration) GetVariantsOk() (*interface{}, bool) {
	if o == nil || o.Variants == nil {
		return nil, false
	}
	return &o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *ExternalEngineRegistration) HasVariants() bool {
	if o != nil && o.Variants != nil {
		return true
	}

	return false
}

// SetVariants gets a reference to the given interface{} and assigns it to the Variants field.
func (o *ExternalEngineRegistration) SetVariants(v interface{}) {
	o.Variants = v
}

// GetProviderSecret returns the ProviderSecret field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExternalEngineRegistration) GetProviderSecret() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ProviderSecret
}

// GetProviderSecretOk returns a tuple with the ProviderSecret field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalEngineRegistration) GetProviderSecretOk() (*interface{}, bool) {
	if o == nil || o.ProviderSecret == nil {
		return nil, false
	}
	return &o.ProviderSecret, true
}

// SetProviderSecret sets field value
func (o *ExternalEngineRegistration) SetProviderSecret(v interface{}) {
	o.ProviderSecret = v
}

// GetProviderData returns the ProviderData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalEngineRegistration) GetProviderData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ProviderData
}

// GetProviderDataOk returns a tuple with the ProviderData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalEngineRegistration) GetProviderDataOk() (*interface{}, bool) {
	if o == nil || o.ProviderData == nil {
		return nil, false
	}
	return &o.ProviderData, true
}

// HasProviderData returns a boolean if a field has been set.
func (o *ExternalEngineRegistration) HasProviderData() bool {
	if o != nil && o.ProviderData != nil {
		return true
	}

	return false
}

// SetProviderData gets a reference to the given interface{} and assigns it to the ProviderData field.
func (o *ExternalEngineRegistration) SetProviderData(v interface{}) {
	o.ProviderData = v
}

func (o ExternalEngineRegistration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.MaxThreads != nil {
		toSerialize["maxThreads"] = o.MaxThreads
	}
	if o.MaxHash != nil {
		toSerialize["maxHash"] = o.MaxHash
	}
	if o.DefaultDepth != nil {
		toSerialize["defaultDepth"] = o.DefaultDepth
	}
	if o.Variants != nil {
		toSerialize["variants"] = o.Variants
	}
	if o.ProviderSecret != nil {
		toSerialize["providerSecret"] = o.ProviderSecret
	}
	if o.ProviderData != nil {
		toSerialize["providerData"] = o.ProviderData
	}
	return json.Marshal(toSerialize)
}

type NullableExternalEngineRegistration struct {
	value *ExternalEngineRegistration
	isSet bool
}

func (v NullableExternalEngineRegistration) Get() *ExternalEngineRegistration {
	return v.value
}

func (v *NullableExternalEngineRegistration) Set(val *ExternalEngineRegistration) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalEngineRegistration) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalEngineRegistration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalEngineRegistration(val *ExternalEngineRegistration) *NullableExternalEngineRegistration {
	return &NullableExternalEngineRegistration{value: val, isSet: true}
}

func (v NullableExternalEngineRegistration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalEngineRegistration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


