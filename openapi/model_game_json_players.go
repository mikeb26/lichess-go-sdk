/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GameJsonPlayers struct for GameJsonPlayers
type GameJsonPlayers struct {
	White *GameUser `json:"white,omitempty"`
	Black *GameUser `json:"black,omitempty"`
}

// NewGameJsonPlayers instantiates a new GameJsonPlayers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGameJsonPlayers() *GameJsonPlayers {
	this := GameJsonPlayers{}
	return &this
}

// NewGameJsonPlayersWithDefaults instantiates a new GameJsonPlayers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameJsonPlayersWithDefaults() *GameJsonPlayers {
	this := GameJsonPlayers{}
	return &this
}

// GetWhite returns the White field value if set, zero value otherwise.
func (o *GameJsonPlayers) GetWhite() GameUser {
	if o == nil || o.White == nil {
		var ret GameUser
		return ret
	}
	return *o.White
}

// GetWhiteOk returns a tuple with the White field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameJsonPlayers) GetWhiteOk() (*GameUser, bool) {
	if o == nil || o.White == nil {
		return nil, false
	}
	return o.White, true
}

// HasWhite returns a boolean if a field has been set.
func (o *GameJsonPlayers) HasWhite() bool {
	if o != nil && o.White != nil {
		return true
	}

	return false
}

// SetWhite gets a reference to the given GameUser and assigns it to the White field.
func (o *GameJsonPlayers) SetWhite(v GameUser) {
	o.White = &v
}

// GetBlack returns the Black field value if set, zero value otherwise.
func (o *GameJsonPlayers) GetBlack() GameUser {
	if o == nil || o.Black == nil {
		var ret GameUser
		return ret
	}
	return *o.Black
}

// GetBlackOk returns a tuple with the Black field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameJsonPlayers) GetBlackOk() (*GameUser, bool) {
	if o == nil || o.Black == nil {
		return nil, false
	}
	return o.Black, true
}

// HasBlack returns a boolean if a field has been set.
func (o *GameJsonPlayers) HasBlack() bool {
	if o != nil && o.Black != nil {
		return true
	}

	return false
}

// SetBlack gets a reference to the given GameUser and assigns it to the Black field.
func (o *GameJsonPlayers) SetBlack(v GameUser) {
	o.Black = &v
}

func (o GameJsonPlayers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.White != nil {
		toSerialize["white"] = o.White
	}
	if o.Black != nil {
		toSerialize["black"] = o.Black
	}
	return json.Marshal(toSerialize)
}

type NullableGameJsonPlayers struct {
	value *GameJsonPlayers
	isSet bool
}

func (v NullableGameJsonPlayers) Get() *GameJsonPlayers {
	return v.value
}

func (v *NullableGameJsonPlayers) Set(val *GameJsonPlayers) {
	v.value = val
	v.isSet = true
}

func (v NullableGameJsonPlayers) IsSet() bool {
	return v.isSet
}

func (v *NullableGameJsonPlayers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameJsonPlayers(val *GameJsonPlayers) *NullableGameJsonPlayers {
	return &NullableGameJsonPlayers{value: val, isSet: true}
}

func (v NullableGameJsonPlayers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameJsonPlayers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


