/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Perfs struct for Perfs
type Perfs struct {
	Chess960 *Perf `json:"chess960,omitempty"`
	Atomic *Perf `json:"atomic,omitempty"`
	RacingKings *Perf `json:"racingKings,omitempty"`
	UltraBullet *Perf `json:"ultraBullet,omitempty"`
	Blitz *Perf `json:"blitz,omitempty"`
	KingOfTheHill *Perf `json:"kingOfTheHill,omitempty"`
	Bullet *Perf `json:"bullet,omitempty"`
	Correspondence *Perf `json:"correspondence,omitempty"`
	Horde *Perf `json:"horde,omitempty"`
	Puzzle *Perf `json:"puzzle,omitempty"`
	Classical *Perf `json:"classical,omitempty"`
	Rapid *Perf `json:"rapid,omitempty"`
	Storm *StormPerf `json:"storm,omitempty"`
}

// NewPerfs instantiates a new Perfs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerfs() *Perfs {
	this := Perfs{}
	return &this
}

// NewPerfsWithDefaults instantiates a new Perfs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPerfsWithDefaults() *Perfs {
	this := Perfs{}
	return &this
}

// GetChess960 returns the Chess960 field value if set, zero value otherwise.
func (o *Perfs) GetChess960() Perf {
	if o == nil || o.Chess960 == nil {
		var ret Perf
		return ret
	}
	return *o.Chess960
}

// GetChess960Ok returns a tuple with the Chess960 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetChess960Ok() (*Perf, bool) {
	if o == nil || o.Chess960 == nil {
		return nil, false
	}
	return o.Chess960, true
}

// HasChess960 returns a boolean if a field has been set.
func (o *Perfs) HasChess960() bool {
	if o != nil && o.Chess960 != nil {
		return true
	}

	return false
}

// SetChess960 gets a reference to the given Perf and assigns it to the Chess960 field.
func (o *Perfs) SetChess960(v Perf) {
	o.Chess960 = &v
}

// GetAtomic returns the Atomic field value if set, zero value otherwise.
func (o *Perfs) GetAtomic() Perf {
	if o == nil || o.Atomic == nil {
		var ret Perf
		return ret
	}
	return *o.Atomic
}

// GetAtomicOk returns a tuple with the Atomic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetAtomicOk() (*Perf, bool) {
	if o == nil || o.Atomic == nil {
		return nil, false
	}
	return o.Atomic, true
}

// HasAtomic returns a boolean if a field has been set.
func (o *Perfs) HasAtomic() bool {
	if o != nil && o.Atomic != nil {
		return true
	}

	return false
}

// SetAtomic gets a reference to the given Perf and assigns it to the Atomic field.
func (o *Perfs) SetAtomic(v Perf) {
	o.Atomic = &v
}

// GetRacingKings returns the RacingKings field value if set, zero value otherwise.
func (o *Perfs) GetRacingKings() Perf {
	if o == nil || o.RacingKings == nil {
		var ret Perf
		return ret
	}
	return *o.RacingKings
}

// GetRacingKingsOk returns a tuple with the RacingKings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetRacingKingsOk() (*Perf, bool) {
	if o == nil || o.RacingKings == nil {
		return nil, false
	}
	return o.RacingKings, true
}

// HasRacingKings returns a boolean if a field has been set.
func (o *Perfs) HasRacingKings() bool {
	if o != nil && o.RacingKings != nil {
		return true
	}

	return false
}

// SetRacingKings gets a reference to the given Perf and assigns it to the RacingKings field.
func (o *Perfs) SetRacingKings(v Perf) {
	o.RacingKings = &v
}

// GetUltraBullet returns the UltraBullet field value if set, zero value otherwise.
func (o *Perfs) GetUltraBullet() Perf {
	if o == nil || o.UltraBullet == nil {
		var ret Perf
		return ret
	}
	return *o.UltraBullet
}

// GetUltraBulletOk returns a tuple with the UltraBullet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetUltraBulletOk() (*Perf, bool) {
	if o == nil || o.UltraBullet == nil {
		return nil, false
	}
	return o.UltraBullet, true
}

// HasUltraBullet returns a boolean if a field has been set.
func (o *Perfs) HasUltraBullet() bool {
	if o != nil && o.UltraBullet != nil {
		return true
	}

	return false
}

// SetUltraBullet gets a reference to the given Perf and assigns it to the UltraBullet field.
func (o *Perfs) SetUltraBullet(v Perf) {
	o.UltraBullet = &v
}

// GetBlitz returns the Blitz field value if set, zero value otherwise.
func (o *Perfs) GetBlitz() Perf {
	if o == nil || o.Blitz == nil {
		var ret Perf
		return ret
	}
	return *o.Blitz
}

// GetBlitzOk returns a tuple with the Blitz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetBlitzOk() (*Perf, bool) {
	if o == nil || o.Blitz == nil {
		return nil, false
	}
	return o.Blitz, true
}

// HasBlitz returns a boolean if a field has been set.
func (o *Perfs) HasBlitz() bool {
	if o != nil && o.Blitz != nil {
		return true
	}

	return false
}

// SetBlitz gets a reference to the given Perf and assigns it to the Blitz field.
func (o *Perfs) SetBlitz(v Perf) {
	o.Blitz = &v
}

// GetKingOfTheHill returns the KingOfTheHill field value if set, zero value otherwise.
func (o *Perfs) GetKingOfTheHill() Perf {
	if o == nil || o.KingOfTheHill == nil {
		var ret Perf
		return ret
	}
	return *o.KingOfTheHill
}

// GetKingOfTheHillOk returns a tuple with the KingOfTheHill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetKingOfTheHillOk() (*Perf, bool) {
	if o == nil || o.KingOfTheHill == nil {
		return nil, false
	}
	return o.KingOfTheHill, true
}

// HasKingOfTheHill returns a boolean if a field has been set.
func (o *Perfs) HasKingOfTheHill() bool {
	if o != nil && o.KingOfTheHill != nil {
		return true
	}

	return false
}

// SetKingOfTheHill gets a reference to the given Perf and assigns it to the KingOfTheHill field.
func (o *Perfs) SetKingOfTheHill(v Perf) {
	o.KingOfTheHill = &v
}

// GetBullet returns the Bullet field value if set, zero value otherwise.
func (o *Perfs) GetBullet() Perf {
	if o == nil || o.Bullet == nil {
		var ret Perf
		return ret
	}
	return *o.Bullet
}

// GetBulletOk returns a tuple with the Bullet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetBulletOk() (*Perf, bool) {
	if o == nil || o.Bullet == nil {
		return nil, false
	}
	return o.Bullet, true
}

// HasBullet returns a boolean if a field has been set.
func (o *Perfs) HasBullet() bool {
	if o != nil && o.Bullet != nil {
		return true
	}

	return false
}

// SetBullet gets a reference to the given Perf and assigns it to the Bullet field.
func (o *Perfs) SetBullet(v Perf) {
	o.Bullet = &v
}

// GetCorrespondence returns the Correspondence field value if set, zero value otherwise.
func (o *Perfs) GetCorrespondence() Perf {
	if o == nil || o.Correspondence == nil {
		var ret Perf
		return ret
	}
	return *o.Correspondence
}

// GetCorrespondenceOk returns a tuple with the Correspondence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetCorrespondenceOk() (*Perf, bool) {
	if o == nil || o.Correspondence == nil {
		return nil, false
	}
	return o.Correspondence, true
}

// HasCorrespondence returns a boolean if a field has been set.
func (o *Perfs) HasCorrespondence() bool {
	if o != nil && o.Correspondence != nil {
		return true
	}

	return false
}

// SetCorrespondence gets a reference to the given Perf and assigns it to the Correspondence field.
func (o *Perfs) SetCorrespondence(v Perf) {
	o.Correspondence = &v
}

// GetHorde returns the Horde field value if set, zero value otherwise.
func (o *Perfs) GetHorde() Perf {
	if o == nil || o.Horde == nil {
		var ret Perf
		return ret
	}
	return *o.Horde
}

// GetHordeOk returns a tuple with the Horde field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetHordeOk() (*Perf, bool) {
	if o == nil || o.Horde == nil {
		return nil, false
	}
	return o.Horde, true
}

// HasHorde returns a boolean if a field has been set.
func (o *Perfs) HasHorde() bool {
	if o != nil && o.Horde != nil {
		return true
	}

	return false
}

// SetHorde gets a reference to the given Perf and assigns it to the Horde field.
func (o *Perfs) SetHorde(v Perf) {
	o.Horde = &v
}

// GetPuzzle returns the Puzzle field value if set, zero value otherwise.
func (o *Perfs) GetPuzzle() Perf {
	if o == nil || o.Puzzle == nil {
		var ret Perf
		return ret
	}
	return *o.Puzzle
}

// GetPuzzleOk returns a tuple with the Puzzle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetPuzzleOk() (*Perf, bool) {
	if o == nil || o.Puzzle == nil {
		return nil, false
	}
	return o.Puzzle, true
}

// HasPuzzle returns a boolean if a field has been set.
func (o *Perfs) HasPuzzle() bool {
	if o != nil && o.Puzzle != nil {
		return true
	}

	return false
}

// SetPuzzle gets a reference to the given Perf and assigns it to the Puzzle field.
func (o *Perfs) SetPuzzle(v Perf) {
	o.Puzzle = &v
}

// GetClassical returns the Classical field value if set, zero value otherwise.
func (o *Perfs) GetClassical() Perf {
	if o == nil || o.Classical == nil {
		var ret Perf
		return ret
	}
	return *o.Classical
}

// GetClassicalOk returns a tuple with the Classical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetClassicalOk() (*Perf, bool) {
	if o == nil || o.Classical == nil {
		return nil, false
	}
	return o.Classical, true
}

// HasClassical returns a boolean if a field has been set.
func (o *Perfs) HasClassical() bool {
	if o != nil && o.Classical != nil {
		return true
	}

	return false
}

// SetClassical gets a reference to the given Perf and assigns it to the Classical field.
func (o *Perfs) SetClassical(v Perf) {
	o.Classical = &v
}

// GetRapid returns the Rapid field value if set, zero value otherwise.
func (o *Perfs) GetRapid() Perf {
	if o == nil || o.Rapid == nil {
		var ret Perf
		return ret
	}
	return *o.Rapid
}

// GetRapidOk returns a tuple with the Rapid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetRapidOk() (*Perf, bool) {
	if o == nil || o.Rapid == nil {
		return nil, false
	}
	return o.Rapid, true
}

// HasRapid returns a boolean if a field has been set.
func (o *Perfs) HasRapid() bool {
	if o != nil && o.Rapid != nil {
		return true
	}

	return false
}

// SetRapid gets a reference to the given Perf and assigns it to the Rapid field.
func (o *Perfs) SetRapid(v Perf) {
	o.Rapid = &v
}

// GetStorm returns the Storm field value if set, zero value otherwise.
func (o *Perfs) GetStorm() StormPerf {
	if o == nil || o.Storm == nil {
		var ret StormPerf
		return ret
	}
	return *o.Storm
}

// GetStormOk returns a tuple with the Storm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perfs) GetStormOk() (*StormPerf, bool) {
	if o == nil || o.Storm == nil {
		return nil, false
	}
	return o.Storm, true
}

// HasStorm returns a boolean if a field has been set.
func (o *Perfs) HasStorm() bool {
	if o != nil && o.Storm != nil {
		return true
	}

	return false
}

// SetStorm gets a reference to the given StormPerf and assigns it to the Storm field.
func (o *Perfs) SetStorm(v StormPerf) {
	o.Storm = &v
}

func (o Perfs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Chess960 != nil {
		toSerialize["chess960"] = o.Chess960
	}
	if o.Atomic != nil {
		toSerialize["atomic"] = o.Atomic
	}
	if o.RacingKings != nil {
		toSerialize["racingKings"] = o.RacingKings
	}
	if o.UltraBullet != nil {
		toSerialize["ultraBullet"] = o.UltraBullet
	}
	if o.Blitz != nil {
		toSerialize["blitz"] = o.Blitz
	}
	if o.KingOfTheHill != nil {
		toSerialize["kingOfTheHill"] = o.KingOfTheHill
	}
	if o.Bullet != nil {
		toSerialize["bullet"] = o.Bullet
	}
	if o.Correspondence != nil {
		toSerialize["correspondence"] = o.Correspondence
	}
	if o.Horde != nil {
		toSerialize["horde"] = o.Horde
	}
	if o.Puzzle != nil {
		toSerialize["puzzle"] = o.Puzzle
	}
	if o.Classical != nil {
		toSerialize["classical"] = o.Classical
	}
	if o.Rapid != nil {
		toSerialize["rapid"] = o.Rapid
	}
	if o.Storm != nil {
		toSerialize["storm"] = o.Storm
	}
	return json.Marshal(toSerialize)
}

type NullablePerfs struct {
	value *Perfs
	isSet bool
}

func (v NullablePerfs) Get() *Perfs {
	return v.value
}

func (v *NullablePerfs) Set(val *Perfs) {
	v.value = val
	v.isSet = true
}

func (v NullablePerfs) IsSet() bool {
	return v.isSet
}

func (v *NullablePerfs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerfs(val *Perfs) *NullablePerfs {
	return &NullablePerfs{value: val, isSet: true}
}

func (v NullablePerfs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerfs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


