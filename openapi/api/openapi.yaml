openapi: 3.1.0
info:
  contact:
    email: contact@lichess.org
    name: Lichess.org API
    url: https://lichess.org/api
  description: |
    # Introduction
    Welcome to the reference for the Lichess API! Lichess is free/libre,
    open-source chess server powered by volunteers and donations.
    - Get help in the [Lichess Discord channel](https://discord.gg/lichess)
    - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/)
    - [Contribute to this documentation on Github](https://github.com/lichess-org/api)
    - Check out [Lichess widgets to embed in your website](https://lichess.org/developers)
    - [Download all Lichess rated games](https://database.lichess.org/)
    - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)

    ## Endpoint
    All requests go to `https://lichess.org` (unless otherwise specified).

    ## Clients
    - [Python general API](https://github.com/ZackClements/berserk)
    - [MicroPython general API](https://github.com/mkomon/uberserk)
    - [Python general API - async](https://pypi.org/project/async-lichess-sdk)
    - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot)
    - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess)
    - [Java general API](https://github.com/tors42/chariot)

    ## Rate limiting
    All requests are rate limited using various strategies,
    to ensure the API remains responsive for everyone.
    Only make one request at a time.
    If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429),
    please wait a full minute before resuming API usage.

    ## Streaming with ND-JSON
    Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.

    Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses.
  title: Lichess.org API reference
  version: 2.0.0
  x-logo:
    url: https://lichess1.org/assets/logo/lichess-pad12.svg
servers:
- url: https://lichess.org
tags:
- description: |
    Read and write account information and preferences.
    <https://lichess.org/account/preferences/game-display>
  name: Account
- description: |
    Access registered users on Lichess.
    <https://lichess.org/player>

    - Each user blog exposes an atom (RSS) feed, like <https://lichess.org/@/thibault/blog.atom>
    - User blogs mashup feed: https://lichess.org/blog/community.atom
    - User blogs mashup feed for a language: https://lichess.org/blog/community/fr.atom
  name: Users
- description: |
    Access relations between users.
  name: Relations
- description: |
    Access games played on Lichess.
    <https://lichess.org/games>
  name: Games
- description: |
    Access Lichess TV channels and games.
    <https://lichess.org/tv> & <https://lichess.org/games>
  name: TV
- description: |
    Access Lichess [puzzle history and dashboard](https://lichess.org/training).

    Our collection of puzzles is in the public domain, you can [download it here](https://database.lichess.org/#puzzles).
    For a list of our puzzle themes with their description, check out the [theme translation file](https://github.com/ornicar/lila/blob/master/translation/source/puzzleTheme.xml).
    The daily puzzle can be [posted in your slack workspace](https://lichess.org/daily-puzzle-slack).
  name: Puzzles
- description: |
    Access and manage Lichess teams and their members.
    <https://lichess.org/team>
  name: Teams
- description: "Play on Lichess with physical boards and third-party clients.\n  Works\
    \ with normal Lichess accounts. Engine play or assistance is [forbidden](https://lichess.org/page/fair-play).\n\
    \n\n### Features\n - [Stream incoming chess moves](#operation/boardGameStream)\n\
    \ - [Play chess moves](#operation/boardGameMove)\n - [Read](#operation/boardGameStream)\
    \ and [write](#operation/boardGameChatPost) in the player and spectator chats\n\
    \ - [Receive](#operation/apiStreamEvent), [create](#operation/challengeCreate)\
    \ and [accept](#operation/challengeAccept) (or [decline](#operation/challengeDecline))\
    \ challenges\n - [Abort](#operation/boardGameAbort) and [resign](#operation/boardGameResign)\
    \ games\n - Compatible with normal Lichess accounts\n\n \n### Restrictions\n -\
    \ Engine assistance, or any kind of outside help, is [forbidden](https://lichess.org/page/fair-play)\n\
    \ - Time controls: [Rapid, Classical and Correspondence](https://lichess.org/faq#time-controls)\
    \ only.\n   For direct challenges and games vs AI, Blitz is also possible.\n\n\
    ### Links\n - [Announcement](https://lichess.org/blog/XlRW5REAAB8AUJJ-/welcome-lichess-boards)\n\
    \ - [Implementation example](https://github.com/lichess-org/api-demo) and [live\
    \ demo](https://lichess-org.github.io/api-demo/)\n\n  - [Certabo support](https://github.com/haklein/certabo-lichess)\n\
    \ - [Lichs (play from command-line)](https://github.com/Cqsi/lichs)\n - [Lichess\
    \ discord bot](https://top.gg/bot/707287095911120968)"
  name: Board
- description: |-
    Play on Lichess as a bot. Allows engine play.
      Read the [blog post announcement of lichess bots](https://lichess.org/blog/WvDNticAAMu_mHKP/welcome-lichess-bots).

      Only works with [Bot accounts](#operation/botAccountUpgrade).


    ### Features
     - [Stream incoming chess moves](#operation/botGameStream)
     - [Play chess moves](#operation/botGameMove)
     - [Read](#operation/botGameStream) and [write](#operation/botGameChat) in the player and spectator chats
     - [Receive](#operation/apiStreamEvent), [create](#operation/challengeCreate) and [accept](#operation/challengeAccept) (or [decline](#operation/challengeDecline)) challenges
     - [Abort](#operation/botGameAbort) and [resign](#operation/botGameResign) games
     - Engine assistance is [allowed](https://lichess.org/page/fair-play)

    ### Restrictions
     - Bots can only play challenge games:  pools and tournaments are off-limits
     - Bots cannot play UltraBullet (¼+0) because it requires making too many requests. But 0+1 and ½+0 are allowed.

    ### Integrations
     - [Python3 lichess-bot](https://github.com/ShailChoksi/lichess-bot) (official)
     - [JavaScript bot-o-tron](https://github.com/tailuge/bot-o-tron)
     - [Golang lichess-bot](https://github.com/dolegi/lichess-bot)
     - [Electronic Chessboard](http://www.oliviermercier.com/res/projects/chessboard/)  - Yours? Please make [an issue or pull request](https://github.com/lichess-org/api).

    ### Links
     - [Announcement](https://lichess.org/blog/WvDNticAAMu_mHKP/welcome-lichess-bots)
     - Join the [Lichess Bots team](https://lichess.org/team/lichess-bots) with your bot account
     - [Get help in the discord channel](https://discord.gg/quwueFd)
     - Watch [Lichess Bot TV](https://lichess.org/tv/bot)
  name: Bot
- description: |
    Send and receive challenges to play.

    To create a lot of challenges, consider [bulk pairing](#operation/bulkPairingCreate) instead.
  name: Challenges
- description: |
    Create many games for other players.

    These endpoints are intended for tournament organisers.
  name: Bulk pairings
- description: |
    Access Arena tournaments played on Lichess.
    [Official Arena tournaments](https://lichess.org/tournament) are maintained by Lichess,
    but you can [create your own Arena tournaments](https://lichess.org/tournament/new) as well.
  name: Arena tournaments
- description: |
    Access Swiss tournaments played on Lichess.
    [Read more about Swiss tournaments.](https://lichess.org/swiss).
  name: Swiss tournaments
- description: |
    Access simuls played on Lichess.
    <https://lichess.org/simul>
  name: Simuls
- description: |
    Access Lichess studies.
    <https://lichess.org/study>
  name: Studies
- description: |
    Private messages with other players.
    <https://lichess.org/inbox>
  name: Messaging
- description: |
    Relay chess events on Lichess.
    [Official broadcasts](https://lichess.org/broadcast) are maintained by Lichess,
    but you can [create your own broadcasts](https://lichess.org/broadcast/new) to cover any live game or chess event.
    You will need to publish PGN on a public URL so that Lichess can pull updates from it.
    Alternatively, you can push PGN updates to Lichess using this API.

    Broadcasts are organized in tournaments, which have several rounds, which have several games.
    You must first create a tournament, then you can add rounds to them.
  name: Broadcasts
- description: |
    Access Lichess cloud evaluations database.
    <https://lichess.org/analysis>
  name: Analysis
- description: |
    **This API is in alpha and subject to change.**

    Use or provide external engine analysis.

    External engines can provide analysis on pages like the
    [analysis board](https://lichess.org/analysis), running as a service
    outside of the browser, or even on a different machine.
  name: External engine
- description: |
    Lookup positions from the [Lichess opening explorer](https://lichess.org/analysis#explorer).

    Runs <https://github.com/niklasf/lila-openingexplorer>.

    **The endpoint hostname is not lichess.org but explorer.lichess.ovh.**
  name: Opening Explorer
- description: |
    Lookup positions from the [Lichess tablebase server](https://lichess.org/blog/W3WeMyQAACQAdfAL/7-piece-syzygy-tablebases-are-complete).

    **The endpoint hostname is not lichess.org but tablebase.lichess.ovh.**
  name: Tablebase
- description: |
    Obtaining and revoking OAuth tokens.

    [Read about the Lichess API authentication methods and code examples](https://github.com/lichess-org/api/blob/master/example/README.md).
  name: OAuth
paths:
  /api/users/status:
    get:
      description: |
        Read the `online`, `playing` and `streaming` flags of several users.

        This API is very fast and cheap on lichess side.
        So you can call it quite often (like once every 5 seconds).

        Use it to track players and know when they're connected on lichess and playing games.
      operationId: apiUsersStatus
      parameters:
      - description: User IDs separated by commas. Up to 100 IDs.
        example: "aliquantus,chess-network,lovlas"
        explode: true
        in: query
        name: ids
        required: true
        schema: {}
        style: form
      - description: |
          Also return the ID of the game being played, if any, for each player, in a `playingId` field.
          Defaults to `false` to preserve server resources.
        example: true
        explode: true
        in: query
        name: withGameIds
        required: false
        schema: {}
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - id: aliquantus
                  name: Aliquantus
                - id: chess-network
                  name: Chess-Network
                  title: NM
                  online: true
                  playing: true
                  streaming: true
                  patron: true
                items:
                  $ref: '#/components/schemas/apiUsersStatus_200_response_inner'
                type: array
          description: The list of users and their respective statuses.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get real-time users status
      tags:
      - Users
  /api/player:
    get:
      description: |
        Get the top 10 players for each speed and variant.

        See <https://lichess.org/player>.
      operationId: player
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Top10s'
          description: The list of variants with their respective top players.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get all top 10
      tags:
      - Users
  /api/player/top/{nb}/{perfType}:
    get:
      description: |
        Get the leaderboard for a single speed or variant (a.k.a. `perfType`).
        There is no leaderboard for correspondence or puzzles.

        See <https://lichess.org/player/top/200/bullet>.
      operationId: playerTopNbPerfType
      parameters:
      - description: How many users to fetch
        explode: false
        in: path
        name: nb
        required: true
        schema:
          example: 100
          maximum: 200
          minimum: 1
        style: simple
      - description: The speed or variant
        explode: false
        in: path
        name: perfType
        required: true
        schema:
          enum:
          - ultraBullet
          - bullet
          - blitz
          - rapid
          - classical
          - chess960
          - crazyhouse
          - antichess
          - atomic
          - horde
          - kingOfTheHill
          - racingKings
          - threeCheck
          example: bullet
        style: simple
      responses:
        "200":
          content:
            application/vnd.lichess.v3+json:
              schema:
                $ref: '#/components/schemas/Leaderboard'
          description: The list of top players for the variant.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get one leaderboard
      tags:
      - Users
  /api/user/{username}:
    get:
      description: |
        Read public data of a user.

        If the request is [authenticated with OAuth2](#section/Authentication),
        then extra fields might be present in the response: `followable`, `following`, `blocking`, `followsYou`.
      operationId: apiUser
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema: {}
        style: simple
      - description: Include user trophies
        explode: true
        in: query
        name: trophies
        required: false
        schema:
          default: false
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExtended'
          description: The information of the user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2: []
      summary: Get user public data
      tags:
      - Users
  /api/user/{username}/rating-history:
    get:
      description: |
        Read rating history of a user, for all perf types.
        There is at most one entry per day.
        Format of an entry is `[year, month, day, rating]`.
        `month` starts at zero (January).
      operationId: apiUserRatingHistory
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingHistory'
          description: The rating history of the user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get rating history of a user
      tags:
      - Users
  /api/user/{username}/perf/{perf}:
    get:
      description: |
        Read performance statistics of a user, for a single performance.
        Similar to the [performance pages on the website](https://lichess.org/@/thibault/perf/bullet).
      operationId: apiUserPerf
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema: {}
        style: simple
      - explode: false
        in: path
        name: perf
        required: true
        schema:
          $ref: '#/components/schemas/PerfType'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerfStat'
          description: The performance statistics of the user
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get performance statistics of a user
      tags:
      - Users
  /api/user/{username}/activity:
    get:
      description: |
        Read data to generate the activity feed of a user.
      operationId: apiUserActivity
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              example: https://gist.github.com/ornicar/0ee2d2427cb74ed1a35e86f5ba09fabc
          description: The activity feed of the user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get user activity
      tags:
      - Users
  /api/puzzle/daily:
    get:
      description: |
        Get the daily Lichess puzzle in JSON format.

        Alternatively, you can [post it in your slack workspace](https://lichess.org/daily-puzzle-slack).
      operationId: apiPuzzleDaily
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PuzzleJson'
          description: The daily puzzle.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get the daily puzzle
      tags:
      - Puzzles
  /api/puzzle/{id}:
    get:
      description: Get a single Lichess puzzle in JSON format.
      operationId: apiPuzzleId
      parameters:
      - description: The puzzle ID
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PuzzleJson'
          description: The requested puzzle.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get a puzzle by its ID
      tags:
      - Puzzles
  /api/puzzle/activity:
    get:
      description: |
        Download your puzzle activity in [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.

        Puzzle activity is sorted by reverse chronological order (most recent first)

        We recommend streaming the response, for it can be very long.
      operationId: apiPuzzleActivity
      parameters:
      - description: How many entries to download. Leave empty to download all activity.
        explode: true
        in: query
        name: max
        required: false
        schema:
          minimum: 1
        style: form
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/PuzzleRoundJson'
          description: The puzzle activity of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - puzzle:read
      summary: Get your puzzle activity
      tags:
      - Puzzles
  /api/puzzle/dashboard/{days}:
    get:
      description: |
        Download your [puzzle dashboard](https://lichess.org/training/dashboard/30/dashboard) as JSON.

        Also includes all puzzle themes played, with aggregated results.

        Allows re-creating the [improvement/strengths](https://lichess.org/training/dashboard/30/improvementAreas) interfaces.
      operationId: apiPuzzleDashboard
      parameters:
      - description: How many days to look back when aggregating puzzle results. 30
          is sensible.
        explode: false
        in: path
        name: days
        required: true
        schema:
          minimum: 1
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PuzzleDashboardJson'
          description: The puzzle dashboard of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - puzzle:read
      summary: Get your puzzle dashboard
      tags:
      - Puzzles
  /api/storm/dashboard/{username}:
    get:
      description: |
        Download the [storm dashboard](https://lichess.org/storm/dashboard/mrbasso) of any player as JSON.

        Contains the aggregated highscores, and the history of storm runs aggregated by days.

        Use `?days=0` if you only care about the highscores.
      operationId: apiStormDashboard
      parameters:
      - description: Username of the player
        explode: false
        in: path
        name: username
        required: true
        schema: {}
        style: simple
      - description: How many days of history to return
        explode: true
        in: query
        name: days
        required: false
        schema:
          default: 30
          maximum: 365
          minimum: 0
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StormDashboardJson'
          description: The storm dashboard of a player.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get the storm dashboard of a player
      tags:
      - Puzzles
  /api/racer:
    post:
      description: |
        Create a new private [puzzle race](https://lichess.org/racer).
        The Lichess user who creates the race must join the race page,
        and manually start the race when enough players have joined.

        - <https://lichess.org/racer>
      operationId: racerPost
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PuzzleRaceJson'
          description: The new puzzle race.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - racer:write
      summary: Create and join a puzzle race
      tags:
      - Puzzles
  /api/users:
    post:
      description: |
        Get up to 300 users by their IDs. Users are returned in the same order as the IDs.

        The method is `POST` so a longer list of IDs can be sent in the request body.
      operationId: apiUsers
      requestBody:
        content:
          text/plain:
            example: "aliquantus,chess-network,lovlas"
            schema: {}
        description: User IDs separated by commas.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: The list of users.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get users by ID
      tags:
      - Users
  /api/account:
    get:
      description: |
        Public information about the logged in user.
      operationId: accountMe
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExtended'
          description: The public information about the logged in user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2: []
      summary: Get my profile
      tags:
      - Account
  /api/account/email:
    get:
      description: |
        Read the email address of the logged in user.
      operationId: accountEmail
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountEmail_200_response'
          description: The email address of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - email:read
      summary: Get my email address
      tags:
      - Account
  /api/account/preferences:
    get:
      description: |
        Read the preferences of the logged in user.

        - <https://lichess.org/account/preferences/game-display>
        - <https://github.com/ornicar/lila/blob/master/modules/pref/src/main/Pref.scala>
      operationId: account
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_200_response'
          description: The preferences of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - preference:read
      summary: Get my preferences
      tags:
      - Account
  /api/account/kid:
    get:
      description: |
        Read the kid mode status of the logged in user.

        - <https://lichess.org/account/kid>
      operationId: accountKid
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountKid_200_response'
          description: The kid mode status of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - preference:read
      summary: Get my kid mode status
      tags:
      - Account
    post:
      description: |
        Set the kid mode status of the logged in user.

        - <https://lichess.org/account/kid>
      operationId: accountKidPost
      parameters:
      - description: Kid mode status
        example: true
        explode: true
        in: query
        name: v
        required: true
        schema: {}
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The kid mode status was set successfully for the logged in
            user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - preference:write
      summary: Set my kid mode status
      tags:
      - Account
  /game/export/{gameId}:
    get:
      description: |
        Download one game in either PGN or JSON format.

        Ongoing games have their last 3 moves omitted, after move 5.
      operationId: gamePgn
      parameters:
      - description: The game ID (8 characters).
        explode: false
        in: path
        name: gameId
        required: true
        schema: {}
        style: simple
      - description: Include the PGN moves.
        explode: true
        in: query
        name: moves
        required: false
        schema:
          default: true
        style: form
      - description: "Include the full PGN within the JSON response, in a `pgn` field."
        explode: true
        in: query
        name: pgnInJson
        required: false
        schema:
          default: false
        style: form
      - description: Include the PGN tags.
        explode: true
        in: query
        name: tags
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include clock comments in the PGN moves, when available.

          Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
        explode: true
        in: query
        name: clocks
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include analysis evaluation comments in the PGN, when available.

          Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
        explode: true
        in: query
        name: evals
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include the opening name.

          Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
        explode: true
        in: query
        name: opening
        required: false
        schema:
          default: true
        style: form
      - description: |
          Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.

          Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
        explode: true
        in: query
        name: literate
        required: false
        schema:
          default: false
        style: form
      - description: |
          URL of a text file containing real names and ratings, to replace Lichess usernames and ratings in the PGN.
          Example: <https://gist.githubusercontent.com/ornicar/6bfa91eb61a2dcae7bcd14cce1b2a4eb/raw/768b9f6cc8a8471d2555e47ba40fb0095e5fba37/gistfile1.txt>
        explode: true
        in: query
        name: players
        required: false
        schema: {}
        style: form
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/json:
              schema:
                $ref: '#/components/schemas/GameJson'
          description: The game representation.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Export one game
      tags:
      - Games
  /api/user/{username}/current-game:
    get:
      description: |
        Download the ongoing game, or the last game played, of a user.
        Available in either PGN or JSON format.
        If the game is ongoing, the 3 last moves are omitted.
      operationId: apiUserCurrentGame
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema: {}
        style: simple
      - description: Include the PGN moves.
        explode: true
        in: query
        name: moves
        required: false
        schema:
          default: true
        style: form
      - description: "Include the full PGN within the JSON response, in a `pgn` field."
        explode: true
        in: query
        name: pgnInJson
        required: false
        schema:
          default: false
        style: form
      - description: Include the PGN tags.
        explode: true
        in: query
        name: tags
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include clock comments in the PGN moves, when available.

          Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
        explode: true
        in: query
        name: clocks
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include analysis evaluation comments in the PGN, when available.

          Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
        explode: true
        in: query
        name: evals
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include the opening name.

          Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
        explode: true
        in: query
        name: opening
        required: false
        schema:
          default: true
        style: form
      - description: |
          Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.

          Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
        explode: true
        in: query
        name: literate
        required: false
        schema:
          default: false
        style: form
      - description: |
          URL of a text file containing real names and ratings, to replace Lichess usernames and ratings in the PGN.
          Example: <https://gist.githubusercontent.com/ornicar/6bfa91eb61a2dcae7bcd14cce1b2a4eb/raw/768b9f6cc8a8471d2555e47ba40fb0095e5fba37/gistfile1.txt>
        explode: true
        in: query
        name: players
        required: false
        schema: {}
        style: form
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/json:
              schema:
                $ref: '#/components/schemas/GameJson'
          description: The ongoing (or last) game of a user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Export ongoing game of a user
      tags:
      - Games
  /api/games/user/{username}:
    get:
      description: |
        Download all games of any user in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.

        Games are sorted by reverse chronological order (most recent first).

        We recommend streaming the response, for it can be very long.
        <https://lichess.org/@/german11> for instance has more than 500,000 games.

        The game stream is throttled, depending on who is making the request:
          - Anonymous request: 20 games per second
          - [OAuth2 authenticated](#section/Authentication) request: 30 games per second
          - Authenticated, downloading your own games: 60 games per second
      operationId: apiGamesUser
      parameters:
      - description: The user name.
        explode: false
        in: path
        name: username
        required: true
        schema: {}
        style: simple
      - description: Download games played since this timestamp. Defaults to account
          creation date.
        explode: true
        in: query
        name: since
        required: false
        schema:
          minimum: 1356998400070
        style: form
      - description: Download games played until this timestamp. Defaults to now.
        explode: true
        in: query
        name: until
        required: false
        schema:
          minimum: 1356998400070
        style: form
      - description: How many games to download. Leave empty to download all games.
        explode: true
        in: query
        name: max
        required: false
        schema:
          minimum: 1
        style: form
      - description: "[Filter] Only games played against this opponent"
        explode: true
        in: query
        name: vs
        required: false
        schema: {}
        style: form
      - description: "[Filter] Only rated (`true`) or casual (`false`) games"
        explode: true
        in: query
        name: rated
        required: false
        schema: {}
        style: form
      - description: "[Filter] Only games in these speeds or variants.\n \nMultiple\
          \ perf types can be specified, separated by a comma.\n \nExample: blitz,rapid,classical"
        explode: true
        in: query
        name: perfType
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/PerfType'
          - default: null
        style: form
      - description: "[Filter] Only games played as this color."
        explode: true
        in: query
        name: color
        required: false
        schema:
          enum:
          - white
          - black
        style: form
      - description: "[Filter] Only games with or without a computer analysis available"
        explode: true
        in: query
        name: analysed
        required: false
        schema: {}
        style: form
      - description: Include the PGN moves.
        explode: true
        in: query
        name: moves
        required: false
        schema: {}
        style: form
      - description: |-
          Include the full PGN within the JSON response, in a `pgn` field.
          The response type must be set to `application/x-ndjson` by the request `Accept` header.
        explode: true
        in: query
        name: pgnInJson
        required: false
        schema:
          default: false
        style: form
      - description: Include the PGN tags.
        explode: true
        in: query
        name: tags
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include clock comments in the PGN moves, when available.

          Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
        explode: true
        in: query
        name: clocks
        required: false
        schema:
          default: false
        style: form
      - description: |
          Include analysis evaluation comments in the PGN, when available.

          Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
        explode: true
        in: query
        name: evals
        required: false
        schema:
          default: false
        style: form
      - description: |
          Include the opening name.

          Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
        explode: true
        in: query
        name: opening
        required: false
        schema:
          default: false
        style: form
      - description: Include ongoing games. The last 3 moves will be omitted.
        explode: true
        in: query
        name: ongoing
        required: false
        schema:
          default: false
        style: form
      - description: Include finished games. Set to `false` to only get ongoing games.
        explode: true
        in: query
        name: finished
        required: false
        schema:
          default: true
        style: form
      - description: |
          Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.

          Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
        explode: true
        in: query
        name: literate
        required: false
        schema:
          default: false
        style: form
      - description: |
          URL of a text file containing real names and ratings, to replace Lichess usernames and ratings in the PGN.
          Example: <https://gist.githubusercontent.com/ornicar/6bfa91eb61a2dcae7bcd14cce1b2a4eb/raw/768b9f6cc8a8471d2555e47ba40fb0095e5fba37/gistfile1.txt>
        explode: true
        in: query
        name: players
        required: false
        schema: {}
        style: form
      - description: Sort order of the games.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: dateDesc
          enum:
          - dateAsc
          - dateDesc
        style: form
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'
          description: The games of the user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2: []
      summary: Export games of a user
      tags:
      - Games
  /api/games/export/_ids:
    post:
      description: |
        Download games by IDs in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request Accept header.

        Games are sorted by reverse chronological order (most recent first)

        The method is `POST` so a longer list of IDs can be sent in the request body.

        300 IDs can be submitted.

        Ongoing games have their last 3 moves omitted, after move 5.
      operationId: gamesExportIds
      parameters:
      - description: Include the PGN moves.
        explode: true
        in: query
        name: moves
        required: false
        schema:
          default: true
        style: form
      - description: "Include the full PGN within the JSON response, in a `pgn` field."
        explode: true
        in: query
        name: pgnInJson
        required: false
        schema:
          default: false
        style: form
      - description: Include the PGN tags.
        explode: true
        in: query
        name: tags
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include clock comments in the PGN moves, when available.

          Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
        explode: true
        in: query
        name: clocks
        required: false
        schema:
          default: false
        style: form
      - description: |
          Include analysis evaluation comments in the PGN, when available.

          Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
        explode: true
        in: query
        name: evals
        required: false
        schema:
          default: false
        style: form
      - description: |
          Include the opening name.

          Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
        explode: true
        in: query
        name: opening
        required: false
        schema:
          default: false
        style: form
      - description: |
          Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.

          Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
        explode: true
        in: query
        name: literate
        required: false
        schema:
          default: false
        style: form
      - description: |
          URL of a text file containing real names and ratings, to replace Lichess usernames and ratings in the PGN.
          Example: <https://gist.githubusercontent.com/ornicar/6bfa91eb61a2dcae7bcd14cce1b2a4eb/raw/768b9f6cc8a8471d2555e47ba40fb0095e5fba37/gistfile1.txt>
        explode: true
        in: query
        name: players
        required: false
        schema: {}
        style: form
      requestBody:
        content:
          text/plain:
            example: "TJxUmbWK,4OtIh2oh,ILwozzRZ"
            schema: {}
        description: Game IDs separated by commas. Up to 300.
        required: true
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'
          description: The representation of the games.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Export games by IDs
      tags:
      - Games
  /api/stream/games-by-users:
    post:
      description: |
        Stream the games played between a list of users, in real time.
        Only games where **both players** are part of the list are included.

        The stream emits an event each time a game is started or finished.

        To also get all current ongoing games at the beginning of the stream, use the `withCurrentGames` flag.

        Games are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).

        Maximum number of users: 300.

        The method is `POST` so a longer list of IDs can be sent in the request body.
      operationId: gamesByUsers
      parameters:
      - description: Include the already started games at the beginning of the stream.
        explode: true
        in: query
        name: withCurrentGames
        required: false
        schema:
          default: false
        style: form
      requestBody:
        content:
          text/plain:
            schema: {}
        description: |
          Up to 300 user IDs separated by commas.
          Example: `aliquantus,chess-network,lovlas`
        required: true
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameStream'
          description: The stream of the games played between the users.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Stream games of users
      tags:
      - Games
  /api/stream/games/{streamId}:
    post:
      description: |
        Creates a stream of games from an arbitrary streamId, and a list of game IDs.

        The stream first outputs the games that already exists, then emits an event each time a game is started or finished.

        Games are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).

        Maximum number of games: 500 for anonymous requests, or 1000 for [OAuth2 authenticated](#section/Authentication) requests.

        While the stream is open, it is possible to [add new game IDs to watch](#operation/gamesByIdsAdd).
      operationId: gamesByIds
      parameters:
      - explode: false
        in: path
        name: streamId
        required: true
        schema:
          description: Arbitrary stream ID that you can later use to add game IDs
            to the stream.
          example: myAppName-someRandomId
        style: simple
      requestBody:
        content:
          text/plain:
            schema: {}
        description: |
          Up to 500 or 1000 game IDs separated by commas.
          Example: `gameId01,gameId02,gameId03`
        required: true
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameStream'
          description: The stream of the games matching the requested IDs.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Stream games by IDs
      tags:
      - Games
  /api/stream/games/{streamId}/add:
    post:
      description: |
        Add new game IDs for [an existing stream](#operation/gamesByIds) to watch.
        The stream will immediately outputs the games that already exists, then emit an event each time a game is started or finished.
      operationId: gamesByIdsAdd
      parameters:
      - explode: false
        in: path
        name: streamId
        required: true
        schema:
          description: "The stream ID you used to [create the stream](#operation/gamesByIds)."
          example: myAppName-someRandomId
        style: simple
      requestBody:
        content:
          text/plain:
            schema: {}
        description: |
          Up to 500 or 1000 game IDs separated by commas.
          Example: `gameId04,gameId05,gameId06`
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The game IDs have been added to the stream.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Add game IDs to stream
      tags:
      - Games
  /api/account/playing:
    get:
      description: |
        Get the ongoing games of the current user.
        Real-time and correspondence games are included.
        The most urgent games are listed first.
      operationId: apiAccountPlaying
      parameters:
      - description: Max number of games to fetch
        explode: true
        in: query
        name: nb
        required: false
        schema:
          default: 9
          maximum: 50
          minimum: 1
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  nowPlaying:
                  - gameId: rCRw1AuO
                    fullId: rCRw1AuOvonq
                    color: black
                    fen: r1bqkbnr/pppp2pp/2n1pp2/8/8/3PP3/PPPB1PPP/RN1QKBNR w KQkq
                      - 2 4
                    hasMoved: true
                    isMyTurn: false
                    lastMove: b8c6
                    opponent:
                      id: philippe
                      rating: 1790
                      username: Philippe
                    perf: correspondence
                    rated: false
                    secondsLeft: 1209600
                    source: friend
                    speed: correspondence
                    variant:
                      key: standard
                      name: Standard
          description: The ongoing games of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2: []
      summary: Get my ongoing games
      tags:
      - Games
  /api/stream/game/{id}:
    get:
      description: |
        Stream positions and moves of any ongoing game, in [ndjson](#section/Introduction/Streaming-with-ND-JSON).

        A description of the game is sent as a first message.
        Then a message is sent each time a move is played.
        Finally a description of the game is sent when it finishes, and the stream is closed.

        After move 5, the stream intentionally remains 3 moves behind the game status, as to prevent cheat bots from using this API.

        No more than 8 game streams can be opened at the same time from the same IP address.
      operationId: streamGame
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          example: LuGQwhBb
        style: simple
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/MoveStream'
          description: The stream of the game moves.
      security: []
      summary: Stream moves of a game
      tags:
      - Games
  /api/import:
    post:
      description: |
        Import a game from PGN. See <https://lichess.org/paste>.

        Rate limiting: 200 games per hour for OAuth requests, 100 games per hour for anonymous requests.

        To broadcast ongoing games, consider [pushing to a broadcast instead](#operation/broadcastPush).
      operationId: gameImport
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/gameImport_request'
        description: A single game to import
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  id: R6iLjwz5
                  url: https://lichess.org/R6iLjwz5
          description: The game was successfully imported.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2: []
      summary: Import one game
      tags:
      - Games
  /api/tv/channels:
    get:
      description: |
        Get basic info about the best games being played for each speed and variant,
        but also computer games and bot games.

        See [lichess.org/tv](https://lichess.org/tv).
      operationId: tvChannels
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  Bot:
                    user:
                      id: leelachess
                      name: LeelaChess
                      title: BOT
                    rating: 2660
                    gameId: Zznv9MIl
                  Blitz:
                    user:
                      id: lekkerkortook
                      name: LekkerKortOok
                    rating: 2603
                    gameId: hTJ4v7Mp
                  Racing Kings:
                    user:
                      id: chesslo21
                      name: chesslo21
                    rating: 2123
                    gameId: lgCDl5Of
                  UltraBullet:
                    user:
                      id: farmville
                      name: Farmville
                    rating: 2338
                    gameId: NEY6OQ32
                  Bullet:
                    user:
                      id: nurmibrah
                      name: nurmiBrah
                    rating: 2499
                    gameId: 5LgyE516
                  Classical:
                    user:
                      id: holden_m_j_thomas
                      name: Holden_M_J_Thomas
                    rating: 1806
                    gameId: k3oLby6N
                  Three-check:
                    user:
                      id: pepellou
                      name: pepellou
                      patron: true
                    rating: 1978
                    gameId: Og5RCvmu
                  Antichess:
                    user:
                      id: maria-bakkar
                      name: maria-bakkar
                    rating: 2103
                    gameId: toCr41yx
                  Computer:
                    user:
                      id: oh_my_goat_im_so_bat
                      name: oh_my_goat_Im_so_bat
                    rating: 2314
                    gameId: TkI4qZxu
                  Horde:
                    user:
                      id: habitualchess
                      name: HabitualChess
                    rating: 1803
                    gameId: oMofN63H
                  Rapid:
                    user:
                      id: denpayd
                      name: DenpaYD
                    rating: 2289
                    gameId: IcWOl8ee
                  Atomic:
                    user:
                      id: meetyourdemise
                      name: MeetYourDemise
                    rating: 2210
                    gameId: tvMxtCMN
                  Crazyhouse:
                    user:
                      id: mathace
                      name: mathace
                    rating: 2397
                    gameId: i3gTZlUb
                  Chess960:
                    user:
                      id: voja_7
                      name: voja_7
                    rating: 1782
                    gameId: lrXLcedu
                  King of the Hill:
                    user:
                      id: nadime
                      name: Nadime
                    rating: 1500
                    gameId: DsQn8aEV
                  Top Rated:
                    user:
                      id: lekkerkortook
                      name: LekkerKortOok
                    rating: 2603
                    gameId: hTJ4v7Mp
          description: The list of games being played for each speed and variant.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get current TV games
      tags:
      - TV
  /api/tv/feed:
    get:
      description: |
        Stream positions and moves of the current [TV game](https://lichess.org/tv) in [ndjson](#section/Introduction/Streaming-with-ND-JSON).
        A summary of the game is sent as a first message, and when the featured game changes.

        Try it with `curl https://lichess.org/api/tv/feed`.
      operationId: tvFeed
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                example:
                  t: featured
                  d:
                    id: qVSOPtMc
                    orientation: black
                    players:
                    - color: white
                      user:
                        name: lizen9
                        id: lizen9
                        title: GM
                      rating: 2531
                    - color: black
                      user:
                        name: lizen29
                        title: WGM
                        id: lizen29
                      rating: 2594
                    fen: rnbqk1r1/ppp1ppbp/8/N2p2p1/8/1PQPP3/P1P2PPn/R1B1K1NR
          description: The stream of the current TV game.
      security: []
      summary: Stream current TV game
      tags:
      - TV
  /api/tv/{channel}:
    get:
      description: |
        Get a list of ongoing games for a given TV channel. Similar to [lichess.org/games](https://lichess.org/games).

        Available in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request Accept header.
      operationId: tvChannelGames
      parameters:
      - description: The name of the channel in camel case.
        explode: false
        in: path
        name: channel
        required: true
        schema: {}
        style: simple
      - description: Number of games to fetch.
        explode: true
        in: query
        name: nb
        required: false
        schema:
          default: 10
          maximum: 30
          minimum: 1
        style: form
      - description: Include the PGN moves.
        explode: true
        in: query
        name: moves
        required: false
        schema:
          default: true
        style: form
      - description: "Include the full PGN within the JSON response, in a `pgn` field."
        explode: true
        in: query
        name: pgnInJson
        required: false
        schema:
          default: false
        style: form
      - description: Include the PGN tags.
        explode: true
        in: query
        name: tags
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include clock comments in the PGN moves, when available.

          Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
        explode: true
        in: query
        name: clocks
        required: false
        schema:
          default: false
        style: form
      - description: |
          Include the opening name.

          Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
        explode: true
        in: query
        name: opening
        required: false
        schema:
          default: false
        style: form
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'
          description: The representation of the games.
      security: []
      summary: Get best ongoing games of a TV channel
      tags:
      - TV
  /api/tournament:
    get:
      description: |
        Get recently finished, ongoing, and upcoming tournaments.

        This API is used to display the [Lichess tournament schedule](https://lichess.org/tournament).
      operationId: apiTournament
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournaments'
          description: The list of current tournaments.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get current tournaments
      tags:
      - Arena tournaments
    post:
      description: |
        Create a public or private Arena tournament.

        This endpoint mirrors the form on <https://lichess.org/tournament/new>.

        You can create up to 12 public tournaments per day, or 24 private tournaments.

        A team battle can be created by specifying the `teambBattleByTeam` argument.

        Additional restrictions:
          - clockTime + clockIncrement > 0
          - 15s and 0+1 variant tournaments cannot be rated
          - Clock time in comparison to tournament length must be reasonable: 3 <= (minutes * 60) / (96 * clockTime + 48 * clockIncrement + 15) <= 150
      operationId: apiTournamentPost
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/apiTournamentPost_request'
        description: Parameters of the tournament
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournament'
          description: The Arena tournament has been successfully created.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The creation of the Arena tournament failed.
      security:
      - OAuth2:
        - tournament:write
      summary: Create a new Arena tournament
      tags:
      - Arena tournaments
  /api/tournament/{id}:
    get:
      description: |
        Get detailed info about recently finished, current, or upcoming tournament's duels, player standings, and other info.
      operationId: tournament
      parameters:
      - description: Specify which page of player standings to view.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          example: 1
          maximum: 200
          minimum: 1
        style: form
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournamentVariantIsKey'
          description: The information of the Arena tournament.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get info about an Arena tournament
      tags:
      - Arena tournaments
    parameters:
    - description: The tournament ID.
      explode: false
      in: path
      name: id
      required: true
      schema: {}
      style: simple
    post:
      description: |
        Update an Arena tournament.

        Be mindful not to make important changes to ongoing tournaments.

        Can be used to update a team battle.

        Additional restrictions:
          - clockTime + clockIncrement > 0
          - 15s and 0+1 variant tournaments cannot be rated
          - Clock time in comparison to tournament length must be reasonable: 3 <= (minutes * 60) / (96 * clockTime + 48 * clockIncrement + 15) <= 150
      operationId: apiTournamentUpdate
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/apiTournamentUpdate_request'
        description: Parameters of the tournament
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournament'
          description: The Arena tournament was successfully updated.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The update of the Arena tournament failed.
      security:
      - OAuth2:
        - tournament:write
      summary: Update an Arena tournament
      tags:
      - Arena tournaments
  /api/tournament/{id}/join:
    post:
      description: |
        Join an Arena tournament, possibly with a password and/or a team.
        Also unpauses if you had previously [paused](#operation/apiTournamentWithdraw) the tournament.
      operationId: apiTournamentJoin
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: hL7vMrFQ
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/apiTournamentJoin_request'
        description: You may need these depending on the tournament to join
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The tournament was successfully joined.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Joining the tournament failed.
      security:
      - OAuth2:
        - tournament:write
      summary: Join an Arena tournament
      tags:
      - Arena tournaments
  /api/tournament/{id}/withdraw:
    post:
      description: |
        Leave a future Arena tournament, or take a break on an ongoing Arena tournament.
        It's possible to join again later. Points and streaks are preserved.
      operationId: apiTournamentWithdraw
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: hL7vMrFQ
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The tournament was successfully paused or left.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Pausing/leaving the tournament failed.
      security:
      - OAuth2:
        - tournament:write
      summary: Pause or leave an Arena tournament
      tags:
      - Arena tournaments
  /api/tournament/{id}/terminate:
    post:
      description: |
        Terminate an Arena tournament
      operationId: apiTournamentTerminate
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: hL7vMrFQ
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The tournament was successfully terminated.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Terminating the tournament failed.
      security:
      - OAuth2:
        - tournament:write
      summary: Terminate an Arena tournament
      tags:
      - Arena tournaments
  /api/tournament/team-battle/{id}:
    post:
      description: |
        Set the teams and number of leaders of a team battle.

        To update the other attributes of a team battle, use the [tournament update endpoint](#operation/apiTournamentUpdate).
      operationId: apiTournamentTeamBattlePost
      parameters:
      - description: The tournament ID (8 characters)..
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/apiTournamentTeamBattlePost_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournament'
          description: The team battle tournament was successfully updated.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The update of the team battle tournament failed.
      security:
      - OAuth2:
        - tournament:write
      summary: Update a team battle
      tags:
      - Arena tournaments
  /api/tournament/{id}/games:
    get:
      description: |
        Download games of a tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.

        Games are sorted by reverse chronological order (most recent first).

        The game stream is throttled, depending on who is making the request:
          - Anonymous request: 20 games per second
          - [OAuth2 authenticated](#section/Authentication) request: 30 games per second
      operationId: gamesByTournament
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      - description: Only games of a particular player. Leave empty to fetch games
          of all players.
        explode: true
        in: query
        name: player
        required: false
        schema: {}
        style: form
      - description: Include the PGN moves.
        explode: true
        in: query
        name: moves
        required: false
        schema:
          default: true
        style: form
      - description: "Include the full PGN within the JSON response, in a `pgn` field."
        explode: true
        in: query
        name: pgnInJson
        required: false
        schema:
          default: false
        style: form
      - description: Include the PGN tags.
        explode: true
        in: query
        name: tags
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include clock comments in the PGN moves, when available.

          Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
        explode: true
        in: query
        name: clocks
        required: false
        schema:
          default: false
        style: form
      - description: |
          Include analysis evaluation comments in the PGN, when available.

          Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
        explode: true
        in: query
        name: evals
        required: false
        schema:
          default: false
        style: form
      - description: |
          Include the opening name.

          Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
        explode: true
        in: query
        name: opening
        required: false
        schema:
          default: false
        style: form
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'
          description: The list of games of an Arena tournament.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Export games of an Arena tournament
      tags:
      - Arena tournaments
  /api/tournament/{id}/results:
    get:
      description: |
        Players of an Arena tournament, with their score and performance, sorted by rank (best first).

        **Players are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON)**, i.e. one JSON object per line.

        If called on an ongoing tournament, results can be inconsistent
        due to ranking changes while the players are being streamed.
        Use on finished tournaments for guaranteed consistency.
      operationId: resultsByTournament
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      - description: Max number of players to fetch
        explode: true
        in: query
        name: nb
        required: false
        schema:
          minimum: 1
        style: form
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                example:
                  rank: 4
                  score: 389
                  rating: 2618
                  username: opperwezen
                  title: IM
                  performance: 2423
                  team: coders
          description: The results of the Arena tournament.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get results of an Arena tournament
      tags:
      - Arena tournaments
  /api/tournament/{id}/teams:
    get:
      description: |
        Teams of a team battle tournament, with top players, sorted by rank (best first).
      operationId: teamsByTournament
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  id: CdPg1ey4
                  teams:
                  - rank: 1
                    id: cat-lovers
                    score: 842
                    players:
                    - user:
                        name: lizen69
                        id: lizen69
                      score: 54
                    - user:
                        name: lizen249
                        id: lizen249
          description: "The list of teams of a team battle tournament, with their\
            \ respective top players."
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get team standing of a team battle
      tags:
      - Arena tournaments
  /api/user/{username}/tournament/created:
    get:
      description: |
        Get all tournaments created by a given user.

        Tournaments are sorted by reverse chronological order of start date (last starting first).

        Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      operationId: apiUserNameTournamentCreated
      parameters:
      - description: The user whose created tournaments to fetch
        explode: false
        in: path
        name: username
        required: true
        schema: {}
        style: simple
      - description: "Include tournaments in the given status: \"Created\" (10), \"\
          Started\" (20), \"Finished\" (30)\n\nYou can add this parameter more than\
          \ once to include tournaments in different statuses. \n\nExample: `?status=10&status=20`\n"
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - 10
          - 20
          - 30
        style: form
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/ArenaTournament'
          description: The list of tournaments created by the user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get tournaments created by a user
      tags:
      - Arena tournaments
  /api/swiss/new/{teamId}:
    post:
      description: |
        Create a Swiss tournament for your team.

        This endpoint mirrors the Swiss tournament form from your team pagee.

        You can create up to 12 tournaments per day.

        Additional restrictions:
          - clock.limit + clock.increment > 0
          - 15s and 0+1 variant tournaments cannot be rated
      operationId: apiSwissNew
      parameters:
      - description: ID of the team
        explode: false
        in: path
        name: teamId
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/apiSwissNew_request'
        description: Parameters of the tournament
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwissTournament'
          description: The Swiss tournament was successfully created.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The creation of the Swiss tournament failed.
      security:
      - OAuth2:
        - tournament:write
      summary: Create a new Swiss tournament
      tags:
      - Swiss tournaments
  /api/swiss/{id}:
    get:
      description: |
        Get detailed info about a Swiss tournament.
      operationId: swiss
      parameters:
      - description: The Swiss tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwissTournament'
          description: The information of the Swiss tournament.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get info about a Swiss tournament
      tags:
      - Swiss tournaments
    parameters:
    - description: The Swiss tournament ID.
      explode: false
      in: path
      name: id
      required: true
      schema: {}
      style: simple
  /api/swiss/{id}/edit:
    post:
      description: |
        Update a Swiss tournament.

        Be mindful not to make important changes to ongoing tournaments.

        Additional restrictions:
          - clock.limit + clock.increment > 0
          - 15s and 0+1 variant tournaments cannot be rated
      operationId: apiSwissUpdate
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: hL7vMrFQ
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/apiSwissNew_request'
        description: Parameters of the tournament
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwissTournament'
          description: The Swiss tournament was successfully updated.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Updating the swiss failed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwissUnauthorisedEdit'
          description: This user cannot update this Swiss.
      security:
      - OAuth2:
        - tournament:write
      summary: Update a Swiss tournament.
      tags:
      - Swiss tournaments
  /api/swiss/{id}/join:
    post:
      description: |
        Join a Swiss tournament, possibly with a password.
      operationId: apiSwissJoin
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: hL7vMrFQ
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/apiSwissJoin_request'
        description: You may need these depending on the tournament to join
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The tournament was successfully joined.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Joining the tournament failed.
      security:
      - OAuth2:
        - tournament:write
      summary: Join a Swiss tournament
      tags:
      - Swiss tournaments
  /api/swiss/{id}/withdraw:
    post:
      description: |
        Leave a future Swiss tournament, or take a break on an ongoing Swiss tournament.
        It's possible to join again later. Points are preserved.
      operationId: apiSwissWithdraw
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: hL7vMrFQ
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The tournament was successfully paused or left.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - tournament:write
      summary: Pause or leave a swiss tournament
      tags:
      - Swiss tournaments
  /api/swiss/{id}/terminate:
    post:
      description: |
        Terminate a Swiss tournament
      operationId: apiSwissTerminate
      parameters:
      - description: The Swiss tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: W5FrxusN
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The Swiss tournament was successfully terminated.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Terminating the Swiss tournament failed.
      security:
      - OAuth2:
        - tournament:write
      summary: Terminate a Swiss tournament
      tags:
      - Swiss tournaments
  /swiss/{id}.trf:
    get:
      description: |
        Download a tournament in the Tournament Report File format, the FIDE standard.

        Documentation: <https://www.fide.com/FIDE/handbook/C04Annex2_TRF16.pdf>

        Example: <https://lichess.org/swiss/j8rtJ5GL.trf>
      operationId: swissTrf
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema: {}
          description: The TRF representation of a Swiss tournament.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Export TRF of a Swiss tournament
      tags:
      - Swiss tournaments
  /api/swiss/{id}/games:
    get:
      description: |
        Download games of a swiss tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.

        Games are sorted by reverse chronological order (last round first).

        The game stream is throttled, depending on who is making the request:
          - Anonymous request: 20 games per second
          - [OAuth2 authenticated](#section/Authentication) request: 30 games per second
      operationId: gamesBySwiss
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      - description: Include the PGN moves.
        explode: true
        in: query
        name: moves
        required: false
        schema:
          default: true
        style: form
      - description: "Include the full PGN within the JSON response, in a `pgn` field."
        explode: true
        in: query
        name: pgnInJson
        required: false
        schema:
          default: false
        style: form
      - description: Include the PGN tags.
        explode: true
        in: query
        name: tags
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include clock comments in the PGN moves, when available.

          Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
        explode: true
        in: query
        name: clocks
        required: false
        schema:
          default: false
        style: form
      - description: |
          Include analysis evaluation comments in the PGN, when available.

          Example: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`
        explode: true
        in: query
        name: evals
        required: false
        schema:
          default: false
        style: form
      - description: |
          Include the opening name.

          Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
        explode: true
        in: query
        name: opening
        required: false
        schema:
          default: false
        style: form
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/GamePgn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'
          description: The list of games of a Swiss tournament.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Export games of a Swiss tournament
      tags:
      - Swiss tournaments
  /api/swiss/{id}/results:
    get:
      description: |
        Players of a swiss tournament, with their score and performance, sorted by rank (best first).

        Players are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).

        If called on an ongoing tournament, results can be inconsistent
        due to ranking changes while the players are being streamed.
        Use on finished tournaments for guaranteed consistency.
      operationId: resultsBySwiss
      parameters:
      - description: The tournament ID.
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      - description: Max number of players to fetch
        explode: true
        in: query
        name: nb
        required: false
        schema:
          minimum: 1
        style: form
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                example:
                  rank: 4
                  points: 8.5
                  tieBreak: 77
                  rating: 2618
                  username: opperwezen
                  title: IM
                  performance: 2423
          description: The results of a Swiss tournament.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get results of a swiss tournament
      tags:
      - Swiss tournaments
  /api/team/{teamId}/swiss:
    get:
      description: |
        Get all swiss tournaments of a team.

        Tournaments are sorted by reverse chronological order of start date (last starting first).

        Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      operationId: apiTeamSwiss
      parameters:
      - example: coders
        explode: false
        in: path
        name: teamId
        required: true
        schema: {}
        style: simple
      - description: How many tournaments to download.
        explode: true
        in: query
        name: max
        required: false
        schema:
          default: 100
          minimum: 1
        style: form
      responses:
        "200":
          content:
            application/nd-json:
              schema:
                $ref: '#/components/schemas/SwissTournament'
          description: The list of Swiss tournaments of a team.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get team swiss tournaments
      tags:
      - Teams
      - Swiss tournaments
  /study/{studyId}/{chapterId}.pgn:
    get:
      description: |
        Download one study chapter in PGN format.
      operationId: studyChapterPgn
      parameters:
      - description: The study ID (8 characters).
        explode: false
        in: path
        name: studyId
        required: true
        schema: {}
        style: simple
      - description: The chapter ID (8 characters).
        explode: false
        in: path
        name: chapterId
        required: true
        schema: {}
        style: simple
      - description: |
          Include clock comments in the PGN moves, when available.

          Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
        explode: true
        in: query
        name: clocks
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include analysis and annotator comments in the PGN moves, when available.

          Example: `12. Bxf6 { [%eval 0.23] } a3 { White is in a pickle. }`
        explode: true
        in: query
        name: comments
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include non-mainline moves, when available.

          Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... Bd6) 5. Nd2`
        explode: true
        in: query
        name: variations
        required: false
        schema:
          default: true
        style: form
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/StudyPgn'
          description: The chapter of the study.
      security: []
      summary: Export one study chapter
      tags:
      - Studies
  /api/study/{studyId}.pgn:
    get:
      description: |
        Download all chapters of a study in PGN format.
      operationId: studyAllChaptersPgn
      parameters:
      - description: The study ID (8 characters).
        explode: false
        in: path
        name: studyId
        required: true
        schema: {}
        style: simple
      - description: |
          Include clock comments in the PGN moves, when available.

          Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
        explode: true
        in: query
        name: clocks
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include analysis and annotator comments in the PGN moves, when available.

          Example: `12. Bxf6 { [%eval 0.23] } a3 { White is in a pickle. }`
        explode: true
        in: query
        name: comments
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include non-mainline moves, when available.

          Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... Bd6) 5. Nd2`
        explode: true
        in: query
        name: variations
        required: false
        schema:
          default: true
        style: form
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/StudyPgn'
          description: The PGN representation of the study.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Export all chapters
      tags:
      - Studies
  /study/by/{username}/export.pgn:
    get:
      description: |
        Download all chapters of all studies of a user in PGN format.

        If authenticated, then all public, unlisted, and private studies are included.

        If not, only public, listed studies are included.
      operationId: studyExportAllPgn
      parameters:
      - description: The user whose studies we export
        explode: false
        in: path
        name: username
        required: true
        schema: {}
        style: simple
      - description: |
          Include clock comments in the PGN moves, when available.

          Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
        explode: true
        in: query
        name: clocks
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include analysis and annotator comments in the PGN moves, when available.

          Example: `12. Bxf6 { [%eval 0.23] } a3 { White is in a pickle. }`
        explode: true
        in: query
        name: comments
        required: false
        schema:
          default: true
        style: form
      - description: |
          Include non-mainline moves, when available.

          Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... Bd6) 5. Nd2`
        explode: true
        in: query
        name: variations
        required: false
        schema:
          default: true
        style: form
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/StudyPgn'
          description: The studies of the user.
      security:
      - OAuth2:
        - study:read
      summary: Export all studies of a user
      tags:
      - Studies
  /api/broadcast:
    get:
      description: |
        Get all incoming, ongoing, and finished official broadcasts.
        The broadcasts are sorted by start date, most recent first.

        Broadcasts are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      operationId: broadcastIndex
      parameters:
      - description: Max number of broadcasts to fetch
        explode: true
        in: query
        name: nb
        required: false
        schema:
          default: 20
          minimum: 1
        style: form
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                items:
                  $ref: '#/components/schemas/BroadcastTour'
                type: array
          description: The list of official broadcasts.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      summary: Get official broadcasts
      tags:
      - Broadcasts
  /broadcast/new:
    post:
      description: |
        Create a new broadcast tournament to relay external games.
        This endpoint accepts the same form data as the [web form](https://lichess.org/broadcast/new).
      operationId: broadcastTourCreate
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/broadcastTourCreate_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastTour'
          description: The broadcast tournament was successfully created.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The creation of the broadcast tournament failed.
      security:
      - OAuth2:
        - study:write
      summary: Create a broadcast tournament
      tags:
      - Broadcasts
  /broadcast/{slug}/{broadcastTournamentId}:
    get:
      description: |
        Get information about a broadcast tournament.
      operationId: broadcastTourGet
      parameters:
      - description: "The broadcast tournament slug. Only used for SEO, the slug can\
          \ be safely replaced by `-`. Only the `broadcastTournamentId` is actually\
          \ used."
        explode: false
        in: path
        name: slug
        required: true
        schema: {}
        style: simple
      - description: The broadcast tournament ID (8 characters).
        explode: false
        in: path
        name: broadcastTournamentId
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BroadcastTour'
                type: array
          description: The information about the broadcast tournament.
      security:
      - OAuth2:
        - study:read
      summary: Get your broadcast tournament
      tags:
      - Broadcasts
  /broadcast/{broadcastTournamentId}/edit:
    post:
      description: |
        Update information about a broadcast tournament that you created.
        This endpoint accepts the same form data as the web form.
        All fields must be populated with data. Missing fields will override the broadcast with empty data.
      operationId: broadcastTourUpdate
      parameters:
      - description: The broadcast ID (8 characters).
        explode: false
        in: path
        name: broadcastTournamentId
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/broadcastTourUpdate_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The broadcast tournament was successfully edited.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The edition of the broadcast tournament failed.
      security:
      - OAuth2:
        - study:write
      summary: Update your broadcast tournament
      tags:
      - Broadcasts
  /broadcast/{broadcastTournamentId}/new:
    post:
      description: |
        Create a new broadcast round to relay external games.
        This endpoint accepts the same form data as the web form.
      operationId: broadcastRoundCreate
      parameters:
      - description: The broadcast tournament ID (8 characters).
        explode: false
        in: path
        name: broadcastTournamentId
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/broadcastRoundCreate_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastRound'
          description: The broadcast round was successfully created.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The creation of the broadcast failed.
      security:
      - OAuth2:
        - study:write
      summary: Create a broadcast round
      tags:
      - Broadcasts
  /broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}:
    get:
      description: |
        Get information about a broadcast round.
      operationId: broadcastRoundGet
      parameters:
      - description: "The broadcast tournament slug. Only used for SEO, the slug can\
          \ be safely replaced by `-`. Only the `broadcastRoundId` is actually used."
        explode: false
        in: path
        name: broadcastTournamentSlug
        required: true
        schema: {}
        style: simple
      - description: "The broadcast round slug. Only used for SEO, the slug can be\
          \ safely replaced by `-`. Only the `broadcastRoundId` is actually used."
        explode: false
        in: path
        name: broadcastRoundSlug
        required: true
        schema: {}
        style: simple
      - description: The broadcast Round ID (8 characters).
        explode: false
        in: path
        name: broadcastRoundId
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BroadcastRound'
                type: array
          description: The information about the broadcast round.
      security:
      - OAuth2:
        - study:read
      summary: Get your broadcast round
      tags:
      - Broadcasts
  /broadcast/round/{broadcastRoundId}/edit:
    post:
      description: |
        Update information about a broadcast round that you created.
        This endpoint accepts the same form data as the web form.
        All fields must be populated with data. Missing fields will override the broadcast with empty data.
        For instance, if you omit `startDate`, then any pre-existing start date will be removed.
      operationId: broadcastRoundUpdate
      parameters:
      - description: The broadcast round ID (8 characters).
        explode: false
        in: path
        name: broadcastRoundId
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/broadcastRoundUpdate_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The broadcast round was successfully edited.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The edition of the broadcast tournament failed.
      security:
      - OAuth2:
        - study:write
      summary: Update your broadcast round
      tags:
      - Broadcasts
  /broadcast/round/{broadcastRoundId}/push:
    post:
      description: |
        Update your broadcast with new PGN.
        Only for broadcast without a source URL.
      operationId: broadcastPush
      parameters:
      - description: The broadcast round ID (8 characters).
        explode: false
        in: path
        name: broadcastRoundId
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          text/plain:
            schema: {}
        description: "The PGN. It can contain up to 64 games, separated by a double\
          \ new line."
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Ok'
                type: array
          description: The broadcast was successfully updated.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - study:write
      summary: Push PGN to your broadcast round
      tags:
      - Broadcasts
  /api/stream/broadcast/round/{broadcastRoundId}.pgn:
    get:
      description: |
        This streaming endpoint first sends all games of a broadcast tournament in PGN format.

        Then, it waits for new moves to be played. As soon as it happens, the entire PGN of the game is sent to the stream.

        The stream will also send PGNs when games are added to the tournament.

        This is the best way to get updates about an ongoing tournament. Streaming means no polling,
        and no pollings means no latency, and minimum impact on the server.
      operationId: broadcastStreamRoundPgn
      parameters:
      - description: The broadcast round ID (8 characters).
        explode: false
        in: path
        name: broadcastRoundId
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/StudyPgn'
          description: "The PGN representation of the tournament games, then the PGNs\
            \ of games as they are updated."
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Stream an ongoing broadcast tournament as PGN
      tags:
      - Broadcasts
  /api/broadcast/round/{broadcastRoundId}.pgn:
    get:
      description: |
        Download all games of a single round of a broadcast tournament in PGN format.

        You *could* poll this endpoint to get updates about a tournament, but it would be slow,
        and very inneficient.

        Instead, consider [streaming the tournament](#operation/broadcastStreamRoundPgn) to get
        a new PGN every time a game is updated, in real-time.
      operationId: broadcastRoundPgn
      parameters:
      - description: The round ID (8 characters).
        explode: false
        in: path
        name: broadcastRoundId
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/StudyPgn'
          description: The PGN representation of the round.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Export one round as PGN
      tags:
      - Broadcasts
  /api/broadcast/{broadcastTournamentId}.pgn:
    get:
      description: |
        Download all games of all rounds of a broadcast in PGN format.

        You may want to [download only the games of a single round](#operation/broadcastRoundPgn) instead.
      operationId: broadcastAllRoundsPgn
      parameters:
      - description: The broadcast tournament ID (8 characters).
        explode: false
        in: path
        name: broadcastTournamentId
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/StudyPgn'
          description: The PGN representation of the broadcast.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Export all rounds as PGN
      tags:
      - Broadcasts
  /api/simul:
    get:
      description: |
        Get recently finished, ongoing, and upcoming simuls.
      operationId: apiSimul
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Simul'
                type: array
          description: The list of simuls.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get current simuls
      tags:
      - Simuls
  /api/team/{teamId}:
    get:
      description: Infos about a team
      operationId: teamShow
      parameters:
      - explode: false
        in: path
        name: teamId
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: The information about the team.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get a single team
      tags:
      - Teams
  /api/team/all:
    get:
      description: |
        Paginator of the most popular teams.
      operationId: teamAll
      parameters:
      - explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          example: 1
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamAll_200_response'
          description: A paginated list of the most popular teams.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get popular teams
      tags:
      - Teams
  /api/team/of/{username}:
    get:
      description: |
        All the teams a player is a member of.
      operationId: teamOfUsername
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          example: thibault
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Team'
          description: The list of teams the user is a member of.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Teams of a player
      tags:
      - Teams
  /api/team/search:
    get:
      description: |
        Paginator of team search results for a keyword.
      operationId: teamSearch
      parameters:
      - explode: true
        in: query
        name: text
        required: false
        schema:
          example: coders
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          example: 1
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Team'
          description: The paginated list of teams.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Search teams
      tags:
      - Teams
  /api/team/{teamId}/users:
    get:
      description: |
        Members are sorted by reverse chronological order of joining the team (most recent first).
        OAuth only required if the list of members is private.

        Members are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      operationId: teamIdUsers
      parameters:
      - explode: false
        in: path
        name: teamId
        required: true
        schema:
          example: coders
        style: simple
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/UserExtended'
          description: The list of users in the team.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - team:read
      summary: Get members of a team
      tags:
      - Users
      - Teams
  /api/team/{teamId}/arena:
    get:
      description: |
        Get all Arena tournaments relevant to a team.

        Tournaments are sorted by reverse chronological order of start date (last starting first).

        Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      operationId: apiTeamArena
      parameters:
      - description: ID of the team
        explode: false
        in: path
        name: teamId
        required: true
        schema: {}
        style: simple
      - description: How many tournaments to download.
        explode: true
        in: query
        name: max
        required: false
        schema:
          default: 100
          minimum: 1
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArenaTournament'
          description: The list of Arena tournaments of a team.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get team Arena tournaments
      tags:
      - Teams
      - Arena tournaments
  /team/{teamId}/join:
    post:
      description: |
        Join a team.
        If the team requires a password but the `password` field is incorrect,
        then the call fails with `403 Forbidden`.
        Similarly, if the team join policy requires a confirmation but the
        `message` parameter is not given, then the call fails with
        `403 Forbidden`.
      operationId: teamIdJoin
      parameters:
      - explode: false
        in: path
        name: teamId
        required: true
        schema:
          example: coders
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/teamIdJoin_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The request to join a team was successfully sent.
      security:
      - OAuth2:
        - team:write
      summary: Join a team
      tags:
      - Teams
  /team/{teamId}/quit:
    post:
      description: |
        Leave a team.
        - <https://lichess.org/team>
      operationId: teamIdQuit
      parameters:
      - explode: false
        in: path
        name: teamId
        required: true
        schema:
          example: coders
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The logged in user has successfully left the team.
      security:
      - OAuth2:
        - team:write
      summary: Leave a team
      tags:
      - Teams
  /api/team/{teamId}/requests:
    get:
      description: Get pending join requests of your team
      operationId: teamRequests
      parameters:
      - explode: false
        in: path
        name: teamId
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - request:
                    date: 1644232474472
                    message: "Hello, I would like to join the team!"
                    teamId: coders
                    userId: neio
                  user:
                    createdAt: 1338509698620
                    id: neio
                    perfs:
                      blitz:
                        games: 70
                        prog: 81
                        prov: true
                        rating: 1729
                        rd: 124
                      chess960:
                        games: 2
                        prog: 0
                        prov: true
                        rating: 1528
                        rd: 266
                    playTime:
                      total: 152902
                      tv: 20800
                    profile:
                      bio: yuwnt uyn
                      country: AL
                      firstName: "wyutn w[fuyt"
                      lastName: ywut wyufth
                    seenAt: 1644232201429
                    title: NM
                    username: Neio
                items:
                  $ref: '#/components/schemas/TeamRequestWithUser'
                type: array
          description: The list of pending join requests on your team
      security:
      - OAuth2:
        - team:read
      summary: Get join requests
      tags:
      - Teams
  /api/team/{teamId}/request/{userId}/accept:
    post:
      description: Accept someone's request to join your team
      operationId: teamRequestAccept
      parameters:
      - explode: false
        in: path
        name: teamId
        required: true
        schema:
          example: coders
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          example: neio
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The member has been added to the team.
      security:
      - OAuth2:
        - team:lead
      summary: Accept join request
      tags:
      - Teams
  /api/team/{teamId}/request/{userId}/decline:
    post:
      description: Decline someone's request to join your team
      operationId: teamRequestDecline
      parameters:
      - explode: false
        in: path
        name: teamId
        required: true
        schema:
          example: coders
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          example: neio
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The join request has been declined and is no longer pending.
      security:
      - OAuth2:
        - team:lead
      summary: Decline join request
      tags:
      - Teams
  /team/{teamId}/kick/{userId}:
    post:
      description: |
        Kick a member out of one of your teams.
        - <https://lichess.org/team>
      operationId: teamIdKickUserId
      parameters:
      - explode: false
        in: path
        name: teamId
        required: true
        schema:
          example: coders
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          example: neio
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The member has been kicked from the team.
      security:
      - OAuth2:
        - team:lead
      summary: Kick a user from your team
      tags:
      - Teams
  /team/{teamId}/pm-all:
    post:
      description: |
        Send a private message to all members of a team.
        You must own the team.
      operationId: teamIdPmAll
      parameters:
      - explode: false
        in: path
        name: teamId
        required: true
        schema:
          example: coders
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/teamIdPmAll_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The message has successfully been sent to all team members.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The sending of message to all team members has failed.
      security:
      - OAuth2:
        - team:lead
      summary: Message all members
      tags:
      - Teams
  /api/streamer/live:
    get:
      description: |
        Get basic info about currently streaming users.

        This API is very fast and cheap on lichess side.
        So you can call it quite often (like once every 5 seconds).
      operationId: streamerLive
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - id: chess-network
                  name: Chess-Network
                  title: NM
                  patron: true
                  stream:
                    service: twitch
                    status: Tuesday night 🐴 chess | lichess.org
                    lang: en
                  streamer:
                    name: ChessNetwork
                    headline: "Chess with commentary, tournament competition, viewer\
                      \ interaction, and more."
                    description: "I'm a self-taught National Master in chess from\
                      \ Pennsylvania, USA who was introduced to the game by my father\
                      \ in 1988 at age 8. I've been playing since, enjoy teaching,\
                      \ and have been a broadcaster of all things chess since 2011.\
                      \ It's my hope your experience with this stream is both fun\
                      \ and educational. \U0001f60e -Jerry"
                    twitch: https://twitch.tv/chessnetwork
                    youTube: https://www.youtube.com/channel/UCCDOQrpqLqKVcTCKzqarxLg/live
                items:
                  $ref: '#/components/schemas/LightUser'
                type: array
          description: The list of live streamers and their respective information.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get live streamers
      tags:
      - Users
  /api/crosstable/{user1}/{user2}:
    get:
      description: |
        Get total number of games, and current score, of any two users.

        If the `matchup` flag is provided, and the users are currently playing, also gets the current match game number and scores.
      operationId: apiCrosstable
      parameters:
      - explode: false
        in: path
        name: user1
        required: true
        schema: {}
        style: simple
      - explode: false
        in: path
        name: user2
        required: true
        schema: {}
        style: simple
      - description: "Whether to get the current match data, if any"
        explode: true
        in: query
        name: matchup
        required: false
        schema: {}
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crosstable'
          description: The crosstable of the two users.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get crosstable
      tags:
      - Users
  /api/rel/following:
    get:
      description: |
        Users are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      operationId: apiUserFollowing
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/UserExtended'
          description: The list of users followed by a user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - follow:read
      summary: Get users followed by the logged in user
      tags:
      - Relations
  /api/rel/follow/{username}:
    post:
      description: |
        Follow a player, adding them to your list of Lichess friends.
      operationId: followUser
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          example: thibault
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The player was successfully added.
      security:
      - OAuth2:
        - follow:write
      summary: Follow a player
      tags:
      - Relations
  /api/rel/unfollow/{username}:
    post:
      description: |
        Unfollow a player, removing them from your list of Lichess friends.
      operationId: unfollowUser
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          example: thibault
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The player was successfully removed.
      security:
      - OAuth2:
        - follow:write
      summary: Unfollow a player
      tags:
      - Relations
  /api/stream/event:
    get:
      description: "\n  Stream the events reaching a lichess user in real time as\
        \ [ndjson](#section/Introduction/Streaming-with-ND-JSON).\n\n  Each line is\
        \ a JSON object containing a `type` field. Possible values are:\n  - `gameStart`\
        \ Start of a game\n  - `gameFinish` Completion of a game\n  - `challenge`\
        \ A player sends you a challenge or you challenge someone\n  - `challengeCanceled`\
        \ A player cancels their challenge to you\n  - `challengeDeclined` The opponent\
        \ declines your challenge\n \n  When the stream opens, all current challenges\
        \ and games are sent."
      operationId: apiStreamEvent
      responses:
        "200":
          content:
            application/x-ndjson:
              examples:
                challenge:
                  $ref: '#/components/examples/challenge'
                challengeCanceled:
                  $ref: '#/components/examples/challengeCanceled'
                challengeDeclined:
                  $ref: '#/components/examples/challengeDeclined'
                gameStart:
                  $ref: '#/components/examples/gameStart'
                gameFinish:
                  $ref: '#/components/examples/gameFinish'
              schema:
                oneOf:
                - $ref: '#/components/schemas/GameStartEvent'
                - $ref: '#/components/schemas/GameFinishEvent'
                - $ref: '#/components/schemas/ChallengeEvent'
                - $ref: '#/components/schemas/ChallengeCanceledEvent'
                - $ref: '#/components/schemas/ChallengeDeclinedEvent'
          description: The stream of events reaching the logged in user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - challenge:read
        - bot:play
        - board:play
      summary: Stream incoming events
      tags:
      - Board
      - Bot
  /api/board/seek:
    post:
      description: |2-

          Create a public seek, to start a game with a random player.

          ### Real-time seek

          Specify the `time` and `increment` clock values.  The response is streamed but doesn't contain any information.

          **Keep the connection open to keep the seek active**.

          If the client closes the connection, the seek is canceled. This way, if the client terminates, the user won't be paired in a game they wouldn't play.
          When the seek is accepted, or expires, the server closes the connection.

          **Make sure to also have an [Event stream](#operation/apiStreamEvent) open**, to be notified when a game starts.
          We recommend opening the [Event stream](#operation/apiStreamEvent) first, then the seek stream. This way,
          you won't miss the game event if the seek is accepted immediately.

          ### Correspondence seek

          Specify the `days` per turn value.  The response is not streamed, it immediately completes with the seek ID. The seek remains active on the server until it is joined by someone.
      operationId: apiBoardSeek
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/apiBoardSeek_request'
        description: Parameters of the seek
        required: true
      responses:
        "200":
          content:
            text/plain:
              example: ""
          description: The seek was successfully created.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The creation of the seek failed.
      security:
      - OAuth2:
        - board:play
      summary: Create a seek
      tags:
      - Board
  /api/board/game/stream/{gameId}:
    get:
      description: " Stream the state of a game being played with the Board API, as\
        \ [ndjson](#section/Introduction/Streaming-with-ND-JSON).\n\nUse this endpoint\
        \ to get updates about the game in real-time, with a single request.\n\nEach\
        \ line is a JSON object containing a `type` field. Possible values are:\n\
        \  - `gameFull` Full game data. All values are immutable, except for the `state`\
        \ field.\n  - `gameState` Current state of the game. Immutable values not\
        \ included. Sent when a move is played, a draw is offered, or when the game\
        \ ends.\n  - `chatLine` Chat message sent by a user in the `room` \"player\"\
        \ or \"spectator\".\n\n  - `opponentGone` Whether the opponent has left the\
        \ game, and how long before you can claim a win or draw.\n\n \nThe first line\
        \ is always of type `gameFull`.\n\n \nThe server closes the stream when the\
        \ game ends, or if the game has already ended."
      operationId: boardGameStream
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/x-ndjson:
              examples:
                gameFull:
                  $ref: '#/components/examples/gameFull'
                gameState:
                  $ref: '#/components/examples/gameState'
                chatLine:
                  $ref: '#/components/examples/chatLine'
                chatLineSpectator:
                  $ref: '#/components/examples/chatLineSpectator'
                opponentGoneTrue:
                  $ref: '#/components/examples/opponentGoneTrue'
                opponentGoneFalse:
                  $ref: '#/components/examples/opponentGoneFalse'
                gameStateResign:
                  $ref: '#/components/examples/gameStateResign'
              schema:
                oneOf:
                - $ref: '#/components/schemas/GameFullEvent'
                - $ref: '#/components/schemas/GameStateEvent'
                - $ref: '#/components/schemas/ChatLineEvent'
                - $ref: '#/components/schemas/OpponentGone'
          description: The stream of the game.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: The game was not found.
      security:
      - OAuth2:
        - board:play
      summary: Stream Board game state
      tags:
      - Board
  /api/board/game/{gameId}/move/{move}:
    post:
      description: |
        Make a move in a game being played with the Board API.

        The move can also contain a draw offer/agreement.
      operationId: boardGameMove
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      - description: "The move to play, in UCI format"
        explode: false
        in: path
        name: move
        required: true
        schema:
          example: e2e4
        style: simple
      - description: Whether to offer (or agree to) a draw
        explode: true
        in: query
        name: offeringDraw
        required: false
        schema: {}
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The move was successfully made.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The move failed.
      security:
      - OAuth2:
        - board:play
      summary: Make a Board move
      tags:
      - Board
  /api/board/game/{gameId}/chat:
    get:
      description: |
        Get the messages posted in the game chat
      operationId: boardGameChatGet
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameChat'
          description: The messages posted in the chat.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - board:play
      summary: Fetch the game chat
      tags:
      - Board
    parameters:
    - explode: false
      in: path
      name: gameId
      required: true
      schema:
        example: 5IrD6Gzz
      style: simple
    post:
      description: |
        Post a message to the player or spectator chat, in a game being played with the Board API.
      operationId: boardGameChatPost
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/boardGameChatPost_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The message was successfully posted in the chat.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The posting of the message in the chat failed.
      security:
      - OAuth2:
        - board:play
      summary: Write in the chat
      tags:
      - Board
  /api/board/game/{gameId}/abort:
    post:
      description: |
        Abort a game being played with the Board API.
      operationId: boardGameAbort
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The game successfully aborted.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The abortion of the game failed.
      security:
      - OAuth2:
        - board:play
      summary: Abort a game
      tags:
      - Board
  /api/board/game/{gameId}/resign:
    post:
      description: |
        Resign a game being played with the Board API.
      operationId: boardGameResign
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The game was successfully resigned.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The resigning from the game failed.
      security:
      - OAuth2:
        - board:play
      summary: Resign a game
      tags:
      - Board
  /api/board/game/{gameId}/draw/{accept}:
    post:
      description: |
        Create/accept/decline draw offers.
        - `yes`: Offer a draw, or accept the opponent's draw offer.
        - `no`: Decline a draw offer from the opponent.
      operationId: boardGameDraw
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      - explode: false
        in: path
        name: accept
        required: true
        schema:
          anyOf:
          - {}
          - {}
          example: "yes"
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The draw offer was successfully sent.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The draw offering failed.
      security:
      - OAuth2:
        - board:play
      summary: Handle draw offers
      tags:
      - Board
  /api/board/game/{gameId}/takeback/{accept}:
    post:
      description: |
        Create/accept/decline takebacks.
        - `yes`: Propose a takeback, or accept the opponent's takeback offer.
        - `no`: Decline a takeback offer from the opponent.
      operationId: boardGameTakeback
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      - explode: false
        in: path
        name: accept
        required: true
        schema:
          anyOf:
          - {}
          - {}
          example: "yes"
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The takeback offer was successfully sent.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The takeback offering failed.
      security:
      - OAuth2:
        - board:play
      summary: Handle takeback offers
      tags:
      - Board
  /api/board/game/{gameId}/claim-victory:
    post:
      description: |
        Claim victory when the opponent has left the game for a while.
      operationId: boardGameClaimVictory
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The victory was successfully claimed.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The victory claim has failed.
      security:
      - OAuth2:
        - board:play
      summary: Claim victory of a game
      tags:
      - Board
  /api/board/game/{gameId}/berserk:
    post:
      description: |
        Go berserk on an arena tournament game. Halves the clock time, grants an extra point upon winning.
        Only available in arena tournaments that allow berserk, and before each player has made a move.
      operationId: boardGameBerserk
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The player successfully whent berserk.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The berserk has failed.
      security:
      - OAuth2:
        - board:play
      summary: Berserk a tournament game
      tags:
      - Board
  /api/bot/online:
    get:
      description: "Stream the [online bot users](https://lichess.org/player/bots),\
        \ as [ndjson](#section/Introduction/Streaming-with-ND-JSON). Throttled to\
        \ 50 bot users per second."
      operationId: apiBotOnline
      parameters:
      - description: How many bot users to fetch
        explode: true
        in: query
        name: nb
        required: false
        schema:
          example: 20
          minimum: 1
        style: form
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/User'
          description: The list of online bot users
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get online bots
      tags:
      - Bot
  /api/bot/account/upgrade:
    post:
      description: |
        Upgrade a lichess player account into a Bot account. Only Bot accounts can use the Bot API.

        The account **cannot have played any game** before becoming a Bot account. The upgrade is **irreversible**. The account will only be able to play as a Bot.

        To upgrade an account to Bot, use the [official lichess-bot client](https://github.com/ShailChoksi/lichess-bot), or follow these steps:
        - Create an [API access token](https://lichess.org/account/oauth/token/create?scopes[]=bot:play) with "Play bot moves" permission.
        - `curl -d '' https://lichess.org/api/bot/account/upgrade -H "Authorization: Bearer <yourTokenHere>"`

        To know if an account has already been upgraded, use the [Get my profile API](#operation/accountMe):
        the `title` field should be set to `BOT`.
      operationId: botAccountUpgrade
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The bot account was successfully upgraded.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The upgrade of the bot account failed.
      security:
      - OAuth2:
        - bot:play
      summary: Upgrade to Bot account
      tags:
      - Bot
  /api/bot/game/stream/{gameId}:
    get:
      description: " Stream the state of a game being played with the Bot API, as\
        \ [ndjson](#section/Introduction/Streaming-with-ND-JSON).\n\nUse this endpoint\
        \ to get updates about the game in real-time, with a single request.\n\nEach\
        \ line is a JSON object containing a `type` field. Possible values are:\n\
        \  - `gameFull` Full game data. All values are immutable, except for the `state`\
        \ field.\n  - `gameState` Current state of the game. Immutable values not\
        \ included.\n  - `chatLine` Chat message sent by a user (or the bot itself)\
        \ in the `room` \"player\" or \"spectator\".\n\n  - `opponentGone` Whether\
        \ the opponent has left the game, and how long before you can claim a win\
        \ or draw.\n\n \nThe first line is always of type `gameFull`."
      operationId: botGameStream
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/x-ndjson:
              examples:
                gameFull:
                  $ref: '#/components/examples/gameFull'
                gameState:
                  $ref: '#/components/examples/gameState'
                chatLine:
                  $ref: '#/components/examples/chatLine'
                chatLineSpectator:
                  $ref: '#/components/examples/chatLineSpectator'
                opponentGoneTrue:
                  $ref: '#/components/examples/opponentGoneTrue'
                opponentGoneFalse:
                  $ref: '#/components/examples/opponentGoneFalse'
                gameStateResign:
                  $ref: '#/components/examples/gameStateResign'
              schema:
                oneOf:
                - $ref: '#/components/schemas/GameFullEvent'
                - $ref: '#/components/schemas/GameStateEvent'
                - $ref: '#/components/schemas/ChatLineEvent'
                - $ref: '#/components/schemas/OpponentGone'
          description: The stream of the bot game.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: The bot game was not found.
      security:
      - OAuth2:
        - bot:play
      summary: Stream Bot game state
      tags:
      - Bot
  /api/bot/game/{gameId}/move/{move}:
    post:
      description: |
        Make a move in a game being played with the Bot API.

        The move can also contain a draw offer/agreement.
      operationId: botGameMove
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      - description: "The move to play, in UCI format"
        explode: false
        in: path
        name: move
        required: true
        schema:
          example: e2e4
        style: simple
      - description: Whether to offer (or agree to) a draw
        explode: true
        in: query
        name: offeringDraw
        required: false
        schema: {}
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The bot move was successfully made.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The bot move failed.
      security:
      - OAuth2:
        - bot:play
      summary: Make a Bot move
      tags:
      - Bot
  /api/bot/game/{gameId}/chat:
    get:
      description: |
        Get the messages posted in the game chat
      operationId: botGameChatGet
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameChat'
          description: The messages posted in the chat.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - bot:play
      summary: Fetch the game chat
      tags:
      - Bot
    post:
      description: |
        Post a message to the player or spectator chat, in a game being played with the Bot API.
      operationId: botGameChat
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/boardGameChatPost_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The message was successfully posted in chat.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The posting of the  message in chat failed.
      security:
      - OAuth2:
        - bot:play
      summary: Write in the chat
      tags:
      - Bot
  /api/bot/game/{gameId}/abort:
    post:
      description: |
        Abort a game being played with the Bot API.
      operationId: botGameAbort
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The game was successfully aborted.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The abortion of the game failed.
      security:
      - OAuth2:
        - bot:play
      summary: Abort a game
      tags:
      - Bot
  /api/bot/game/{gameId}/resign:
    post:
      description: |
        Resign a game being played with the Bot API.
      operationId: botGameResign
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The game was successfully resigned from.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Resigning the game failed.
      security:
      - OAuth2:
        - bot:play
      summary: Resign a game
      tags:
      - Bot
  /api/challenge:
    get:
      description: |
        Get a list of challenges created by or targeted at you.
      operationId: challengeList
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/challengeList_200_response'
          description: The list of challenges created by or targeted at the logged
            in user.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - challenge:read
      summary: List your challenges
      tags:
      - Challenges
  /api/challenge/{username}:
    post:
      description: |
        Challenge someone to play. The targeted player can choose to accept or decline.

        If the challenge is accepted, you will be notified on the [event stream](#operation/apiStreamEvent)
        that a new game has started. The game ID will be the same as the challenge ID.

        If you also have an OAuth token with `challenge:write` scope for the receiving user,
        you can make them accept the challenge immediately by setting the `acceptByToken` field.

        Challenges for realtime games (not correspondence) expire after 20s if not accepted.
        To prevent that, use the `keepAliveStream` flag described below.
      operationId: challengeCreate
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          example: LeelaChess
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/challengeCreate_request'
        description: Parameters of the challenge
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeJson'
          description: The challenge was successfully created.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The creation of the challenge failed.
      security:
      - OAuth2:
        - challenge:write
        - bot:play
        - board:play
      summary: Create a challenge
      tags:
      - Challenges
  /api/challenge/{challengeId}/accept:
    post:
      description: |
        Accept an incoming challenge.

        You should receive a `gameStart` event on the [incoming events stream](#operation/apiStreamEvent).
      operationId: challengeAccept
      parameters:
      - explode: false
        in: path
        name: challengeId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The challenge was successfully accepted.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: The challenge to accept was not found.
      security:
      - OAuth2:
        - challenge:write
        - bot:play
        - board:play
      summary: Accept a challenge
      tags:
      - Challenges
  /api/challenge/{challengeId}/decline:
    post:
      description: |
        Decline an incoming challenge.
      operationId: challengeDecline
      parameters:
      - explode: false
        in: path
        name: challengeId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/challengeDecline_request'
        description: Details related to decline of challenge
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The challenge was successfully declined.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: The challenge to decline was not found.
      security:
      - OAuth2:
        - challenge:write
        - bot:play
        - board:play
      summary: Decline a challenge
      tags:
      - Challenges
  /api/challenge/{challengeId}/cancel:
    post:
      description: |
        Cancel a challenge you sent, or aborts the game if the challenge was accepted, but the game was not yet played.
        Note that the ID of a game is the same as the ID of the challenge that created it.
      operationId: challengeCancel
      parameters:
      - explode: false
        in: path
        name: challengeId
        required: true
        schema:
          example: 5IrD6Gzz
        style: simple
      - description: "Optional `challenge:write` token of the opponent. If set, the\
          \ game can be canceled even if both players have moved."
        explode: true
        in: query
        name: opponentToken
        required: false
        schema: {}
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The challenge was successfully cancelled.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: The challenge to cancel was not found.
      security:
      - OAuth2:
        - challenge:write
        - bot:play
        - board:play
      summary: Cancel a challenge
      tags:
      - Challenges
  /api/challenge/ai:
    post:
      description: |
        Start a game with Lichess AI.

        You will be notified on the [event stream](#operation/apiStreamEvent) that a new game has started.
      operationId: challengeAi
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/challengeAi_request'
        description: Parameters of the game
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameJson'
          description: The game with Lichess AI was successfully started.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The creation of a game with Lichess AI failed.
      security:
      - OAuth2:
        - challenge:write
        - bot:play
        - board:play
      summary: Challenge the AI
      tags:
      - Challenges
  /api/challenge/open:
    post:
      description: |
        Create a challenge that any 2 players can join.

        Share the URL of the challenge. the first 2 players to click it will be paired for a game.

        The response body also contains `whiteUrl` and `blackUrl`.
        You can control which color each player gets by giving them these URLs,
        instead of the main challenge URL.

        Open challenges expire after 24h.

        To directly pair 2 known players, use [this endpoint](#operation/challengeCreate) instead,
        with the `acceptByToken` parameter.
      operationId: challengeOpen
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/challengeOpen_request'
        description: Parameters of the game
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeOpenJson'
          description: The challenge was successfully created.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The creation of the challenge failed.
      security: []
      summary: Open-ended challenge
      tags:
      - Challenges
  /api/challenge/{gameId}/start-clocks:
    post:
      description: |
        Start the clocks of a game immediately, even if a player has not yet made a move.

        Requires the OAuth tokens of both players with `challenge:write` scope.

        If the clocks have already started, the call will have no effect.
      operationId: challengeStartClocks
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          description: ID of the game
        style: simple
      - description: OAuth token of a player
        explode: true
        in: query
        name: token1
        required: false
        schema: {}
        style: form
      - description: OAuth token of the other player
        explode: true
        in: query
        name: token2
        required: false
        schema: {}
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The clock of a game was successfully started.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - challenge:write
      summary: Start clocks of a game
      tags:
      - Challenges
  /api/bulk-pairing:
    get:
      description: |
        Get a list of upcoming bulk pairings you created.

        Only bulk pairings that are scheduled in the future, or that have a clock start scheduled in the future, are listed.

        Bulk pairings are deleted from the server after the pairings are done and the clocks have started.
      operationId: bulkPairingGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BulkPairing'
                type: array
          description: The list of upcoming bulk pairing the logged in user created.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - challenge:bulk
      summary: View upcoming bulk pairings
      tags:
      - Bulk pairings
    post:
      description: |
        Schedule many games at once, up to 24h in advance.

        OAuth tokens are required for all paired players, with the `challenge:write` scope.

        You can schedule up to 500 games every 10 minutes. [Contact us](mailto:contact@lichess.org) if you need higher limits.

        If games have a real-time clock, each player must have only one pairing.
        For correspondence games, players can have multiple pairings within the same bulk.

        The entire bulk is rejected if:
          - a token is missing
          - a token is present more than once (except in correspondence)
          - a token lacks the `challenge:write` scope
          - a player account is closed
          - a player is paired more than once (except in correspondence)
          - a bulk is already scheduled to start at the same time with the same player
          - you have 10 scheduled bulks
          - you have 1000 scheduled games

        Partial bulks are never created. Either it all fails, or it all succeeds.
        When it fails, it does so with an error message explaining the issue.
        Failed bulks are not counted in the rate limiting, they are free.
        Fix the issues, manually or programmatically, then retry to schedule the bulk.

        A successful bulk creation returns a JSON bulk document. Its ID can be used for further operations.
      operationId: bulkPairingCreate
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/bulkPairingCreate_request'
        description: Parameters of the pairings
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkPairing'
          description: The bulk pairings have been successfully created.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The creation of the bulk pairings failed.
      security:
      - OAuth2:
        - challenge:bulk
      summary: Create a bulk pairing
      tags:
      - Bulk pairings
  /api/bulk-pairing/{id}/start-clocks:
    post:
      description: |
        Immediately start all clocks of the games of a bulk pairing.

        This overrides the `startClocksAt` value of an existing bulk pairing.

        If the games have not yet been created (`bulk.pairAt` is in the future), then this does nothing.

        If the clocks have already started (`bulk.startClocksAt` is in the past), then this does nothing.
      operationId: bulkPairingStartClocks
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: The ID of the bulk pairing
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The clocks of the games of a bulk pairing were successfully
            started.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: The bulk pairing was not found.
      security:
      - OAuth2:
        - challenge:bulk
      summary: Manually start clocks
      tags:
      - Bulk pairings
  /api/bulk-pairing/{id}:
    delete:
      description: |
        Cancel and delete a bulk pairing that is scheduled in the future.

        If the games have already been created, then this does nothing.

        Canceling a bulk pairing does not refund the rate limit cost of that bulk pairing.
      operationId: bulkPairingDelete
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          description: The ID of the bulk pairing
          example: 5IrD6Gzz
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The bulk pairing was successfully deleted.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: The bulk pairing to delete was not found.
      security:
      - OAuth2:
        - challenge:bulk
      summary: Cancel a bulk pairing
      tags:
      - Bulk pairings
  /api/round/{gameId}/add-time/{seconds}:
    post:
      description: |
        Add seconds to the opponent's clock. Can be used to create games with time odds.
      operationId: roundAddTime
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema:
          description: ID of the game
        style: simple
      - description: How many seconds to give
        explode: false
        in: path
        name: seconds
        required: true
        schema:
          maximum: 86400
          minimum: 1
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: Time was successfully added to the opponent's clock.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - challenge:write
      summary: Add time to the opponent clock
      tags:
      - Challenges
  /api/token/admin-challenge:
    post:
      description: |
        **This endpoint can only be used by Lichess administrators. It will not work if you do not have the appropriate permissions.** Tournament organizers should instead use [OAuth](#tag/OAuth) to obtain `challenge:write` tokens from users in order to perform bulk pairing.*

        Create and obtain `challenge:write` tokens for multiple users.

        If a similar token already exists for a user, it is reused. This endpoint is idempotent.
      operationId: adminChallengeTokens
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/adminChallengeTokens_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                thibault: lLOEkpH58W599xH9
                neio: nAYTIJphwWFwKmKk
                lizen2: 1cnHhuWKHROgiPC4
                lizen3: SszJ9Sj1bto0UQCK
          description: The `challenge:write` tokens of each user
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The creation of the tokens failed.
      security:
      - OAuth2:
        - web:mod
      summary: Admin challenge tokens
      tags:
      - Challenges
  /inbox/{username}:
    post:
      description: |
        Send a private message to another player.
      operationId: inboxUsername
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          example: someplayer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/inboxUsername_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: The private message has been successfully sent.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The sending of the private message has failed.
      security:
      - OAuth2:
        - msg:write
      summary: Send a private message
      tags:
      - Messaging
  /api/cloud-eval:
    get:
      description: |
        Get the cached evaluation of a position, if available.

        Opening positions have more chances of being available. There are about 15 million positions in the database.

        Up to 5 variations may be available. Variants are supported.
      operationId: apiCloudEval
      parameters:
      - description: FEN of the position
        example: rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2
        explode: true
        in: query
        name: fen
        required: true
        schema: {}
        style: form
      - description: Number of variations
        explode: true
        in: query
        name: multiPv
        required: false
        schema:
          default: 1
        style: form
      - description: Variant
        explode: true
        in: query
        name: variant
        required: false
        schema:
          $ref: '#/components/schemas/VariantKey'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                fen: rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2
                knodes: 13683
                depth: 22
                pvs:
                - moves: c8f5 d2d4 e7e6 g1f3 g8e7 c1e3 c7c5 d4c5 e7c6 b1c3
                  cp: -13
                - moves: c7c5 c2c3 d5d4 g1f3 b8c6 c3d4 c6d4 b1c3 c8d7 f1d3
                  cp: -1
                - moves: e7e6 d2d4 c7c5 c2c3 b8c6 g1f3 c8d7 b1a3 c5d4 c3d4
                  cp: 24
          description: The evaluation of the position.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Get cloud evaluation of a position.
      tags:
      - Analysis
  /api/external-engine:
    get:
      description: |
        Lists all external engines that have been registered for the user,
        and the credentials required to use them.
      operationId: apiExternalEngineList
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ExternalEngine'
                type: array
          description: A list of external engines.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - engine:read
      summary: List external engines
      tags:
      - External engine
    post:
      description: |
        Registers a new external engine for the user. It can then be selected
        and used on the analysis board.

        After registering, the provider should start waiting for analyis requests.
      operationId: apiExternalEngineCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalEngineRegistration'
        description: A new external engine registration.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalEngine'
          description: The registered engine.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - engine:write
      summary: Create external engine
      tags:
      - External engine
  /api/external-engine/{id}:
    delete:
      description: |
        Unregisters an external engine.
      operationId: apiExternalEngineDelete
      parameters:
      - description: The external engine id.
        example: eei_aTKImBJOnv6j
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
          description: Engine successfully deleted
      security:
      - OAuth2:
        - engine:write
      summary: Delete external engine
      tags:
      - External engine
    get:
      description: |
        Get properties and credentials of an external engine.
      operationId: apiExternalEngineGet
      parameters:
      - description: The external engine id.
        example: eei_aTKImBJOnv6j
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalEngine'
          description: A registered engine.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - engine:read
      summary: Get external engine
      tags:
      - External engine
    parameters:
    - description: The external engine id.
      example: eei_aTKImBJOnv6j
      explode: false
      in: path
      name: id
      required: true
      schema: {}
      style: simple
    put:
      description: |
        Updates the properties of an external engine.
      operationId: apiExternalEnginePut
      parameters:
      - description: The external engine id.
        example: eei_aTKImBJOnv6j
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalEngineRegistration'
        description: A modified engine registration.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalEngine'
          description: A registered engine.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2:
        - engine:write
      summary: Update external engine
      tags:
      - External engine
  /api/external-engine/{id}/analyse:
    parameters:
    - description: The external engine id.
      example: eei_aTKImBJOnv6j
      explode: false
      in: path
      name: id
      required: true
      schema: {}
      style: simple
    post:
      description: "**Endpoint: `https://engine.lichess.ovh/api/external-engine/{id}/analyse`**\n\
        \nRequest analysis from an external engine.\n\nResponse content is streamed\
        \ as [newline delimited JSON](#section/Introduction/Streaming-with-ND-JSON).\
        \ \nThe properties are based on the [UCI specification](https://backscattering.de/chess/uci/#engine).\n\
        Analysis stops when the client goes away, the requested limit\nis reached,\
        \ or the provider goes away.\n"
      operationId: apiExternalEngineAnalyse
      parameters:
      - description: The external engine id.
        example: eei_aTKImBJOnv6j
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiExternalEngineAnalyse_request'
        description: Engine credentials and analysis request.
        required: true
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/apiExternalEngineAnalyse_200_response'
          description: Stream of analysis output
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Analyse with external engine
      tags:
      - External engine
    servers:
    - url: https://engine.lichess.ovh
  /api/external-engine/work:
    post:
      description: |
        **Endpoint: `https://engine.lichess.ovh/api/external-engine/work`**

        Wait for an analysis requests to any of the external engines that
        have been registered with the given `secret`.

        Uses long polling.

        After acquiring a request, the provider should immediately
        [start streaming the results](#tag/External-engine/operation/apiExternalEngineSubmit).
      operationId: apiExternalEngineAcquire
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiExternalEngineAcquire_request'
        description: Provider credentials.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiExternalEngineAcquire_200_response'
          description: Analysis has been requested
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "204":
          description: No pending analysis
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Acquire analysis request
      tags:
      - External engine
    servers:
    - url: https://engine.lichess.ovh
  /api/external-engine/work/{id}:
    parameters:
    - explode: false
      in: path
      name: id
      required: true
      schema:
        example: aingoohiJee2sius
      style: simple
    post:
      description: |
        **Endpoint: `https://engine.lichess.ovh/api/external-engine/work/{id}`**

        Submit a stream of analysis as [UCI output](https://backscattering.de/chess/uci/#engine-info).

        * The engine should always be in `UCI_Chess960` mode.
        * `UCI_AnalyseMode` enabled if available.
        * It produces `info` with at least:
          - `depth`
          - `multipv` (between 1 and 5)
          - `score`
          - `nodes`
          - `time`
          - `pv`

        The server may close the connection at any time, indicating that
        the requester has gone away and analysis should be stopped.
      operationId: apiExternalEngineSubmit
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          example: aingoohiJee2sius
        style: simple
      requestBody:
        content:
          text/plain:
            example: info multipv 1 depth 20 seldepth 30 time 1373 nodes 1494341 score
              cp 47 hashfull 594 nps 1088376 tbhits 0 pv d2d4 d7d5 c2c4 e7e6 b1c3
              f8b4 c4d5 e6d5 g1f3 g8f6 c1g5 h7h6 g5f6 d8f6 d1b3 c7c5 e2e3 b8c6 d4c5
              e8g8 f1d3
            schema: {}
        description: Analysis results
        required: true
      responses:
        "200":
          description: Thanks
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Answer analysis request
      tags:
      - External engine
    servers:
    - url: https://engine.lichess.ovh
  /oauth:
    get:
      description: |
        OAuth2 authorization endpoint.

        Start the OAuth2 Authorization Code Flow with PKCE by securely
        generating two random strings unique to each authorization
        request:
        * `code_verifier`
        * `state`

        Store these in session storage. Make sure not to reveal `code_verifier`
        to eavesdroppers. Do not show it in URLs, do not abuse `state` to store
        it, do not send it over insecure connections. However it is fine if
        the user themselves can extract `code_verifier`, which will always be
        possible for fully client-side apps.

        Then send the user to this endpoint. They will be prompted to grant
        authorization and then be redirected back to the given `redirect_uri`.

        If the authorization failed, the following query string parameters will
        be appended to the redirection:
        * `error`, in particular with value `access_denied` if the user
           cancelled authorization
        * `error_description` to aid debugging
        * `state`, exactly as passed in the `state` parameter

        If the authorization succeeded, the following query string parameters
        will be appended to the redirection:
        * `code`, containing a fresh short-lived authorization code
        * `state`, exactly as passed in the `state` parameter

        Next, to defend against cross site request forgery, check that the
        returned `state` matches the `state` you originally generated.

        Finally, continue by using the authorization code to
        [obtain an access token](#operation/apiToken).
      operationId: oauth
      parameters:
      - description: Must be `code`.
        explode: true
        in: query
        name: response_type
        required: true
        schema: {}
        style: form
      - description: Arbitrary identifier that uniquely identifies your application.
        example: example.com
        explode: true
        in: query
        name: client_id
        required: true
        schema: {}
        style: form
      - description: The absolute URL that the user should be redirected to with the
          authorization result.
        explode: true
        in: query
        name: redirect_uri
        required: true
        schema: {}
        style: form
      - description: Must be `S256`.
        explode: true
        in: query
        name: code_challenge_method
        required: true
        schema: {}
        style: form
      - description: Compute `BASE64URL(SHA256(code_verifier))`.
        explode: true
        in: query
        name: code_challenge
        required: true
        schema: {}
        style: form
      - description: "Space separated list of requested OAuth scopes, if any."
        explode: true
        in: query
        name: scope
        required: false
        schema: {}
        style: form
      - description: Hint that you want the user to log in with a specific Lichess
          username.
        explode: true
        in: query
        name: username
        required: false
        schema: {}
        style: form
      - description: Arbitrary state that will be returned verbatim with the authorization
          result.
        explode: true
        in: query
        name: state
        required: false
        schema: {}
        style: form
      responses:
        "200":
          description: Authorization prompt will be displayed to the user.
      security: []
      summary: Request authorization code
      tags:
      - OAuth
  /api/token:
    delete:
      description: Revokes the access token sent as Bearer for this request.
      operationId: apiTokenDelete
      responses:
        "204":
          description: Access token revoked.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security:
      - OAuth2: []
      summary: Revoke access token
      tags:
      - OAuth
    post:
      description: |
        OAuth2 token endpoint. Exchanges an authorization code for an access token.
      operationId: apiToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/apiToken_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                token_type: Bearer
                access_token: lio_pLwAbN7lFPklzY2m8lTOI1DGApS84u57
                expires_in: 31536000
          description: Access token successfully obtained.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
          description: Failed to obtain access token.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Obtain access token
      tags:
      - OAuth
  /api/token/test:
    post:
      description: "For up to 1000 OAuth tokens, \nreturns their associated user ID\
        \ and scopes,\nor `null` if the token is invalid.\n\nThe method is `POST`\
        \ so a longer list of tokens can be sent in the request body.\n"
      operationId: tokenTest
      requestBody:
        content:
          text/plain:
            example: "lip_AvsS88TozFeSMEaoLN5c,lip_badToken"
            schema: {}
        description: OAuth tokens separated by commas. Up to 1000.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - lip_AvsS88TozFeSnZa1LN5c:
                    scopes: "challenge:read,challenge:write"
                    userId: thibault
                    expires: 1358509698620
                  lip_badToken: null
                items:
                  additionalProperties:
                    oneOf:
                    - properties:
                        userId: {}
                        scopes:
                          description: Comma-separated list of scopes. Empty string
                            if the token has no scopes.
                        expires:
                          description: Unix-timestampe in milliseconds or null if
                            the token never expires.
                    - {}
                    x-additionalPropertiesName: token
                  type: object
                type: array
          description: The representation of the OAuth tokens.
      security: []
      summary: Test multiple OAuth tokens
      tags:
      - OAuth
  /masters:
    get:
      description: |
        **Endpoint: <https://explorer.lichess.ovh/masters>**

        Example: `curl https://explorer.lichess.ovh/masters?play=d2d4,d7d5,c2c4,c7c6,c4d5`
      operationId: openingExplorerMaster
      parameters:
      - description: FEN of the root position
        example: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
        explode: true
        in: query
        name: fen
        required: false
        schema: {}
        style: form
      - description: |
          Comma separated sequence of legal moves in UCI notation.
          Play additional moves starting from `fen`.
          Required to find an opening name, if `fen` is not an exact match
          for a named position.
        example: "e2e4,e7e5,c2c4,c7c6,c4e5"
        explode: true
        in: query
        name: play
        required: false
        schema:
          default: ""
        style: form
      - description: Include only games from this year or later
        explode: true
        in: query
        name: since
        required: false
        schema:
          default: 1952
        style: form
      - description: Include only games from this year or earlier
        explode: true
        in: query
        name: until
        required: false
        schema: {}
        style: form
      - description: Number of most common moves to display
        explode: true
        in: query
        name: moves
        required: false
        schema:
          default: 12
        style: form
      - description: Number of top games to display
        explode: true
        in: query
        name: topGames
        required: false
        schema:
          default: 15
          maximum: 15
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningExplorerJson'
          description: Opening statistics and game references for the position.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Masters database
      tags:
      - Opening Explorer
    servers:
    - url: https://explorer.lichess.ovh
  /lichess:
    get:
      description: |
        **Endpoint: <https://explorer.lichess.ovh/lichess>**

        Games sampled from all Lichess players.

        Example: `curl https://explorer.lichess.ovh/lichess?variant=standard&speeds=blitz,rapid,classical&ratings=2200,2500&fen=rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR%20w%20KQkq%20-%200%201`
      operationId: openingExplorerLichess
      parameters:
      - description: Variant
        explode: true
        in: query
        name: variant
        required: false
        schema:
          $ref: '#/components/schemas/VariantKey'
        style: form
      - description: FEN of the root position
        example: rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2
        explode: true
        in: query
        name: fen
        required: false
        schema: {}
        style: form
      - description: |
          Comma separated sequence of legal moves in UCI notation.
          Play additional moves starting from `fen`.
          Required to find an opening name, if `fen` is not an exact match
          for a named position.
        example: "e2e4,e7e5,c2c4,c7c6,c4e5"
        explode: true
        in: query
        name: play
        required: false
        schema:
          default: ""
        style: form
      - description: Comma separated list of game speeds to look for
        explode: true
        in: query
        name: speeds
        required: false
        schema:
          items:
            $ref: '#/components/schemas/Speed'
          type: array
        style: form
      - description: "Comma separated list of rating groups, ranging from their value\
          \ to the next higher group"
        explode: true
        in: query
        name: ratings
        required: false
        schema:
          items:
            enum:
            - 1600
            - 1800
            - 2000
            - 2200
            - 2500
          type: array
        style: form
      - description: Include only games from this month or later
        explode: true
        in: query
        name: since
        required: false
        schema:
          default: 1952-01
        style: form
      - description: Include only games from this month or earlier
        explode: true
        in: query
        name: until
        required: false
        schema:
          default: 3000-12
        style: form
      - description: Number of most common moves to display
        explode: true
        in: query
        name: moves
        required: false
        schema:
          default: 12
        style: form
      - description: Number of top games to display
        explode: true
        in: query
        name: topGames
        required: false
        schema:
          default: 4
          maximum: 4
        style: form
      - description: Number of recent games to display
        explode: true
        in: query
        name: recentGames
        required: false
        schema:
          default: 4
          maximum: 4
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningExplorerJson'
          description: Opening statistics and game references for the position.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Lichess games
      tags:
      - Opening Explorer
    servers:
    - url: https://explorer.lichess.ovh
  /lichess/history:
    get:
      description: |
        **Endpoint: <https://explorer.lichess.ovh/lichess/history>**

        Opening statistics of games sampled from all Lichess players, grouped
        by month. Starts with the first month that has any data,
        or at `since` if given.
      operationId: openingExplorerLichessHistory
      parameters:
      - description: Variant
        explode: true
        in: query
        name: variant
        required: false
        schema:
          $ref: '#/components/schemas/VariantKey'
        style: form
      - description: FEN of the root position
        example: rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2
        explode: true
        in: query
        name: fen
        required: false
        schema: {}
        style: form
      - description: |
          Comma separated sequence of legal moves in UCI notation.
          Play additional moves starting from `fen`.
          Required to find an opening name, if `fen` is not an exact match
          for a named position.
        example: "e2e4,e7e5,c2c4,c7c6,c4e5"
        explode: true
        in: query
        name: play
        required: false
        schema:
          default: ""
        style: form
      - description: Comma separated list of game speeds to look for
        explode: true
        in: query
        name: speeds
        required: false
        schema:
          items:
            $ref: '#/components/schemas/Speed'
        style: form
      - description: "Comma separated list of rating groups, ranging from their value\
          \ to the next higher group"
        explode: true
        in: query
        name: ratings
        required: false
        schema:
          items:
            enum:
            - 1600
            - 1800
            - 2000
            - 2200
            - 2500
        style: form
      - description: Include only games from this month or later
        explode: true
        in: query
        name: since
        required: false
        schema:
          example: 2017-04
        style: form
      - description: Include only games from this month or earlier
        explode: true
        in: query
        name: until
        required: false
        schema:
          default: 3000-12
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  history:
                  - month: 2017-04
                    black: 413538
                    draws: 38549
                    white: 429805
                  - month: 2017-05
                    black: 418542
                    draws: 39171
                    white: 434066
                  opening:
                    eco: B00
                    name: King's Pawn
          description: Opening statistics over time.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Lichess games history
      tags:
      - Opening Explorer
    servers:
    - url: https://explorer.lichess.ovh
  /player:
    get:
      description: |
        **Endpoint: <https://explorer.lichess.ovh/player>**

        Games of a Lichess player.

        Responds with a stream of [newline delimited JSON](#section/Introduction/Streaming-with-ND-JSON). Will start indexing
        on demand, immediately respond with the current results, and stream
        more updates until indexing is complete. The stream is throttled
        and deduplicated. Empty lines may be sent to avoid timeouts.

        Will index new games at most once per minute, and revisit previously
        ongoing games at most once every day.

        Example: `curl https://explorer.lichess.ovh/player?player=revoof&color=white&play=d2d4,d7d5&recentGames=1`
      operationId: openingExplorerPlayer
      parameters:
      - description: Username or ID of the player
        example: revoof
        explode: true
        in: query
        name: player
        required: false
        schema: {}
        style: form
      - description: Variant
        explode: true
        in: query
        name: variant
        required: false
        schema:
          $ref: '#/components/schemas/VariantKey'
        style: form
      - description: FEN of the root position
        example: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
        explode: true
        in: query
        name: fen
        required: false
        schema: {}
        style: form
      - description: |
          Comma separated sequence of legal moves in UCI notation.
          Play additional moves starting from `fen`.
          Required to find an opening name, if `fen` is not an exact match
          for a named position.
        example: "d2d4,d7d5"
        explode: true
        in: query
        name: play
        required: false
        schema:
          default: ""
        style: form
      - description: Comma separated list of game speeds to look for
        explode: true
        in: query
        name: speeds
        required: false
        schema:
          items:
            $ref: '#/components/schemas/Speed'
        style: form
      - description: Comma separated list of modes
        explode: true
        in: query
        name: modes
        required: false
        schema:
          items:
            enum:
            - casual
            - rated
          type: array
        style: form
      - description: Include only games from this month or later
        explode: true
        in: query
        name: since
        required: false
        schema:
          default: 1952-01
        style: form
      - description: Include only games from this month or earlier
        explode: true
        in: query
        name: until
        required: false
        schema:
          default: 3000-12
        style: form
      - description: Number of most common moves to display
        explode: true
        in: query
        name: moves
        required: false
        schema: {}
        style: form
      - description: Number of recent games to display
        explode: true
        in: query
        name: recentGames
        required: false
        schema:
          default: 8
          maximum: 8
        style: form
      responses:
        "200":
          content:
            application/nd-json:
              schema:
                $ref: '#/components/schemas/OpeningExplorerPlayerJson'
          description: Opening statistics and game references for the position.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Player games
      tags:
      - Opening Explorer
    servers:
    - url: https://explorer.lichess.ovh
  /master/pgn/{gameId}:
    get:
      description: |
        **Endpoint: `https://explorer.lichess.ovh/masters/pgn/{gameId}`**

        Example: `curl https://explorer.lichess.ovh/masters/pgn/aAbqI4ey`
      operationId: openingExplorerMasterGame
      parameters:
      - explode: false
        in: path
        name: gameId
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/x-chess-pgn:
              schema:
                $ref: '#/components/schemas/MasterGamePgn'
          description: The PGN representation of the game.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: OTB master game
      tags:
      - Opening Explorer
    servers:
    - url: https://explorer.lichess.ovh
  /standard:
    get:
      description: |
        **Endpoint: <https://tablebase.lichess.ovh>**

        Example: `curl http://tablebase.lichess.ovh/standard?fen=4k3/6KP/8/8/8/8/7p/8_w_-_-_0_1`
      operationId: tablebaseStandard
      parameters:
      - description: FEN of the position. Underscores allowed.
        explode: true
        in: query
        name: fen
        required: true
        schema: {}
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TablebaseJson'
          description: The tablebase information for the position in standard chess.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      security: []
      summary: Tablebase lookup
      tags:
      - Tablebase
    servers:
    - url: https://tablebase.lichess.ovh
  /atomic:
    get:
      description: |
        **Endpoint: <https://tablebase.lichess.ovh>**
      operationId: tablebaseAtomic
      responses:
        "200":
          content:
            text/plain:
              schema: {}
          description: The tablebase information for the position in atomic chess.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      summary: Tablebase lookup for Atomic chess
      tags:
      - Tablebase
    servers:
    - url: https://tablebase.lichess.ovh
  /antichess:
    get:
      description: |
        **Endpoint: <https://tablebase.lichess.ovh>**
      operationId: antichessAtomic
      responses:
        "200":
          content:
            text/plain:
              schema: {}
          description: The tablebase information for the position in atomic chess.
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                default: '''*'''
              style: simple
      summary: Tablebase lookup for Antichess
      tags:
      - Tablebase
    servers:
    - url: https://tablebase.lichess.ovh
components:
  examples:
    challenge:
      value:
        type: challenge
        challenge:
          id: 7pGLxJ4F
          url: https://lichess.org/VU0nyvsW
          status: created
          compat:
            bot: false
            board: true
          challenger:
            id: lovlas
            name: Lovlas
            title: IM
            rating: 2506
            patron: true
            online: true
            lag: 24
          destUser:
            id: thibot
            name: thibot
            title: null
            rating: 1500
            provisional: true
            online: true
            lag: 45
          variant:
            key: standard
            name: Standard
            short: Std
          rated: true
          timeControl:
            type: clock
            limit: 300
            increment: 25
            show: 5+25
          color: random
          speed: rapid
          perf:
            icon: '#'
            name: Rapid
    challengeCanceled:
      value:
        type: challengeCanceled
        challenge:
          id: 7pGLxJ4F
          url: https://lichess.org/VU0nyvsW
          status: created
          compat:
            bot: false
            board: true
          challenger:
            id: lovlas
            name: Lovlas
            title: IM
            rating: 2506
            patron: true
            online: true
            lag: 24
          destUser:
            id: thibot
            name: thibot
            title: null
            rating: 1500
            provisional: true
            online: true
            lag: 45
          variant:
            key: standard
            name: Standard
            short: Std
          rated: true
          timeControl:
            type: clock
            limit: 300
            increment: 25
            show: 5+25
          color: random
          speed: rapid
          perf:
            icon: '#'
            name: Rapid
    challengeDeclined:
      value:
        type: challengeDeclined
        challenge:
          id: 7pGLxJ4F
          url: https://lichess.org/VU0nyvsW
          status: created
          compat:
            bot: false
            board: true
          challenger:
            id: lovlas
            name: Lovlas
            title: IM
            rating: 2506
            patron: true
            online: true
            lag: 24
          destUser:
            id: thibot
            name: thibot
            title: null
            rating: 1500
            provisional: true
            online: true
            lag: 45
          variant:
            key: standard
            name: Standard
            short: Std
          rated: true
          timeControl:
            type: clock
            limit: 300
            increment: 25
            show: 5+25
          color: random
          speed: rapid
          perf:
            icon: '#'
            name: Rapid
    gameStart:
      value:
        type: gameStart
        game:
          gameId: rCRw1AuO
          fullId: rCRw1AuOvonq
          color: black
          fen: r1bqkbnr/pppp2pp/2n1pp2/8/8/3PP3/PPPB1PPP/RN1QKBNR w KQkq - 2 4
          hasMoved: true
          isMyTurn: false
          lastMove: b8c6
          opponent:
            id: philippe
            rating: 1790
            username: Philippe
          perf: correspondence
          rated: false
          secondsLeft: 1209600
          source: friend
          speed: correspondence
          variant:
            key: standard
            name: Standard
          compat:
            bot: false
            board: true
    gameFinish:
      value:
        type: gameFinish
        game:
          gameId: rCRw1AuO
          fullId: rCRw1AuOvonq
          color: black
          fen: r1bqkbnr/pppp2pp/2n1pp2/8/8/3PP3/PPPB1PPP/RN1QKBNR w KQkq - 2 4
          hasMoved: true
          isMyTurn: false
          lastMove: b8c6
          opponent:
            id: philippe
            rating: 1790
            username: Philippe
          perf: correspondence
          rated: false
          secondsLeft: 1209600
          source: friend
          speed: correspondence
          variant:
            key: standard
            name: Standard
          compat:
            bot: false
            board: true
    gameFull:
      value:
        type: gameFull
        id: 5IrD6Gzz
        rated: true
        variant:
          key: standard
          name: Standard
          short: Std
        clock:
          initial: 1200000
          increment: 10000
        speed: classical
        perf:
          name: Classical
        createdAt: 1523825103562
        white:
          id: lovlas
          name: lovlas
          provisional: false
          rating: 2500
          title: IM
        black:
          id: leela
          name: leela
          rating: 2390
          title: null
        initialFen: startpos
        state:
          type: gameState
          moves: e2e4 c7c5 f2f4 d7d6 g1f3 b8c6 f1c4 g8f6 d2d3 g7g6 e1g1 f8g7
          wtime: 7598040
          btime: 8395220
          winc: 10000
          binc: 10000
          status: started
    gameState:
      value:
        type: gameState
        moves: e2e4 c7c5 f2f4 d7d6 g1f3 b8c6 f1c4 g8f6 d2d3 g7g6 e1g1 f8g7 b1c3
        wtime: 7598040
        btime: 8395220
        winc: 10000
        binc: 10000
        status: started
    chatLine:
      value:
        type: chatLine
        username: thibault
        text: "Good luck, have fun"
        room: player
    chatLineSpectator:
      value:
        type: chatLine
        username: lovlas
        text: '!eval'
        room: spectator
    opponentGoneTrue:
      value:
        type: opponentGone
        gone: true
        claimWinInSeconds: 8
    opponentGoneFalse:
      value:
        type: opponentGone
        gone: false
    gameStateResign:
      value:
        type: gameState
        moves: e2e4 c7c5 f2f4 d7d6 g1f3 b8c6 f1c4 g8f6 d2d3 g7g6 e1g1 f8g7 b1c3
        wtime: 7598040
        btime: 8395220
        winc: 10000
        binc: 10000
        status: resign
        winner: black
  schemas:
    VariantKey:
      default: standard
      enum:
      - standard
      - chess960
      - crazyhouse
      - antichess
      - atomic
      - horde
      - kingOfTheHill
      - racingKings
      - threeCheck
      - fromPosition
      example: standard
    Variant:
      properties:
        key:
          $ref: '#/components/schemas/VariantKey'
        name: {}
        short: {}
    UciVariant:
      default: chess
      enum:
      - chess
      - crazyhouse
      - antichess
      - atomic
      - horde
      - kingofthehill
      - racingkings
      - 3check
      example: chess
    Speed:
      enum:
      - ultraBullet
      - bullet
      - blitz
      - rapid
      - classical
      - correspondence
    PerfType:
      enum:
      - ultraBullet
      - bullet
      - blitz
      - rapid
      - classical
      - correspondence
      - chess960
      - crazyhouse
      - antichess
      - atomic
      - horde
      - kingOfTheHill
      - racingKings
      - threeCheck
    Clock:
      properties:
        limit: {}
        increment: {}
    GameStatus:
      description: Game status code. https://github.com/ornicar/scalachess/blob/0a7d6f2c63b1ca06cd3c958ed3264e738af5c5f6/src/main/scala/Status.scala#L16-L28
      enum:
      - created
      - started
      - aborted
      - mate
      - resign
      - stalemate
      - timeout
      - draw
      - outoftime
      - cheat
      - noStart
      - unknownFinish
      - variantEnd
    ChallengeUser:
      allOf:
      - $ref: '#/components/schemas/LightUser'
      properties:
        rating: {}
        provisional: {}
        online: {}
    ChallengeJson:
      example:
        id: VU0nyvsW
        url: https://lichess.org/VU0nyvsW
        color: random
        direction: out
        timeControl:
          increment: 2
          limit: 300
          show: 5+2
          type: clock
        variant:
          key: standard
          name: Standard
          short: Std
        challenger:
          id: thibot
          name: thibot
          online: true
          provisional: false
          rating: 1940
          title: BOT
        destUser:
          id: leelachess
          name: LeelaChess
          online: true
          provisional: true
          rating: 2670
          title: BOT
        perf:
          icon: ;
          name: Correspondence
        rated: true
        speed: blitz
        status: created
      properties:
        id: {}
        url: {}
        status:
          enum:
          - created
          - offline
          - canceled
          - declined
          - accepted
        challenger:
          $ref: '#/components/schemas/ChallengeUser'
        destUser:
          oneOf:
          - $ref: '#/components/schemas/ChallengeUser'
          - {}
        variant:
          $ref: '#/components/schemas/Variant'
        rated: {}
        speed:
          $ref: '#/components/schemas/Speed'
        timeControl:
          oneOf:
          - additionalProperties: false
            properties:
              type:
                example: clock
              limit: {}
              increment: {}
              show:
                example: 5+2
          - additionalProperties: false
            properties:
              type:
                example: correspondence
              daysPerTurn: {}
          - additionalProperties: false
            properties:
              type:
                example: unlimited
        color:
          enum:
          - white
          - black
          - random
        perf:
          $ref: '#/components/schemas/ChallengeJson_perf'
        direction:
          enum:
          - in
          - out
        initialFen: {}
        declineReason: {}
      required:
      - challenger
      - color
      - destUser
      - id
      - perf
      - rated
      - speed
      - status
      - timeControl
      - url
      - variant
    ChallengeCanceledJson:
      example:
        id: VU0nyvsW
      properties:
        id: {}
    ChallengeOpenJson:
      example:
        id: VU0nyvsW
        url: https://lichess.org/VU0nyvsW
        urlWhite: https://lichess.org/VU0nyvsW?color=white
        urlBlack: https://lichess.org/VU0nyvsW?color=black
        color: random
        direction: out
        timeControl:
          increment: 2
          limit: 300
          show: 5+2
          type: clock
        variant:
          key: standard
          name: Standard
          short: Std
        challenger:
          id: thibot
          name: thibot
          online: true
          provisional: false
          rating: 1940
          title: BOT
        destUser:
          id: leelachess
          name: LeelaChess
          online: true
          provisional: true
          rating: 2670
          title: BOT
        perf:
          icon: ;
          name: Correspondence
        rated: true
        speed: blitz
        status: created
    BulkPairing:
      example:
        id: RVAcwgg7
        games:
        - id: NKop9IyD
          black: lizen1
          white: thibault
        - id: KT8374ut
          black: lizen3
          white: lizen2
        - id: wInQr8Sk
          black: lizen5
          white: lizen4
        variant: standard
        clock:
          increment: 0
          limit: 300
        pairAt: 1612289869919
        pairedAt: null
        rated: false
        startClocksAt: 1612200422971
        scheduledAt: 1612203514628
    GameUser:
      properties:
        user:
          $ref: '#/components/schemas/LightUser'
        rating: {}
        ratingDiff: {}
        name: {}
        provisional: {}
        aiLevel: {}
        analysis:
          $ref: '#/components/schemas/GameUser_analysis'
        team: {}
    GameJson:
      example:
        id: q7ZvsdUF
        rated: true
        variant: standard
        speed: blitz
        perf: blitz
        createdAt: 1514505150384
        lastMoveAt: 1514505592843
        status: draw
        players:
          white:
            user:
              name: Lance5500
              title: LM
              patron: true
              id: lance5500
            rating: 2389
            ratingDiff: 4
          black:
            user:
              name: TryingHard87
              id: tryinghard87
            rating: 2498
            ratingDiff: -4
        opening:
          eco: D31
          name: "Semi-Slav Defense: Marshall Gambit"
          ply: 7
        moves: d4 d5 c4 c6 Nc3 e6 e4 Nd7 exd5 cxd5 cxd5 exd5 Nxd5 Nb6 Bb5+ Bd7 Qe2+
          Ne7 Nxb6 Qxb6 Bxd7+ Kxd7 Nf3 Qa6 Ne5+ Ke8 Qf3 f6 Nd3 Qc6 Qe2 Kf7 O-O Kg8
          Bd2 Re8 Rac1 Nf5 Be3 Qe6 Rfe1 g6 b3 Bd6 Qd2 Kf7 Bf4 Qd7 Bxd6 Nxd6 Nc5 Rxe1+
          Rxe1 Qc6 f3 Re8 Rxe8 Nxe8 Kf2 Nc7 Qb4 b6 Qc4+ Nd5 Nd3 Qe6 Nb4 Ne7 Qxe6+
          Kxe6 Ke3 Kd6 g3 h6 Kd3 h5 Nc2 Kd5 a3 Nc6 Ne3+ Kd6 h4 Nd8 g4 Ne6 Ke4 Ng7
          Nc4+ Ke6 d5+ Kd7 a4 g5 gxh5 Nxh5 hxg5 fxg5 Kf5 Nf4 Ne3 Nh3 Kg4 Ng1 Nc4 Kc7
          Nd2 Kd6 Kxg5 Kxd5 f4 Nh3+ Kg4 Nf2+ Kf3 Nd3 Ke3 Nc5 Kf3 Ke6 Ke3 Kf5 Kd4 Ne6+
          Kc4
        clock:
          initial: 300
          increment: 3
          totalTime: 420
      properties:
        id: {}
        rated: {}
        variant:
          $ref: '#/components/schemas/VariantKey'
        speed:
          $ref: '#/components/schemas/Speed'
        perf: {}
        createdAt:
          format: int64
        lastMoveAt:
          format: int64
        status:
          $ref: '#/components/schemas/GameStatus'
        players:
          $ref: '#/components/schemas/GameJson_players'
        initialFen: {}
        winner:
          enum:
          - white
          - black
        opening:
          $ref: '#/components/schemas/GameJson_opening'
        moves: {}
        pgn: {}
        daysPerTurn: {}
        analysis:
          items:
            properties:
              eval:
                description: Evaluation in centipawns
              best:
                description: Best move in UCI notation (only if played move was inaccurate)
                example: c2c3
              variation:
                description: Best variation in SAN notation (only if played move was
                  inaccurate)
                example: c3 Nc6 d4 Qb6 Be2 Nge7 Na3 cxd4 cxd4 Nf5
              judgment:
                description: Judgment annotation (only if played move was inaccurate)
                properties:
                  name:
                    enum:
                    - Inaccuracy
                    - Mistake
                    - Blunder
                  comment:
                    example: Blunder. Nxg6 was best.
            required:
            - eval
        tournament: {}
        swiss: {}
        clock:
          $ref: '#/components/schemas/GameJson_clock'
      required:
      - createdAt
      - id
      - lastMoveAt
      - perf
      - players
      - rated
      - speed
      - status
      - variant
    GamePgn:
      example: |
        [Event "Rated Blitz game"]
        [Site "https://lichess.org/fY44h4OY"]
        [Date "2018.03.29"]
        [Round "-"]
        [White "pveldman"]
        [Black "thibault"]
        [Result "1-0"]
        [UTCDate "2018.03.29"]
        [UTCTime "01:38:15"]
        [WhiteElo "1610"]
        [BlackElo "1601"]
        [WhiteRatingDiff "+10"]
        [BlackRatingDiff "-10"]
        [Variant "Standard"]
        [TimeControl "180+0"]
        [ECO "C62"]
        [Opening "Ruy Lopez: Steinitz Defense"]
        [Termination "Normal"]
        [Event "U1700 SuperBlitz Arena"]

        1. e4 { [%clk 0:03:00] } e5 { [%clk 0:03:00] } 2. Nf3 { [%clk 0:02:59] } Nc6 { [%clk 0:02:58] } 3. Bb5 { [%clk 0:02:57] } d6 { [%clk 0:02:55] } 4. h3 { [%clk 0:02:54] } Nf6 { [%clk 0:02:52] } 5. Bxc6+ { [%clk 0:02:52] } bxc6 { [%clk 0:02:49] } 6. d3 { [%clk 0:02:51] } Be7 { [%clk 0:02:46] } 7. O-O { [%clk 0:02:47] } O-O { [%clk 0:02:45] } 8. b3 { [%clk 0:02:45] } d5 { [%clk 0:02:45] } 9. exd5 { [%clk 0:02:33] } cxd5 { [%clk 0:02:40] } 10. Nxe5 { [%clk 0:02:31] } Qd6 { [%clk 0:02:38] } 1-0
    MasterGamePgn:
      example: |
        [Event "Wch Blitz"]
        [Site "Astana"]
        [Date "2012.07.10"]
        [Round "23"]
        [White "Carlsen, Magnus"]
        [Black "Chadaev, Nikolay"]
        [Result "1-0"]
        [WhiteElo "2837"]
        [BlackElo "2580"]

        1. e4 e5 2. f4 d5 3. exd5 exf4 4. Nf3 Nf6 5. c4 c6 6. d4 cxd5 7. c5 Nc6 8. Bb5 Be7 9. O-O O-O 10. Bxf4 Bg4 11. Nc3 Ne4 12. Qd3 Bf5 13. Qe3 Bf6 14. Bxc6 bxc6 15. Ne5 Bxe5 16. Bxe5 Bg6 17. Nxe4 Bxe4 18. Qg3 f6 19. Bd6 Re8 20. b4 Bg6 21. a4 a6 22. h4 Qd7 23. h5 Bxh5 24. Rxf6 Qg4 25. Qxg4 Bxg4 26. Rf4 Bh5 27. Raf1 h6 28. Be5 Ra7 29. b5 axb5 30. axb5 cxb5 31. c6 Raa8 32. c7 Kh7 33. Rb1 Be2 34. Rf7 Rg8 35. Re7 Bc4 36. Kh2 Rae8 37. Rd7 Ra8 38. Rb2 Raf8 39. g4 Ra8 40. Rf2 b4 41. Rff7 h5 42. Rxg7+ Rxg7 43. Rxg7+ 1-0
    StudyPgn:
      example: |
        [Event "All about the Sicilian Defense: Dragon Variation"]
        [Site "https://lichess.org/study/8c8bmUfy/qwnXMwVC"]
        [Result "*"]
        [UTCDate "2017.06.25"]
        [UTCTime "10:12:04"]
        [Variant "Standard"]
        [ECO "B76"]
        [Opening "Sicilian Defense: Dragon Variation, Yugoslav Attack, Panov Variation"]
        [Annotator "https://lichess.org/@/Francesco_Super"]

        { This chapter will go over the Dragon Variation, a very common variation used by Black and it is the most aggressive variation in the Sicilian defense. }
        1. e4 c5 2. Nf3 { Simple developing move to control the d4 square } { [%csl Gd4,Gc5][%cal Gf3d4,Gc5d4] } 2... d6 { [%cal Gd6e5] } (2... e6 3. d4 cxd4 4. Nxd4 Nf6 5. e5 (5. Nc3 { [%cal Ge4e5] }) 5... Qa5+) 3. d4 { Whites want the exchange of pawns } { [%cal Gc5d4] } 3... cxd4 { [%cal Gf3d4] } 4. Nxd4 { Whites are now ahead in development but blacks still have the two central pawns whereas whites only one. } { [%csl Ge7,Gd6,Ge4] } 4... Nf6 { Blacks are now developing their knight and threatening the e4 pawn } { [%csl Ge4][%cal Gf6e4] } 5. Nc3 { The e4 pawn is now protected by the c3 knight } { [%csl Ge4,Bc3][%cal Rf6e4,Bc3e4] } 5... g6 { This is the DRAGON VARIATION. g6 allows the dark-squared bishop to develop and move to g7, controlling the long dark-squared diagonal } { [%csl Gd4] } 6. Be3 { [%cal Gd1d2,Gf2f3,Ge1c1,Gg2g4,Gh2h4,Gg4g5] } (6. Be2 Bg7 7. O-O Nc6 8. Be3 { [%cal Ge3d4] } (8. f3 Nxe4 { [%cal Gg7d4,Gc6d4] } 9. Nxc6 Qb6+ { [%cal Gb6c6,Gb6g1] } 10. Kh1 Nxc3 { [%cal Gc3d1,Gc3e2] } 11. bxc3 bxc6 { [%cal Gc8a6] }) 8... O-O 9. Nb3 a6 { [%cal Gb7b5,Gb5b4,Ge2c4] }) 6... Bg7 (6... Ng4 { [%cal Gg4e3] } 7. Bb5+ { [%cal Gb5e8,Gb8d7,Gc8d7,Gd1g4] } 7... Nc6 8. Nxc6 bxc6 9. Bxc6+ { [%cal Gc6a8] }) 7. f3 { The key opening moves for White, who attempt to castle queenside , whereas f3 strengthens the pawn structure, connecting e4 to the h2 and g2, while White also plan pushing to g4 and possibly h4. } { [%csl Bf3,Be3][%cal Rg2g4,Rh2h4,Rg4g5] } 7... O-O (7... h5 { Is operating against g4. }) 8. Qd2 { [%csl Gh6,Gg7][%cal Ge1c1,Ga1d1,Re3h6,Rd2h6] } 8... Nc6 { [%csl Gc6,Gh6][%cal Gb8c6,Ge1c1,Ga7a6,Ge3h6] } 9. g4 (9. Bh6 { [%cal Ge3d4] } 9... Bxh6 10. Qxh6 Nxd4) 9... Be6 10. Nxe6 fxe6 { [%cal Gf8f1] } 11. O-O-O Ne5 12. Be2 { [%csl Gf3][%cal Re5f3,Bd1h1,Bg1d1] } 12... Qc7 { [%csl Gc4][%cal Ge5c4,Gc4e3,Gc4d2,Bf8c8,Yc7c3] } 13. h4 Nc4 *
    Title:
      enum:
      - GM
      - WGM
      - IM
      - WIM
      - FM
      - WFM
      - NM
      - CM
      - WCM
      - WNM
      - LM
      - BOT
      example: NM
    LightUser:
      example:
        patron: true
        name: Chess-Network
        id: chess-network
        title: ""
      properties:
        name:
          example: Chess-Network
        title:
          oneOf:
          - $ref: '#/components/schemas/Title'
          - {}
        patron:
          example: true
        id:
          example: chess-network
    Perf:
      example:
        rd: 60
        games: 2945
        rating: 1609
        prov: ""
        prog: -22
      properties:
        games:
          example: 2945
        rating:
          example: 1609
        rd:
          example: 60
        prog:
          example: -22
        prov: {}
    StormPerf:
      example:
        score: 61
        runs: 44
      properties:
        runs:
          example: 44
        score:
          example: 61
    Perfs:
      example:
        horde:
          rd: 60
          games: 2945
          rating: 1609
          prov: ""
          prog: -22
        storm:
          score: 61
          runs: 44
        correspondence:
          rd: 60
          games: 2945
          rating: 1609
          prov: ""
          prog: -22
        ultraBullet:
          rd: 60
          games: 2945
          rating: 1609
          prov: ""
          prog: -22
        classical:
          rd: 60
          games: 2945
          rating: 1609
          prov: ""
          prog: -22
        rapid:
          rd: 60
          games: 2945
          rating: 1609
          prov: ""
          prog: -22
        chess960:
          rd: 60
          games: 2945
          rating: 1609
          prov: ""
          prog: -22
        racingKings:
          rd: 60
          games: 2945
          rating: 1609
          prov: ""
          prog: -22
        blitz:
          rd: 60
          games: 2945
          rating: 1609
          prov: ""
          prog: -22
        puzzle:
          rd: 60
          games: 2945
          rating: 1609
          prov: ""
          prog: -22
        atomic:
          rd: 60
          games: 2945
          rating: 1609
          prov: ""
          prog: -22
        kingOfTheHill:
          rd: 60
          games: 2945
          rating: 1609
          prov: ""
          prog: -22
        bullet:
          rd: 60
          games: 2945
          rating: 1609
          prov: ""
          prog: -22
      properties:
        chess960:
          $ref: '#/components/schemas/Perf'
        atomic:
          $ref: '#/components/schemas/Perf'
        racingKings:
          $ref: '#/components/schemas/Perf'
        ultraBullet:
          $ref: '#/components/schemas/Perf'
        blitz:
          $ref: '#/components/schemas/Perf'
        kingOfTheHill:
          $ref: '#/components/schemas/Perf'
        bullet:
          $ref: '#/components/schemas/Perf'
        correspondence:
          $ref: '#/components/schemas/Perf'
        horde:
          $ref: '#/components/schemas/Perf'
        puzzle:
          $ref: '#/components/schemas/Perf'
        classical:
          $ref: '#/components/schemas/Perf'
        rapid:
          $ref: '#/components/schemas/Perf'
        storm:
          $ref: '#/components/schemas/StormPerf'
    PlayTime:
      example:
        total: 3296897
        tv: 12134
      properties:
        total:
          example: 3296897
        tv:
          example: 12134
    Profile:
      example:
        country: EC
        firstName: Thibault
        lastName: Duplessis
        uscfRating: 1500
        bio: Free bugs!
        location: ""
        links: "github.com/ornicar\r\ntwitter.com/ornicar"
        fideRating: 1500
        ecfRating: 1500
      properties:
        country:
          example: EC
        location: {}
        bio:
          example: Free bugs!
        firstName:
          example: Thibault
        lastName:
          example: Duplessis
        fideRating:
          example: 1500
        uscfRating:
          example: 1500
        ecfRating:
          example: 1500
        links:
          example: "github.com/ornicar\r\ntwitter.com/ornicar"
    Count:
      properties:
        all:
          example: 9265
        rated:
          example: 7157
        ai:
          example: 531
        draw:
          example: 340
        drawH:
          example: 331
        loss:
          example: 4480
        lossH:
          example: 4207
        win:
          example: 4440
        winH:
          example: 4378
        bookmark:
          example: 71
        playing:
          example: 6
        import:
          example: 66
        me:
          example: 0
    User:
      example:
        createdAt: 1290415680000
        seenAt: 1522636452014
        patron: true
        perfs:
          horde:
            rd: 60
            games: 2945
            rating: 1609
            prov: ""
            prog: -22
          storm:
            score: 61
            runs: 44
          correspondence:
            rd: 60
            games: 2945
            rating: 1609
            prov: ""
            prog: -22
          ultraBullet:
            rd: 60
            games: 2945
            rating: 1609
            prov: ""
            prog: -22
          classical:
            rd: 60
            games: 2945
            rating: 1609
            prov: ""
            prog: -22
          rapid:
            rd: 60
            games: 2945
            rating: 1609
            prov: ""
            prog: -22
          chess960:
            rd: 60
            games: 2945
            rating: 1609
            prov: ""
            prog: -22
          racingKings:
            rd: 60
            games: 2945
            rating: 1609
            prov: ""
            prog: -22
          blitz:
            rd: 60
            games: 2945
            rating: 1609
            prov: ""
            prog: -22
          puzzle:
            rd: 60
            games: 2945
            rating: 1609
            prov: ""
            prog: -22
          atomic:
            rd: 60
            games: 2945
            rating: 1609
            prov: ""
            prog: -22
          kingOfTheHill:
            rd: 60
            games: 2945
            rating: 1609
            prov: ""
            prog: -22
          bullet:
            rd: 60
            games: 2945
            rating: 1609
            prov: ""
            prog: -22
        tosViolation: false
        profile:
          country: EC
          firstName: Thibault
          lastName: Duplessis
          uscfRating: 1500
          bio: Free bugs!
          location: ""
          links: "github.com/ornicar\r\ntwitter.com/ornicar"
          fideRating: 1500
          ecfRating: 1500
        verified: true
        disabled: false
        playTime:
          total: 3296897
          tv: 12134
        id: georges
        title: NM
        username: Georges
      properties:
        id:
          example: georges
        username:
          example: Georges
        perfs:
          $ref: '#/components/schemas/Perfs'
        createdAt:
          example: 1290415680000
          format: int64
        disabled:
          example: false
        tosViolation:
          example: false
        profile:
          $ref: '#/components/schemas/Profile'
        seenAt:
          example: 1522636452014
          format: int64
        patron:
          example: true
        verified:
          example: true
        playTime:
          $ref: '#/components/schemas/PlayTime'
        title:
          $ref: '#/components/schemas/Title'
    UserExtended:
      allOf:
      - $ref: '#/components/schemas/User'
      - properties:
          url:
            example: https://lichess.org/@/georges
            format: uri
          playing:
            example: https://lichess.org/yqfLYJ5E/black
            format: uri
          completionRate:
            example: 97
          count:
            $ref: '#/components/schemas/Count'
          streaming:
            example: false
          followable:
            example: true
          following:
            example: false
          blocking:
            example: false
          followsYou:
            example: false
    Crosstable:
      example:
        users:
          neio: 201.5
          thibault: 144.5
        nbGames: 346
        matchup:
          users:
            neio: 44
            thibault: 43
          nbGames: 87
    GameChat:
      example:
      - text: Takeback sent
        user: lichess
      - text: Takeback accepted
        user: lichess
      - text: "Good game, well played"
        user: thibault
    PuzzleJson:
      example:
        game:
          clock: 10+0
          id: VpVdGbna
          perf:
            icon: '#'
            name: Rapid
          pgn: d4 Nf6 Nf3 g6 Nc3 d6 e4 c5 Be3 cxd4 Bxd4 Nc6 Be3 Qa5 Bd2 Bg7 Be2 O-O
            O-O Qb6 Rb1 Bg4 h3 Bxf3 Bxf3 Nd4 Be3 Nxf3+ Qxf3 Qc6 Bd4 a6 Bxf6 Bxf6 Nd5
            Qxc2 Nxf6+ exf6 Qxf6 Qxe4 Qxd6 Rad8 Qb6 Rfe8 Rfe1 Qxe1+ Rxe1 Rxe1+ Kh2
            Rd2 Kg3 Ree2 Qxb7 Rxb2 Qxa6 Rxa2 Qc8+ Kg7 Qc3+ Kg8 Qc5 Rxf2 Qc8+ Kg7 Qc3+
            Kh6 Qe3+ Kg7 Qe5+ Kf8 Qh8+ Ke7 Qe5+ Kf8 Qb8+ Kg7 Qe5+ f6 Qe7+ Kh6 Qf8+
            Kg5 h4+ Kh5 Qc5+ f5 Qc1 Rxg2+ Kh3 Rh2+ Kg3 Rag2+ Kf3 Rg4 Qd1 Rhxh4 Kf2
            Rh2+ Kf3 Rh3+ Ke2 Rg2+ Kf1+ Rg4 Kf2 g5 Qd8 h6 Qe8+ Kh4 Kf1 h5 Qe1+ Rhg3
            Qe5 f4 Qe1 f3 Kf2 Rf4 Qh1+ Rh3 Qe1 g4
          players:
          - color: white
            name: borska (2013)
            userId: borska
          - color: black
            name: Xxn00bkillar69xX (1990)
            userId: xxn00bkillar69xx
          rated: true
        puzzle:
          id: K69di
          initialPly: 123
          plays: 1970
          rating: 2022
          solution:
          - e1e7
          - f4f6
          - e7f6
          themes:
          - short
          - queenRookEndgame
          - endgame
          - mateIn2
    PuzzleRoundJson:
      properties:
        id:
          example: BwPiW
        date:
          example: 1514505150384
        win:
          example: true
        puzzleRating:
          example: 1877
    PuzzleDashboardJson:
      example:
        days: 30
        global:
          firstWins: 276
          nb: 501
          performance: 1570
          puzzleRatingAvg: 1523
          replayWins: 2
        themes:
          advancedPawn:
            results:
              firstWins: 19
              nb: 39
              performance: 1438
              puzzleRatingAvg: 1476
              replayWins: 1
            theme: Advanced pawn
          anastasiaMate:
            results:
              firstWins: 5
              nb: 6
              performance: 1720
              puzzleRatingAvg: 1387
              replayWins: 0
            theme: Anastasia's mate
    PuzzleRaceJson:
      example:
        id: Kj1t0
        url: https://lichess.org/racer/Kj1t0
    StormDashboardJson:
      example:
        high:
          allTime: 11
          day: 0
          month: 7
          week: 0
        days:
        - _id: 2021/1/28
          combo: 8
          errors: 1
          highest: 1084
          moves: 9
          runs: 26
          score: 4
          time: 175
        - _id: 2021/1/27
          combo: 14
          errors: 1
          highest: 1095
          moves: 15
          runs: 15
          score: 7
          time: 23
        - _id: 2021/1/22
          combo: 14
          errors: 1
          highest: 1095
          moves: 15
          runs: 15
          score: 3
          time: 23
    RatingHistory:
      example:
      - name: Bullet
        points:
        - - 2011
          - 0
          - 8
          - 1472
        - - 2011
          - 0
          - 9
          - 1332
        - - 2011
          - 8
          - 12
          - 1314
      - name: Blitz
        points:
        - - 2011
          - 7
          - 29
          - 1332
    PerfStat:
      example:
        perf:
          glicko:
            rating: 1672.42
            deviation: 45.13
            provisional: false
          nb: 5692
          progress: -27
        rank: 98121
        percentile: 69.7
        stat:
          perfType:
            key: bullet
            name: Bullet
          highest:
            int: 1902
            at: 2021-05-31T08:58:53.701Z
            gameId: YEDqtwig
          lowest:
            int: 1417
            at: 2016-06-28T13:54:39.656Z
            gameId: rNM4J1GJ
          bestWins:
            results:
            - opInt: 2238
              opId:
                id: hyperdragon84
                name: HyperDragon84
                title: null
              at: 2019-06-19T17:09:05.187Z
              gameId: DGB53z9w
            - opInt: 2089
              opId:
                id: osipov
                name: osipov
                title: null
              at: 2017-06-18T09:46:05.016Z
              gameId: gurRhuMi
            - opInt: 2071
              opId:
                id: spark50
                name: Spark50
                title: null
              at: 2020-07-04T08:36:12.948Z
              gameId: a93Dk1mv
            - opInt: 2045
              opId:
                id: yasha43
                name: Yasha43
                title: null
              at: 2021-05-17T14:01:41.098Z
              gameId: j3jZnGTr
            - opInt: 2034
              opId:
                id: midedu
                name: midedu
                title: null
              at: 2020-06-27T17:32:47.001Z
              gameId: OiaMVLQ8
          worstLosses:
            results:
            - opInt: 1186
              opId:
                id: happy0
                name: Happy0
                title: null
              at: 2016-07-07T19:48:29.077Z
              gameId: Q01bbiN4
            - opInt: 1197
              opId:
                id: kazmankiller86
                name: KazmanKiller86
                title: null
              at: 2016-10-16T14:21:37.748Z
              gameId: Aivqh9Sp
            - opInt: 1201
              opId:
                id: artem555
                name: artem555
                title: null
              at: 2016-08-28T16:21:30.923Z
              gameId: tiRAbhnX
            - opInt: 1265
              opId:
                id: arcenuu
                name: Arcenuu
                title: null
              at: 2016-12-24T14:28:03.866Z
              gameId: A68wUOoh
            - opInt: 1283
              opId:
                id: amritalib76
                name: Amritalib76
                title: null
              at: 2018-06-26T09:55:39.354Z
              gameId: sbNVikmo
          count:
            all: 5858
            rated: 5688
            win: 2789
            loss: 2806
            draw: 263
            tour: 654
            berserk: 1
            opAvg: 1671.44
            seconds: 784886
            disconnects: 0
          resultStreak:
            win:
              cur:
                v: 0
              max:
                v: 11
                from:
                  at: 2021-06-14T15:38:50.681Z
                  gameId: wTX2IExo
                to:
                  at: 2021-06-15T18:41:46.970Z
                  gameId: 1z4rrjgw
            loss:
              cur:
                v: 3
                from:
                  at: 2021-06-29T17:53:23.642Z
                  gameId: pfcnjgik
                to:
                  at: 2021-06-29T18:04:48.358Z
                  gameId: 6sPaGL8T
              max:
                v: 14
                from:
                  at: 2018-06-11T14:43:39.296Z
                  gameId: 1fc9dqun
                to:
                  at: 2018-06-11T15:10:30.908Z
                  gameId: Nzy6UgwY
          playStreak:
            nb:
              cur:
                v: 0
              max:
                v: 118
                from:
                  at: 2018-06-11T10:32:21.248Z
                  gameId: UAsNnJbN
                to:
                  at: 2018-06-11T15:13:01.193Z
                  gameId: T7fHRaFG
            time:
              cur:
                v: 0
              max:
                v: 12683
                from:
                  at: 2018-06-12T14:11:14.021Z
                  gameId: IrZCAW58
                to:
                  at: 2018-06-12T18:02:57.010Z
                  gameId: RNF1mQ68
            lastDate: 2021-06-29T18:04:48.358Z
    Top10s:
      example:
        bullet:
        - id: bahadirozen
          username: BahadirOzen
          perfs:
            bullet:
              rating: 3018
              progress: 18
          online: true
          title: FM
        - id: penguingim1
          username: penguingim1
          perfs:
            bullet:
              rating: 2983
              progress: -36
          title: GM
          online: true
          patron: true
        - id: night-king96
          username: Night-King96
          perfs:
            bullet:
              rating: 2958
              progress: 35
          title: GM
        blitz: []
        rapid: []
        classical: []
        ultraBullet: []
        chess960: []
        crazyhouse: []
        antichess: []
        atomic: []
        horde: []
        kingOfTheHill: []
        racingKings: []
        threeCheck: []
    Leaderboard:
      example:
        users:
        - id: bahadirozen
          username: BahadirOzen
          perfs:
            bullet:
              rating: 3018
              progress: 18
          online: true
          title: FM
        - id: penguingim1
          username: penguingim1
          perfs:
            bullet:
              rating: 2983
              progress: -36
          title: GM
          online: true
          patron: true
        - id: night-king96
          username: Night-King96
          perfs:
            bullet:
              rating: 2958
              progress: 35
          title: GM
    UserPreferences:
      example:
        pieceSet3d: ""
        destination: true
        is3d: false
        moveEvent: 2
        soundSet: ""
        blindfold: 0
        highlight: true
        theme3d: ""
        captured: true
        dark: true
        theme: ""
        confirmResign: 1
        coords: 2
        clockBar: true
        insightShare: 1
        zen: 0
        moretime: 3
        keyboardMove: 0
        bgImg: ""
        coordColor: 2
        replay: 2
        autoThreefold: 2
        clockSound: true
        follow: true
        message: 3
        transp: false
        rookCastle: 1
        animation: 2
        premove: true
        clockTenths: 1
        takeback: 3
        pieceSet: ""
        challenge: 4
        submitMove: 4
        autoQueen: 2
      properties:
        dark:
          example: true
        transp:
          example: false
        bgImg:
          format: uri
        is3d:
          example: false
        theme:
          enum:
          - blue
          - blue2
          - blue3
          - blue-marble
          - canvas
          - wood
          - wood2
          - wood3
          - wood4
          - maple
          - maple2
          - brown
          - leather
          - green
          - marble
          - green-plastic
          - grey
          - metal
          - olive
          - newspaper
          - purple
          - purple-diag
          - pink
          - ic
        pieceSet:
          enum:
          - cburnett
          - merida
          - alpha
          - pirouetti
          - chessnut
          - chess7
          - reillycraig
          - companion
          - riohacha
          - kosal
          - leipzig
          - fantasy
          - spatial
          - california
          - pixel
          - maestro
          - fresca
          - cardinal
          - gioco
          - tatiana
          - staunty
          - governor
          - dubrovny
          - icpieces
          - shapes
          - letter
        theme3d:
          enum:
          - Black-White-Aluminium
          - Brushed-Aluminium
          - China-Blue
          - China-Green
          - China-Grey
          - China-Scarlet
          - Classic-Blue
          - Gold-Silver
          - Light-Wood
          - Power-Coated
          - Rosewood
          - Marble
          - Wax
          - Jade
          - Woodi
        pieceSet3d:
          enum:
          - Basic
          - Wood
          - Metal
          - RedVBlue
          - ModernJade
          - ModernWood
          - Glass
          - Trimmed
          - Experimental
          - Staunton
          - CubesAndPi
        soundSet:
          enum:
          - silent
          - standard
          - piano
          - nes
          - sfx
          - futuristic
          - robot
          - music
          - speech
        blindfold:
          example: 0
        autoQueen:
          example: 2
        autoThreefold:
          example: 2
        takeback:
          example: 3
        moretime:
          example: 3
        clockTenths:
          example: 1
        clockBar:
          example: true
        clockSound:
          example: true
        premove:
          example: true
        animation:
          example: 2
        captured:
          example: true
        follow:
          example: true
        highlight:
          example: true
        destination:
          example: true
        coords:
          example: 2
        replay:
          example: 2
        challenge:
          example: 4
        message:
          example: 3
        coordColor:
          example: 2
        submitMove:
          example: 4
        confirmResign:
          example: 1
        insightShare:
          example: 1
        keyboardMove:
          example: 0
        zen:
          example: 0
        moveEvent:
          example: 2
        rookCastle:
          example: 1
    ArenaTournaments:
      example:
        created: ""
        started: ""
        finished: ""
      properties:
        created:
          items:
            $ref: '#/components/schemas/ArenaTournament'
        started:
          items:
            $ref: '#/components/schemas/ArenaTournament'
        finished:
          items:
            $ref: '#/components/schemas/ArenaTournament'
    ArenaTournament:
      example:
        id: QITRjufu
        fullName: U1700 SuperBlitz Arena
        rated: true
        clock:
          increment: 0
          limit: 180
        minutes: 57
        createdBy: lichess
        system: arena
        secondsToStart: 0
        secondsToFinish: 36000
        isFinished: true
        isRecentlyFinished: true
        pairingsClosed: true
        startsAt: 1522803600000
        nbPlayers: 154
        perf:
          icon: )
          key: blitz
          name: Blitz
          position: 1
        schedule:
          freq: hourly
          speed: superblitz
        variant:
          key: standard
          name: Standard
          short: Std
        duels:
        - id: 0MM6q4tQ
          p:
          - "n": player1
            r: 1500
            k: 3
          - "n": player2
            r: 1500
            k: 3
        standings:
          page: 1
          players:
          - name: player1
            rank: 1
            rating: 1500
            score: 3
            sheet:
              scores:
              - "0": 2
                "1": 2
              - "0": 4
                "1": 3
              - 0
              total: 6
              fire: true
        featured:
          id: khe72Fer
          fen: rn1qkb1r/pQ3ppp/2b2n2/8/5P2/4P3/PP4PP/RNB1KBNR
          color: black
          lastMove: d7c6
          white:
            rank: 2
            name: player1
            rating: 1360
          black:
            rank: 5
            name: player2
            rating: 1431
        podium:
        - name: player1
          rank: 1
          rating: 1500
          score: 3
          sheet:
            scores:
            - "0": 2
              "1": 2
            - "0": 4
              "1": 3
            - 0
            total: 6
            fire: true
          nb:
            game: 3
            beserk: 0
            win: 2
          performance: 1787
        stats:
          games: 454
          moves: 27542
          whiteWins: 236
          blackWins: 207
          draws: 11
          berserks: 0
          averageRating: 1320
    ArenaTournamentVariantIsKey:
      example:
        id: QITRjufu
        fullName: U1700 SuperBlitz Arena
        rated: true
        clock:
          increment: 0
          limit: 180
        minutes: 57
        createdBy: lichess
        system: arena
        secondsToStart: 0
        secondsToFinish: 36000
        isFinished: true
        isRecentlyFinished: true
        pairingsClosed: true
        startsAt: 1522803600000
        nbPlayers: 154
        perf:
          icon: )
          key: blitz
          name: Blitz
          position: 1
        schedule:
          freq: hourly
          speed: superblitz
        variant: standard
        duels:
        - id: 0MM6q4tQ
          p:
          - "n": player1
            r: 1500
            k: 3
          - "n": player2
            r: 1500
            k: 3
        standings:
          page: 1
          players:
          - name: player1
            rank: 1
            rating: 1500
            score: 3
            sheet:
              scores:
              - "0": 2
                "1": 2
              - "0": 4
                "1": 3
              - 0
              total: 6
              fire: true
        featured:
          id: khe72Fer
          fen: rn1qkb1r/pQ3ppp/2b2n2/8/5P2/4P3/PP4PP/RNB1KBNR
          color: black
          lastMove: d7c6
          white:
            rank: 2
            name: player1
            rating: 1360
          black:
            rank: 5
            name: player2
            rating: 1431
        podium:
        - name: player1
          rank: 1
          rating: 1500
          score: 3
          sheet:
            scores:
            - "0": 2
              "1": 2
            - "0": 4
              "1": 3
            - 0
            total: 6
            fire: true
          nb:
            game: 3
            beserk: 0
            win: 2
          performance: 1787
        stats:
          games: 454
          moves: 27542
          whiteWins: 236
          blackWins: 207
          draws: 11
          berserks: 0
          averageRating: 1320
    SwissTournament:
      example:
        rated: true
        clock:
          increment: 0
          limit: 300
        createdBy: thibault
        id: ZmKWCOye
        name: Wang
        nbOngoing: 0
        nbPlayers: 0
        nbRounds: 2
        nextRound:
          at: 2020-05-11T12:23:18.233-06:00
          in: 600
        round: 0
        startsAt: 2020-05-11T12:23:18.233-06:00
        status: created
        variant: standard
        isRecentlyFinished: false
        password: true
        stats:
          absences: 1608
          averageRating: 1588
          blackWins: 42541
          byes: 12
          draws: 0
          games: 42689
          whiteWins: 42837
    Simul:
      example:
        id: pDGbxhUe
        name: GM ChessWeeb
        fullName: GM ChessWeeb simul
        host:
          id: chessweeb
          name: ChessWeeb
          rating: 1500
          title: GM
        isCreated: false
        isFinished: true
        isRunning: false
        estimatedStartAt: 1620029815106
        startedAt: 1620029815106
        finishedAt: 1620029937283
        nbApplicants: 0
        nbPairings: 24
        text: ""
        variants:
        - icon: +
          key: standard
          name: Standard
    BroadcastTour:
      example:
        tour:
          description: Match for 1st 2nd and 3rd place.
          id: QYiOYnl1
          name: New in Chess Classic | Finals
          slug: new-in-chess-classic--finals
          url: https://lichess.org/broadcast/new-in-chess-classic--finals/phgcXuBl
        rounds:
        - id: BueO56UJ
          name: Finals Day 1
          slug: finals-day-1
          url: https://lichess.org/broadcast/new-in-chess-classic--finals/finals-day-1/BueO56UJ
        - id: yeGGfkfY
          name: Finals Day 2
          slug: finals-day-2
          url: https://lichess.org/broadcast/new-in-chess-classic--finals/finals-day-2/yeGGfkfY
    BroadcastRound:
      example:
        id: BueO56UJ
        name: Finals Day 1
        slug: finals-day-1
        url: https://lichess.org/broadcast/new-in-chess-classic--finals/finals-day-1/BueO56UJ
        games:
        - id: GRjidNTw
          name: Martin Fargac - Vit Kostka
          ongoing: true
          res: '*'
          url: http://l.org/broadcast/isreali-championship/round-4/iCEwAzEX/GRjidNTw
        - id: 81TcKCWT
          name: Pavel Zabystrzan - Kilian Slovak
          res: ½-½
          url: http://l.org/broadcast/isreali-championship/round-4/iCEwAzEX/tJpK7gbl
        - id: xEfufedI
          name: Roman Pilch - Bartolomej Buchta
          res: 1-0
          url: http://l.org/broadcast/isreali-championship/round-4/iCEwAzEX/xEfufedI
    OpeningExplorerJson:
      example:
        white: 1443
        draws: 3787
        black: 1156
        moves:
        - uci: c6d5
          san: cxd5
          averageRating: 2423
          white: 1443
          draws: 3787
          black: 1155
          game: null
        - uci: g8f6
          san: Nf6
          averageRating: 2515
          white: 0
          draws: 0
          black: 1
          game:
            id: 1EErB5jc
            winner: black
            white:
              name: "Drozdovskij, Yuri"
              rating: 2509
            black:
              name: "Dobrov, Vladimir"
              rating: 2515
            year: 2006
            month: 2006-01
        topGames:
        - uci: c6d5
          id: kN6d9l2i
          winner: black
          white:
            name: "Carlsen, M."
            rating: 2881
          black:
            name: "Anand, V."
            rating: 2785
          year: 2014
          month: 2014-06
        - uci: c6d5
          id: qeYPJL2y
          winner: white
          white:
            name: "So, W."
            rating: 2778
          black:
            name: "Carlsen, M."
            rating: 2843
          year: 2018
          month: 2018-06
        recentGames: []
        opening:
          eco: D10
          name: "Slav Defense: Exchange Variation"
    OpeningExplorerPlayerJson:
      example:
        white: 359
        draws: 23
        black: 273
        moves:
        - uci: c2c4
          san: c4
          averageOpponentRating: 1695
          performance: 1744
          white: 354
          draws: 23
          black: 266
          game: null
        - uci: c2c3
          san: c3
          averageOpponentRating: 1796
          performance: 1796
          white: 2
          draws: 0
          black: 2
          game: null
        - uci: e2e4
          san: e4
          averageOpponentRating: 1762
          performance: 1640
          white: 1
          draws: 0
          black: 2
          game: null
        - uci: g1f3
          san: Nf3
          averageOpponentRating: 1496
          performance: 1374
          white: 1
          draws: 0
          black: 2
          game: null
        - uci: h2h3
          san: h3
          averageOpponentRating: 1696
          performance: 2496
          white: 1
          draws: 0
          black: 0
          game:
            id: zyI4GGKv
            winner: white
            speed: bullet
            mode: rated
            black:
              name: gocool99
              rating: 1696
            white:
              name: revoof
              rating: 1702
            year: 2020
            month: 2020-07
        - uci: h2h4
          san: h4
          averageOpponentRating: 1674
          performance: 874
          white: 0
          draws: 0
          black: 1
          game:
            id: 9vA24xBn
            winner: black
            speed: bullet
            mode: rated
            black:
              name: MentalBlood
              rating: 1674
            white:
              name: revoof
              rating: 1657
            year: 2020
            month: 2020-06
        recentGames:
        - uci: c2c4
          id: BGLmUtv7
          winner: white
          speed: bullet
          mode: rated
          black:
            name: yigithanyiigit
            rating: 1227
          white:
            name: revoof
            rating: 1717
          year: 2022
          month: 2022-03
        opening:
          eco: D00
          name: Queen's Pawn Game
    TablebaseJson:
      example:
        dtz: 1
        precise_dtz: 1
        dtm: 17
        checkmate: false
        stalemate: false
        variant_win: false
        variant_loss: false
        insufficient_material: false
        category: win
        moves:
        - uci: h7h8q
          san: h8=Q+
          dtz: -2
          precise_dtz: -2
          dtm: -16
          zeroing: true
          checkmate: false
          stalemate: false
          variant_win: false
          variant_loss: false
          insufficient_material: false
          category: loss
      properties:
        category:
          description: |
            `cursed-win` and `blessed-loss` means the 50-move rule prevents
            the decisive result.

            `maybe-win` and `maybe-loss` means exact result is unknown due to
            [DTZ rounding](https://syzygy-tables.info/metrics#dtz), i.e., the
            win or loss could also be prevented by the 50-move rule if
            the user has deviated from the tablebase recommendation since the
            last pawn move or capture.
          enum:
          - win
          - unknown
          - maybe-win
          - cursed-win
          - draw
          - blessed-loss
          - maybe-loss
          - loss
        dtz:
          description: |
            [DTZ50'' with rounding](https://syzygy-tables.info/metrics#dtz) or null if unknown
        precise_dtz:
          description: |
            DTZ50'' (only if guaranteed to be not rounded) or null if unknown
        dtm:
          description: Distance to mate (only for positions with not more than 5 pieces)
        checkmate: {}
        stalemate: {}
        variant_win:
          description: Only in chess variants
        variant_loss:
          description: Only in chess variants
        insufficient_material: {}
        moves:
          description: "Information about legal moves, best first"
          items:
            $ref: '#/components/schemas/Move'
    Move:
      properties:
        uci:
          example: h7h8q
        san:
          example: h8=Q+
        category:
          enum:
          - loss
          - unknown
          - maybe-loss
          - blessed-loss
          - draw
          - cursed-win
          - maybe-win
          - win
        dtz:
          description: DTZ50'' with rounding or null if unknown
        precise_dtz:
          description: |
            DTZ50'' (only if guaranteed to be not rounded) or null if unknown
        dtm:
          description: Distance to mate (only for positions with not more than 5 pieces)
        zeroing: {}
        checkmate: {}
        stalemate: {}
        variant_win: {}
        variant_loss: {}
        insufficient_material: {}
    Team:
      example:
        leader:
          patron: true
          name: Chess-Network
          id: chess-network
          title: ""
        nbMembers: 3129
        name: Coders
        description: "There are 10 kinds of people in the world: those who understand\
          \ binary, and the others.\r\n\r\nIf you want to join the team, prove (briefly)\
          \ that you can code in the request message!"
        leaders: ""
        location: Planet Earth
        id: coders
        open: false
      properties:
        id:
          example: coders
        name:
          example: Coders
        description:
          example: "There are 10 kinds of people in the world: those who understand\
            \ binary, and the others.\r\n\r\nIf you want to join the team, prove (briefly)\
            \ that you can code in the request message!"
        open:
          example: false
        leader:
          $ref: '#/components/schemas/LightUser'
        leaders:
          items:
            $ref: '#/components/schemas/LightUser'
        nbMembers:
          example: 3129
        location:
          example: Planet Earth
    TeamRequest:
      properties:
        teamId:
          example: coders
        userId:
          example: thibault
        date:
          example: 1514505150384
        message:
          example: "Hello, I would like to join the team!"
    TeamRequestWithUser:
      properties:
        request:
          $ref: '#/components/schemas/TeamRequest'
        user:
          $ref: '#/components/schemas/User'
    GameEventPlayer:
      properties:
        aiLevel: {}
        id: {}
        name: {}
        title: {}
        rating: {}
        provisional: {}
    GameFullEvent:
      properties:
        type: {}
        id: {}
        variant:
          $ref: '#/components/schemas/Variant'
        clock:
          oneOf:
          - $ref: '#/components/schemas/Clock'
          - {}
        speed:
          $ref: '#/components/schemas/Speed'
        perf:
          $ref: '#/components/schemas/GameFullEvent_perf'
        rated: {}
        createdAt:
          format: int64
        white:
          $ref: '#/components/schemas/GameEventPlayer'
        black:
          $ref: '#/components/schemas/GameEventPlayer'
        initialFen:
          default: startpos
        state:
          $ref: '#/components/schemas/GameStateEvent'
        tournamentId: {}
      required:
      - black
      - clock
      - createdAt
      - id
      - initialFen
      - perf
      - rated
      - speed
      - state
      - type
      - variant
      - white
    GameStateEvent:
      properties:
        type: {}
        moves:
          description: Current moves in UCI format
        wtime:
          description: Integer of milliseconds White has left on the clock
        btime:
          description: Integer of milliseconds Black has left on the clock
        winc:
          description: Integer of White Fisher increment.
        binc:
          description: Integer of Black Fisher increment.
        status:
          $ref: '#/components/schemas/GameStatus'
        winner:
          description: "Color of the winner, if any"
        wdraw:
          description: "true if white is offering draw, else omitted"
        bdraw:
          description: "true if black is offering draw, else omitted"
        wtakeback:
          description: "true if white is proposing takeback, else omitted"
        btakeback:
          description: "true if black is proposing takeback, else omitted"
      required:
      - binc
      - btime
      - moves
      - status
      - type
      - winc
      - wtime
    ChatLineEvent:
      properties:
        type: {}
        room:
          enum:
          - player
          - spectator
        username: {}
        text: {}
      required:
      - room
      - text
      - type
      - username
    OpponentGone:
      properties:
        type: {}
        gone: {}
        claimWinInSeconds: {}
      required:
      - gone
      - type
    GameEventInfo:
      properties:
        id: {}
        source:
          enum:
          - lobby
          - friend
          - ai
          - api
          - tournament
          - position
          - import
          - importlive
          - simul
          - relay
          - pool
          - swiss
        compat:
          $ref: '#/components/schemas/GameEventInfo_compat'
    GameStartEvent:
      properties:
        type: {}
        game:
          $ref: '#/components/schemas/GameEventInfo'
    GameFinishEvent:
      properties:
        type: {}
        game:
          $ref: '#/components/schemas/GameEventInfo'
    ChallengeEvent:
      properties:
        type: {}
        challenge:
          $ref: '#/components/schemas/ChallengeJson'
    ChallengeCanceledEvent:
      properties:
        type: {}
        challenge:
          $ref: '#/components/schemas/ChallengeJson'
    ChallengeDeclinedEvent:
      properties:
        type: {}
        challenge:
          $ref: '#/components/schemas/ChallengeCanceledJson'
    Ok:
      example:
        ok: true
      properties:
        ok: {}
    Error:
      example:
        error: "This request is invalid because [...]"
      properties:
        error:
          description: The cause of the error.
    OAuthError:
      example:
        error: invalid_grant
        error_description: hash of code_verifier does not match code_challenge
      properties:
        error:
          description: The cause of the error.
        error_description:
          description: The reason why the request was rejected.
    NotFound:
      example:
        error: Not found.
      properties:
        error: {}
    SwissUnauthorisedEdit:
      example:
        error: This user cannot edit this swiss
      properties:
        error: {}
    GameStream:
      example:
      - id: A5fcMO3k
        rated: true
        variant: standard
        speed: bullet
        perf: bullet
        createdAt: 1525789431889
        status: 20
        statusName: started
        clock:
          initial: 60
          increment: 0
          totalTime: 60
        players:
          white:
            userId: kastorcito
            rating: 2617
          black:
            userId: er_or
            rating: 2288
    MoveStream:
      example:
      - id: LuGQwhBb
        variant:
          key: standard
          name: Standard
          short: Std
        speed: blitz
        perf: blitz
        rated: true
        initialFen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
        fen: rnbqkb1r/1p1ppppp/p6n/2p4Q/8/1P2P3/P1PP1PPP/RNB1KBNR w KQkq - 0 4
        player: white
        turns: 6
        startedAtTurn: 0
        source: pool
        status:
          id: 20
          name: started
        createdAt: 1620029815106
        lastMove: c7c5
      - fen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w
        wc: 180
        bc: 180
      - fen: rnbqkbnr/pppppppp/8/8/8/4P3/PPPP1PPP/RNBQKBNR b
        lm: e2e3
        wc: 180
        bc: 180
      - fen: rnbqkb1r/pppppppp/7n/8/8/4P3/PPPP1PPP/RNBQKBNR w
        lm: g8h6
        wc: 180
        bc: 180
      - fen: rnbqkb1r/pppppppp/7n/8/8/1P2P3/P1PP1PPP/RNBQKBNR b
        lm: b2b3
        wc: 177
        bc: 180
      - fen: rnbqkb1r/1ppppppp/p6n/8/8/1P2P3/P1PP1PPP/RNBQKBNR w
        lm: a7a6
        wc: 177
        bc: 177
    ExternalEngineRegistration:
      example:
        providerData: ""
        name: Stockfish 15
        maxHash: 2048
        defaultDepth: 24
        variants: ""
        providerSecret: Dee3uwieZei9ahpaici9bee2yahsai0K
        maxThreads: 8
      properties:
        name:
          description: Display name of the engine.
          example: Stockfish 15
          maxLength: 200
          minLength: 3
        maxThreads:
          description: Maximum number of available threads.
          example: 8
          maximum: 65536
          minimum: 1
        maxHash:
          description: "Maximum available hash table size, in MiB."
          example: 2048
          maximum: 1048576
          minimum: 1
        defaultDepth:
          description: Estimated depth of normal search.
          example: 24
          maximum: 246
          minimum: 0
        variants:
          description: Optional list of supported chess variants.
          items:
            $ref: '#/components/schemas/UciVariant'
        providerSecret:
          description: |
            A random token that can be used to
            [wait for analysis requests](#tag/External-engine/operation/apiExternalEngineAcquire)
            and provide analysis.

            The engine provider should securely generate a random string.

            The token will not be readable again, even by the user.

            The analysis provider can register multiple engines with the same
            token, even for different users, and wait for analysis requests
            from any of them. In this case, the request must not be made via
            CORS, so that the token is not revealed to any of the users.
          example: Dee3uwieZei9ahpaici9bee2yahsai0K
          maxLength: 1024
          minLength: 16
        providerData:
          description: |
            Arbitrary data that the engine provider can use for identification
            or bookkeeping.

            Users can read this information, but updating it requires knowing
            or changing the `providerSecret`.
      required:
      - defaultDepth
      - maxHash
      - maxThreads
      - name
      - providerSecret
    ExternalEngine:
      example:
        providerData: ""
        name: Stockfish 15
        maxHash: 2048
        defaultDepth: 24
        clientSecret: ees_mdF2hK0hlKGSPeC6
        id: eei_aTKImBJOnv6j
        variants:
        - chess
        maxThreads: 8
        userId: thibault
      properties:
        id:
          description: Unique engine registration ID.
          example: eei_aTKImBJOnv6j
        name:
          description: Display name of the engine.
          example: Stockfish 15
          maxLength: 200
          minLength: 3
        clientSecret:
          description: |
            A secret token that can be used to
            [*request* analysis](#tag/External-engine/operation/apiExternalEngineAnalyse)
            from this external engine.
          example: ees_mdF2hK0hlKGSPeC6
        userId:
          description: The user this engine has been registered for.
          example: thibault
        maxThreads:
          description: Maximum number of available threads.
          example: 8
          maximum: 65536
          minimum: 1
        maxHash:
          description: "Maximum available hash table size, in MiB."
          example: 2048
          maximum: 1048576
          minimum: 1
        defaultDepth:
          description: Estimated depth of normal search.
          example: 24
          maximum: 246
          minimum: 0
        variants:
          description: List of supported chess variants.
          example:
          - chess
          items:
            $ref: '#/components/schemas/UciVariant'
        providerData:
          description: |
            Arbitrary data that the engine provider can use for identification
            or bookkeeping.

            Users can read this information, but updating it requires knowing
            or changing the `providerSecret`.
      required:
      - clientSecret
      - defaultDepth
      - id
      - maxHash
      - maxThreads
      - name
      - userId
      - variants
    ExternalEngineWork:
      example:
        initialFen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
        infinite: false
        moves:
        - e2e4
        - g8f6
        variant: chess
        threads: 4
        multiPv: 1
        sessionId: abcd1234
        hash: 128
      properties:
        sessionId:
          description: |
            Arbitary string that identifies the analysis session.
            Providers may wish to clear the hash table between sessions.
          example: abcd1234
        threads:
          description: Number of threads to use for analysis.
          example: 4
          minimum: 1
        hash:
          description: "Hash table size to use for analysis, in MiB."
          example: 128
          minimum: 1
        infinite:
          description: |
            Request an infinite search (rather than roughly aiming for
            `defaultDepth`).
          example: false
        multiPv:
          description: Requested number of principal variations.
          example: 1
          maximum: 5
          minimum: 1
        variant:
          $ref: '#/components/schemas/UciVariant'
        initialFen:
          description: Initial position of the game.
          example: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
        moves:
          description: "List of moves played from the initial position, in UCI notation."
          example:
          - e2e4
          - g8f6
          items: {}
      required:
      - hash
      - initialFen
      - moves
      - multiPv
      - sessionId
      - threads
      - variant
    apiUsersStatus_200_response_inner:
      properties:
        id: {}
        name: {}
        title: {}
        online: {}
        playing: {}
        streaming: {}
        patron: {}
      required:
      - id
      - name
    accountEmail_200_response:
      example:
        email: abathur@mail.org
      properties:
        email: {}
    account_200_response:
      example:
        language: en-GB
        prefs:
          pieceSet3d: ""
          destination: true
          is3d: false
          moveEvent: 2
          soundSet: ""
          blindfold: 0
          highlight: true
          theme3d: ""
          captured: true
          dark: true
          theme: ""
          confirmResign: 1
          coords: 2
          clockBar: true
          insightShare: 1
          zen: 0
          moretime: 3
          keyboardMove: 0
          bgImg: ""
          coordColor: 2
          replay: 2
          autoThreefold: 2
          clockSound: true
          follow: true
          message: 3
          transp: false
          rookCastle: 1
          animation: 2
          premove: true
          clockTenths: 1
          takeback: 3
          pieceSet: ""
          challenge: 4
          submitMove: 4
          autoQueen: 2
      properties:
        prefs:
          $ref: '#/components/schemas/UserPreferences'
        language:
          example: en-GB
    accountKid_200_response:
      example:
        kid: false
      properties:
        kid: {}
    gameImport_request:
      properties:
        pgn:
          description: The PGN. It can contain only one game. Most standard tags are
            supported.
    apiTournamentPost_request:
      properties:
        name:
          description: The tournament name. Leave empty to get a random Grandmaster
            name
          maxLength: 30
          minLength: 2
        clockTime:
          description: Clock initial time in minutes
          enum:
          - 0
          - 0.25
          - 0.5
          - 0.75
          - 1
          - 1.5
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 10
          - 15
          - 20
          - 25
          - 30
          - 40
          - 50
          - 60
          example: 2
        clockIncrement:
          description: Clock increment in seconds
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 10
          - 15
          - 20
          - 25
          - 30
          - 40
          - 50
          - 60
          example: 1
        minutes:
          description: "How long the tournament lasts, in minutes"
          enum:
          - 20
          - 25
          - 30
          - 35
          - 40
          - 45
          - 50
          - 55
          - 60
          - 70
          - 80
          - 90
          - 100
          - 110
          - 120
          - 150
          - 180
          - 210
          - 240
          - 270
          - 300
          - 330
          - 360
          - 420
          - 480
          - 540
          - 600
          - 720
          example: 60
        waitMinutes:
          default: 5
          description: "How long to wait before starting the tournament, from now,\
            \ in minutes"
          enum:
          - 1
          - 2
          - 3
          - 5
          - 10
          - 15
          - 20
          - 30
          - 45
          - 60
        startDate:
          description: Timestamp (in milliseconds) to start the tournament at a given
            date and time. Overrides the `waitMinutes` setting
        variant:
          $ref: '#/components/schemas/VariantKey'
        rated:
          default: true
          description: Games are rated and impact players ratings
        position:
          description: "Custom initial position (in FEN) for all games of the tournament.\
            \ Must be a legal chess position. Only works with standard chess, not\
            \ variants (except Chess960)."
        berserkable:
          default: true
          description: Whether the players can use berserk. Only allowed if clockIncrement
            <= clockTime * 2
        streakable:
          default: true
          description: "After 2 wins, consecutive wins grant 4 points instead of 2."
        hasChat:
          default: true
          description: Whether the players can discuss in a chat
        description:
          description: Anything you want to tell players about the tournament
        password:
          description: |
            Make the tournament private, and restrict access with a password.
            You can also [generate user-specific entry codes](https://github.com/lichess-org/api/tree/master/example/tournament-entry-code)
            based on this password.
        teamBattleByTeam:
          description: |
            Set the ID of a team you lead to create a team battle.
            The other teams can be added using the [team battle edit endpoint](#operation/apiTournamentTeamBattlePost).
        conditions.teamMember.teamId:
          description: |
            Restrict entry to members of a team.

            The teamId is the last part of a team URL, e.g. `https://lichess.org/team/coders` has teamId = `coders`.

            Leave empty to let everyone join the tournament.

            Do not use this to create team battles, use `teamBattleByTeam` instead.
        conditions.minRating.rating:
          description: Minimum rating to join. Leave empty to let everyone join the
            tournament.
          enum:
          - 1000
          - 1100
          - 1200
          - 1300
          - 1400
          - 1500
          - 1600
          - 1700
          - 1800
          - 1900
          - 2000
          - 2100
          - 2200
          - 2300
          - 2400
          - 2500
          - 2600
        conditions.maxRating.rating:
          description: Maximum rating to join. Based on best rating reached in the
            last 7 days. Leave empty to let everyone join the tournament.
          enum:
          - 2200
          - 2100
          - 2000
          - 1900
          - 1800
          - 1700
          - 1600
          - 1500
          - 1400
          - 1300
          - 1200
          - 1100
          - 1000
          - 900
          - 800
        conditions.nbRatedGame.nb:
          description: Minimum number of rated games required to join.
          enum:
          - 0
          - 5
          - 10
          - 15
          - 20
          - 30
          - 40
          - 50
          - 75
          - 100
          - 150
          - 200
        conditions.allowList:
          description: |
            Predefined list of usernames that are allowed to join, separated by commas.
            If this list is non-empty, then usernames absent from this list will be forbidden to join.
            Adding `%titled` to the list additionally allows any titled player to join.
            Example: `thibault,german11,%titled`
      required:
      - clockIncrement
      - clockTime
      - minutes
    apiTournamentUpdate_request:
      properties:
        name:
          description: The tournament name. Leave empty to get a random Grandmaster
            name
          maxLength: 30
          minLength: 2
        clockTime:
          description: Clock initial time in minutes
          enum:
          - 0
          - 0.25
          - 0.5
          - 0.75
          - 1
          - 1.5
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 10
          - 15
          - 20
          - 25
          - 30
          - 40
          - 50
          - 60
          example: 2
        clockIncrement:
          description: Clock increment in seconds
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 10
          - 15
          - 20
          - 25
          - 30
          - 40
          - 50
          - 60
          example: 1
        minutes:
          description: "How long the tournament lasts, in minutes"
          enum:
          - 20
          - 25
          - 30
          - 35
          - 40
          - 45
          - 50
          - 55
          - 60
          - 70
          - 80
          - 90
          - 100
          - 110
          - 120
          - 150
          - 180
          - 210
          - 240
          - 270
          - 300
          - 330
          - 360
          - 420
          - 480
          - 540
          - 600
          - 720
          example: 60
        waitMinutes:
          default: 5
          description: "How long to wait before starting the tournament, from now,\
            \ in minutes"
          enum:
          - 1
          - 2
          - 3
          - 5
          - 10
          - 15
          - 20
          - 30
          - 45
          - 60
        startDate:
          description: Timestamp (in milliseconds) to start the tournament at a given
            date and time. Overrides the `waitMinutes` setting
        variant:
          $ref: '#/components/schemas/VariantKey'
        rated:
          default: true
          description: Games are rated and impact players ratings
        position:
          description: "Custom initial position (in FEN) for all games of the tournament.\
            \ Must be a legal chess position. Only works with standard chess, not\
            \ variants (except Chess960)."
        berserkable:
          default: true
          description: Whether the players can use berserk. Only allowed if clockIncrement
            <= clockTime * 2
        streakable:
          default: true
          description: "After 2 wins, consecutive wins grant 4 points instead of 2."
        hasChat:
          default: true
          description: Whether the players can discuss in a chat
        description:
          description: Anything you want to tell players about the tournament
        password:
          description: "Make the tournament private, and restrict access with a password"
        conditions.minRating.rating:
          description: Minimum rating to join. Leave empty to let everyone join the
            tournament.
          enum:
          - 1000
          - 1100
          - 1200
          - 1300
          - 1400
          - 1500
          - 1600
          - 1700
          - 1800
          - 1900
          - 2000
          - 2100
          - 2200
          - 2300
          - 2400
          - 2500
          - 2600
        conditions.maxRating.rating:
          description: Maximum rating to join. Based on best rating reached in the
            last 7 days. Leave empty to let everyone join the tournament.
          enum:
          - 2200
          - 2100
          - 2000
          - 1900
          - 1800
          - 1700
          - 1600
          - 1500
          - 1400
          - 1300
          - 1200
          - 1100
          - 1000
          - 900
          - 800
        conditions.nbRatedGame.nb:
          description: Minimum number of rated games required to join.
          enum:
          - 0
          - 5
          - 10
          - 15
          - 20
          - 30
          - 40
          - 50
          - 75
          - 100
          - 150
          - 200
        conditions.allowList:
          description: |
            Predefined list of usernames that are allowed to join, separated by commas.
            If this list is non-empty, then usernames absent from this list will be forbidden to join.
            Adding `%titled` to the list additionally allows any titled player to join.
            Example: `thibault,german11,%titled`
      required:
      - clockIncrement
      - clockTime
      - minutes
    apiTournamentJoin_request:
      properties:
        password:
          description: |
            The tournament password, if one is required.
            Can also be a [user-specific entry code](https://github.com/lichess-org/api/tree/master/example/tournament-entry-code)
            generated and shared by the organizer.
        team:
          description: "The team to join the tournament with, for team battle tournaments"
        pairMeAsap:
          default: false
          description: |
            If the tournament is started, attempt to pair the user,
            even if they are not connected to the tournament page.
            This expires after one minute, to avoid pairing a user who is long gone.
            You may call "join" again to extend the waiting.
    apiTournamentTeamBattlePost_request:
      properties:
        teams:
          description: |
            All team IDs of the team battle, separated by commas.
            Make sure to always send the full list.
            Teams that are not in the list will be removed from the team battle.

            Example: `coders,zhigalko_sergei-fan-club,hhSwTKZv`
        nbLeaders:
          description: Number team leaders per team.
      required:
      - nbLeaders
      - teams
    apiSwissNew_request:
      properties:
        name:
          description: The tournament name. Leave empty to get a random Grandmaster
            name
          maxLength: 30
          minLength: 2
        clock.limit:
          description: Clock initial time in seconds
          enum:
          - 0
          - 15
          - 30
          - 45
          - 60
          - 90
          - 120
          - 180
          - 240
          - 300
          - 360
          - 420
          - 480
          - 600
          - 900
          - 1200
          - 1500
          - 1800
          - 2400
          - 3000
          - 3600
          - 4200
          - 4800
          - 5400
          - 6000
          - 6600
          - 7200
          - 7800
          - 8400
          - 9000
          - 9600
          - 10200
          - 10800
          example: 300
        clock.increment:
          description: Clock increment in seconds
          example: 1
          maximum: 120
          minimum: 0
        nbRounds:
          description: Maximum number of rounds to play
          maximum: 100
          minimum: 3
        startsAt:
          description: "Timestamp in milliseconds to start the tournament at a given\
            \ date and time. By default, it starts 10 minutes after creation."
        roundInterval:
          description: |
            How long to wait between each round, in seconds.

            Set to 99999999 to manually schedule each round from the tournament UI.

            If empty or -1, a sensible value is picked automatically.
          enum:
          - -1
          - 5
          - 10
          - 20
          - 30
          - 45
          - 60
          - 120
          - 180
          - 300
          - 600
          - 900
          - 1200
          - 1800
          - 2700
          - 3600
          - 86400
          - 172800
          - 604800
          - 99999999
        variant:
          $ref: '#/components/schemas/VariantKey'
        description:
          description: Anything you want to tell players about the tournament
        rated:
          default: true
          description: Games are rated and impact players ratings
        password:
          description: Make the tournament private and restrict access with a password.
        forbiddenPairings:
          description: |
            Usernames of players that must not play together.

            Two usernames per line, separated by a space.
        manualPairings:
          description: |
            Manual pairings for the next round.

            Two usernames per line, separated by a space.
            Present players without a valid pairing will be given a bye, which is worth 1 point.
            Forfeited players will get 0 points.
        chatFor:
          default: 20
          description: |
            Who can read and write in the chat.
            - 0  = No-one
            - 10 = Only team leaders
            - 20 = Only team members
            - 30 = All Lichess players
        conditions.minRating.rating:
          description: Minimum rating to join. Leave empty to let everyone join the
            tournament.
          enum:
          - 1000
          - 1100
          - 1200
          - 1300
          - 1400
          - 1500
          - 1600
          - 1700
          - 1800
          - 1900
          - 2000
          - 2100
          - 2200
          - 2300
          - 2400
          - 2500
          - 2600
        conditions.maxRating.rating:
          description: Maximum rating to join. Based on best rating reached in the
            last 7 days. Leave empty to let everyone join the tournament.
          enum:
          - 2200
          - 2100
          - 2000
          - 1900
          - 1800
          - 1700
          - 1600
          - 1500
          - 1400
          - 1300
          - 1200
          - 1100
          - 1000
          - 900
          - 800
        conditions.nbRatedGame.nb:
          description: Minimum number of rated games required to join.
          minimum: 0
          maximun: 200
        conditions.allowList:
          description: |
            Predefined list of usernames that are allowed to join, separated by commas.
            If this list is non-empty, then usernames absent from this list will be forbidden to join.
            Adding `%titled` to the list additionally allows any titled player to join.
            Example: `thibault,german11,%titled`
      required:
      - clock.increment
      - clock.limit
      - nbRounds
    apiSwissJoin_request:
      properties:
        password:
          description: "The tournament password, if one is required"
    broadcastTourCreate_request:
      properties:
        name:
          description: |
            Name of the broadcast tournament. Length must be between 3 and 80 characters.

            Example: `Sinquefield Cup`
        description:
          description: |
            Short description of the broadcast tournament. Length must be between 3 and 400 characters.

            Example: `An 11 round classical tournament featuring the 9 highest rated players in the world. Including Carlsen, Caruana, Ding, Aronian, Nakamura and more.`
        markdown:
          description: "Optional long description of the broadcast. Markdown is supported.\
            \ Length must be less than 20,000 characters."
        official:
          description: "For Lichess internal usage only. You are not allowed to use\
            \ this flag. If you do it, we will have to call the police."
      required:
      - description
      - name
    broadcastTourUpdate_request:
      properties:
        name:
          description: |
            Name of the broadcast tournament. Length must be between 3 and 80 characters.

            Example: `Sinquefield Cup`
        description:
          description: |
            Short description of the broadcast tournament. Length must be between 3 and 400 characters.

            Example: `An 11 round classical tournament featuring the 9 highest rated players in the world. Including Carlsen, Caruana, Ding, Aronian, Nakamura and more.`
        markdown:
          description: "Optional long description of the broadcast tournament. Markdown\
            \ is supported. Length must be less than 20,000 characters."
        official:
          description: "For Lichess internal usage only. You are not allowed to use\
            \ this flag. If you do it, we will have to call the police."
      required:
      - description
      - name
    broadcastRoundCreate_request:
      properties:
        name:
          description: |
            Name of the broadcast round. Length must be between 3 and 80 characters.

            Example: `Round 1`
        syncUrl:
          description: |
            URL that Lichess will poll to get updates about the games. It must be publicly accessible from the Internet.

            Example: `https://myserver.org/myevent/round-10/games.pgn`

            If the syncUrl is missing, then the broadcast needs to be fed by [pushing PGN to it](#operation/broadcastPush).
        startsAt:
          description: |
            Timestamp in milliseconds of broadcast round start. Leave empty to manually start the broadcast round.

            Example: `1356998400070`
          minimum: 1356998400070
      required:
      - name
    broadcastRoundUpdate_request:
      properties:
        name:
          description: |
            Name of the broadcast round. Length must be between 3 and 80 characters.

            Example: `Round 10`
        syncUrl:
          description: |
            URL that Lichess will poll to get updates about the games. It must be publicly accessible from the Internet.

            Example: `https://myserver.org/myevent/round-10/games.pgn`
        startsAt:
          description: |
            Timestamp in milliseconds of broadcast start. Leave empty to manually start the broadcast.

            Example: `1356998400070`
          minimum: 1356998400070
      required:
      - name
    teamAll_200_response:
      example:
        maxPerPage: 15
        previousPage: 3
        nextPage: 5
        currentPage: 4
        currentPageResults:
        - leader:
            patron: true
            name: Chess-Network
            id: chess-network
            title: ""
          nbMembers: 3129
          name: Coders
          description: "There are 10 kinds of people in the world: those who understand\
            \ binary, and the others.\r\n\r\nIf you want to join the team, prove (briefly)\
            \ that you can code in the request message!"
          leaders: ""
          location: Planet Earth
          id: coders
          open: false
        - leader:
            patron: true
            name: Chess-Network
            id: chess-network
            title: ""
          nbMembers: 3129
          name: Coders
          description: "There are 10 kinds of people in the world: those who understand\
            \ binary, and the others.\r\n\r\nIf you want to join the team, prove (briefly)\
            \ that you can code in the request message!"
          leaders: ""
          location: Planet Earth
          id: coders
          open: false
        nbResults: 205194
        nbPages: 13680
      properties:
        currentPage:
          example: 4
        maxPerPage:
          example: 15
        currentPageResults:
          items:
            $ref: '#/components/schemas/Team'
          type: array
        nbResults:
          example: 205194
        previousPage:
          example: 3
        nextPage:
          example: 5
        nbPages:
          example: 13680
    teamIdJoin_request:
      properties:
        message:
          description: "Optional request message, if the team requires one."
        password:
          description: "Optional password, if the team requires one."
    teamIdPmAll_request:
      properties:
        message:
          description: The message to send to all your team members.
    apiBoardSeek_request:
      properties:
        rated:
          default: false
          description: Whether the game is rated and impacts players ratings.
          example: true
        time:
          description: Clock initial time in minutes. Required for real-time seeks.
          example: 15
          maximum: 180
          minimum: 0
        increment:
          description: Clock increment in seconds. Required for real-time seeks.
          example: 15
          maximum: 180
          minimum: 0
        days:
          description: Days per turn. Required for correspondence seeks.
          enum:
          - 1
          - 2
          - 3
          - 5
          - 7
          - 10
          - 14
        variant:
          $ref: '#/components/schemas/VariantKey'
        color:
          default: random
          description: The color to play. Better left empty to automatically get 50%
            white.
          enum:
          - random
          - white
          - black
        ratingRange:
          description: |
            The rating range of potential opponents. Better left empty.
            Example: 1500-1800
    boardGameChatPost_request:
      properties:
        room:
          enum:
          - player
          - spectator
        text:
          example: Thank you for the game!
      required:
      - room
      - text
    challengeList_200_response:
      example:
        in:
        - id: VU0nyvsW
          url: https://lichess.org/VU0nyvsW
          color: random
          direction: out
          timeControl:
            increment: 2
            limit: 300
            show: 5+2
            type: clock
          variant:
            key: standard
            name: Standard
            short: Std
          challenger:
            id: thibot
            name: thibot
            online: true
            provisional: false
            rating: 1940
            title: BOT
          destUser:
            id: leelachess
            name: LeelaChess
            online: true
            provisional: true
            rating: 2670
            title: BOT
          perf:
            icon: ;
            name: Correspondence
          rated: true
          speed: blitz
          status: created
        - id: VU0nyvsW
          url: https://lichess.org/VU0nyvsW
          color: random
          direction: out
          timeControl:
            increment: 2
            limit: 300
            show: 5+2
            type: clock
          variant:
            key: standard
            name: Standard
            short: Std
          challenger:
            id: thibot
            name: thibot
            online: true
            provisional: false
            rating: 1940
            title: BOT
          destUser:
            id: leelachess
            name: LeelaChess
            online: true
            provisional: true
            rating: 2670
            title: BOT
          perf:
            icon: ;
            name: Correspondence
          rated: true
          speed: blitz
          status: created
        out:
        - id: VU0nyvsW
          url: https://lichess.org/VU0nyvsW
          color: random
          direction: out
          timeControl:
            increment: 2
            limit: 300
            show: 5+2
            type: clock
          variant:
            key: standard
            name: Standard
            short: Std
          challenger:
            id: thibot
            name: thibot
            online: true
            provisional: false
            rating: 1940
            title: BOT
          destUser:
            id: leelachess
            name: LeelaChess
            online: true
            provisional: true
            rating: 2670
            title: BOT
          perf:
            icon: ;
            name: Correspondence
          rated: true
          speed: blitz
          status: created
        - id: VU0nyvsW
          url: https://lichess.org/VU0nyvsW
          color: random
          direction: out
          timeControl:
            increment: 2
            limit: 300
            show: 5+2
            type: clock
          variant:
            key: standard
            name: Standard
            short: Std
          challenger:
            id: thibot
            name: thibot
            online: true
            provisional: false
            rating: 1940
            title: BOT
          destUser:
            id: leelachess
            name: LeelaChess
            online: true
            provisional: true
            rating: 2670
            title: BOT
          perf:
            icon: ;
            name: Correspondence
          rated: true
          speed: blitz
          status: created
      properties:
        in:
          description: Incoming challenges i.e. targeted at you
          items:
            $ref: '#/components/schemas/ChallengeJson'
          type: array
        out:
          description: Outgoing challenges i.e. created by you
          items:
            $ref: '#/components/schemas/ChallengeJson'
          type: array
    challengeCreate_request:
      properties:
        rated:
          default: false
          description: Game is rated and impacts players ratings
        clock.limit:
          description: "Clock initial time in seconds. If empty, a correspondence\
            \ game is created."
          example: 300
          maximum: 10800
          minimum: 0
        clock.increment:
          description: "Clock increment in seconds. If empty, a correspondence game\
            \ is created."
          example: 1
          maximum: 60
          minimum: 0
        days:
          description: "Days per move, for correspondence games. Clock settings must\
            \ be omitted."
          enum:
          - 1
          - 2
          - 3
          - 5
          - 7
          - 10
          - 14
        color:
          default: random
          description: Which color you get to play
          enum:
          - random
          - white
          - black
        variant:
          $ref: '#/components/schemas/VariantKey'
        fen:
          default: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
          description: "Custom initial position (in FEN). Variant must be standard,\
            \ fromPosition, or chess960 (if a valid 960 starting position), and the\
            \ game cannot be rated. Castling moves will use UCI_Chess960 notation,\
            \ for example e1h1 instead of e1g1."
        keepAliveStream:
          description: |
            If set, the response is streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
            The challenge is kept alive until the connection is closed by the client.
            When the challenge is accepted, declined or canceled, a message of the form `{"done":"accepted"}` is sent,
            then the connection is closed by the server.
            If not set, the response is not streamed, and the challenge expires after 20s if not accepted.
        acceptByToken:
          description: |
            Immediately accept the challenge and create the game.
            Pass in an OAuth token (with the `challenge:write` scope) for the receiving user.
            On success, the response will contain a `game` field instead of a `challenge` field.

            Alternatively, consider the [bulk pairing API](#operation/bulkPairingCreate).
        message:
          default: "Your game with {opponent} is ready: {game}."
          description: |
            **Only if `acceptByToken` is set.**

            Message that is sent to each player, when the game is created. It is sent from your user account.

            `{opponent}`, `{player}` and `{game}` are placeholders that will be replaced with the opponent name, player name, and the game URLs.

            You can omit this field to send the default message,
            but if you set your own message, it must at least contain the `{game}` placeholder.
        rules:
          description: |
            Extra game rules separated by commas.
            Example: `noAbort,noRematch`
          enum:
          - noAbort
          - noRematch
          - noGiveTime
          - noClaimWin
    challengeDecline_request:
      properties:
        reason:
          description: "Reason challenge was declined. It will be translated to the\
            \ player's language. See [the full list in the translation file](https://github.com/ornicar/lila/blob/master/translation/source/challenge.xml#L14)."
          enum:
          - generic
          - later
          - tooFast
          - tooSlow
          - timeControl
          - rated
          - casual
          - standard
          - variant
          - noBot
          - onlyBot
    challengeAi_request:
      properties:
        level:
          description: AI strength
          maximum: 8
          minimum: 1
        clock.limit:
          description: "Clock initial time in seconds. If empty, a correspondence\
            \ game is created."
          example: 300
          maximum: 10800
          minimum: 0
        clock.increment:
          description: "Clock increment in seconds. If empty, a correspondence game\
            \ is created."
          example: 1
          maximum: 60
          minimum: 0
        days:
          description: "Days per move, for correspondence games. Clock settings must\
            \ be omitted."
          enum:
          - 1
          - 2
          - 3
          - 5
          - 7
          - 10
          - 14
        color:
          default: random
          description: Which color you get to play
          enum:
          - random
          - white
          - black
        variant:
          $ref: '#/components/schemas/VariantKey'
        fen:
          default: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
          description: "Custom initial position (in FEN). Variant must be standard,\
            \ fromPosition, or chess960 (if a valid 960 starting position), and the\
            \ game cannot be rated."
    challengeOpen_request:
      properties:
        rated:
          default: false
          description: Game is rated and impacts players ratings
        clock.limit:
          description: "Clock initial time in seconds. If empty, a correspondence\
            \ game is created."
          example: 300
          maximum: 10800
          minimum: 0
        clock.increment:
          description: "Clock increment in seconds. If empty, a correspondence game\
            \ is created."
          example: 1
          maximum: 60
          minimum: 0
        days:
          description: Days per turn. For correspondence challenges.
          enum:
          - 1
          - 2
          - 3
          - 5
          - 7
          - 10
          - 14
        variant:
          $ref: '#/components/schemas/VariantKey'
        fen:
          default: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
          description: "Custom initial position (in FEN). Variant must be standard,\
            \ fromPosition, or chess960 (if a valid 960 starting position), and the\
            \ game cannot be rated."
        name:
          description: "Optional name for the challenge, that players will see on\
            \ the challenge page."
        rules:
          description: |
            Extra game rules separated by commas.
            Example: `noAbort,noRematch`
          enum:
          - noAbort
          - noRematch
          - noGiveTime
          - noClaimWin
        users:
          description: |
            Optional pair of usernames, separated by a comma.
            If set, only these users will be allowed to join the game.
            The first username gets the white pieces.
            Example: `Username1,Username2`
    bulkPairingCreate_request:
      properties:
        players:
          description: |
            OAuth tokens of all the players to pair, with the syntax `tokenOfWhitePlayerInGame1:tokenOfBlackPlayerInGame1,tokenOfWhitePlayerInGame2:tokenOfBlackPlayerInGame2,...`.

            The 2 tokens of the players of a game are separated with `:`. The first token gets the white pieces. Games are separated with `,`.

            Up to 1000 tokens can be sent, for a max of 500 games.

            Each token must be included at most once.

            Example: `token1:token2,token3:token4,token5:token6`
        clock.limit:
          description: |
            Clock initial time in seconds. Example: `600`
          maximum: 10800
          minimum: 0
        clock.increment:
          description: |
            Clock increment in seconds. Example: `2`
          maximum: 60
          minimum: 0
        days:
          description: Days per turn. For correspondence games only.
          enum:
          - 1
          - 2
          - 3
          - 5
          - 7
          - 10
          - 14
        pairAt:
          description: |
            Date at which the games will be created as a Unix timestamp in milliseconds.
            Up to 24h in the future.
            Omit, or set to current date and time, to start the games immediately.
            Example: `1612289869919`
        startClocksAt:
          description: |
            Date at which the clocks will be automatically started as a Unix timestamp in milliseconds.
            Up to 24h in the future.
            Note that the clocks can start earlier than specified, if players start making moves in the game.
            If omitted, the clocks will not start automatically.
            Example: `1612289869919`
        rated:
          default: false
          description: Game is rated and impacts players ratings
        variant:
          $ref: '#/components/schemas/VariantKey'
        fen:
          default: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
          description: "Custom initial position (in FEN). Variant must be standard,\
            \ fromPosition, or chess960 (if a valid 960 starting position), and the\
            \ game cannot be rated."
        message:
          default: "Your game with {opponent} is ready: {game}."
          description: |
            Message that will be sent to each player, when the game is created.  It is sent from your user account.

            `{opponent}` and `{game}` are placeholders that will be replaced with the opponent and the game URLs.

            You can omit this field to send the default message,
            but if you set your own message, it must at least contain the `{game}` placeholder.
        rules:
          description: |
            Extra game rules separated by commas.
            Example: `noAbort,noRematch`
          enum:
          - noAbort
          - noRematch
          - noGiveTime
          - noClaimWin
    adminChallengeTokens_request:
      properties:
        users:
          description: Usernames separated with commas
          example: "thibault,neio,lizen2,lizen3"
        description:
          description: User visible description of the token
          example: FIDE tournament XYZ
      required:
      - description
      - users
    inboxUsername_request:
      properties:
        text:
          example: Thank you for the game!
      required:
      - text
    apiExternalEngineAnalyse_request:
      properties:
        clientSecret:
          example: ees_mdF2hK0hlKGSPeC6
        work:
          $ref: '#/components/schemas/ExternalEngineWork'
      required:
      - clientSecret
      - work
    apiExternalEngineAnalyse_200_response_pvs_inner:
      properties:
        depth:
          description: Current search depth of the pv
          example: 25
          minimum: 0
        cp:
          description: "Evaluation in centi-pawns, from White's point of view"
          example: 40
        mate:
          description: "Evaluation in signed moves to mate, from White's point of\
            \ view"
        moves:
          description: Variation in UCI notation
          example:
          - e2e4
          - c7c6
          - g1f3
          - d7d5
          - d2d3
          - d5e4
          items: {}
          type: array
      required:
      - depth
      - moves
    apiExternalEngineAnalyse_200_response:
      properties:
        time:
          description: Number of milliseconds the search has been going on
          example: 6880
          minimum: 0
        depth:
          description: Current search depth
          example: 25
          minimum: 0
        nodes:
          description: Number of nodes visited so far
          example: 7230340
          minimum: 0
        pvs:
          description: "Information about up to 5 pvs, with the primary pv at index\
            \ 0."
          items:
            $ref: '#/components/schemas/apiExternalEngineAnalyse_200_response_pvs_inner'
          type: array
      required:
      - depth
      - nodes
      - pvs
      - time
    apiExternalEngineAcquire_request:
      properties:
        providerSecret:
          example: Dee3uwieZei9ahpaici9bee2yahsai0K
      required:
      - secret
    apiExternalEngineAcquire_200_response:
      example:
        engine:
          providerData: ""
          name: Stockfish 15
          maxHash: 2048
          defaultDepth: 24
          clientSecret: ees_mdF2hK0hlKGSPeC6
          id: eei_aTKImBJOnv6j
          variants:
          - chess
          maxThreads: 8
          userId: thibault
        work:
          initialFen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
          infinite: false
          moves:
          - e2e4
          - g8f6
          variant: chess
          threads: 4
          multiPv: 1
          sessionId: abcd1234
          hash: 128
        id: aingoohiJee2sius
      properties:
        id:
          example: aingoohiJee2sius
        work:
          $ref: '#/components/schemas/ExternalEngineWork'
        engine:
          $ref: '#/components/schemas/ExternalEngine'
      required:
      - engine
      - id
      - work
    apiToken_request:
      properties:
        grant_type:
          description: Must be `authorization_code`.
          example: authorization_code
        code:
          description: The authorization code that was sent in the `code` parameter
            to your `redirect_uri`.
          example: liu_iS1uOZg99Htmo58ex2jKgYziUfzsnAl0
        code_verifier:
          description: A `code_challenge` was used to request the authorization code.
            This must be the `code_verifier` it was derived from.
          example: Ry1rbGdOMTQtUjhOc0lmTnFKak1LTHV0NjlRMll2aXYtTThkQnlJRkRpaGwyQjh0ZDNFdzFPSG9KUlY4M1NrRzJ5ZHhUdjVZR08zLTZOT3dCN2xLfjZOXzU2WHk4SENP
        redirect_uri:
          description: Must match the `redirect_uri` used to request the authorization
            code.
          example: http://example.com/
        client_id:
          description: Must match the `client_id` used to request the authorization
            code.
          example: example.com
    ChallengeJson_perf:
      properties:
        icon: {}
        name: {}
    GameUser_analysis:
      properties:
        inaccuracy: {}
        mistake: {}
        blunder: {}
        acpl: {}
      required:
      - acpl
      - blunder
      - inaccuracy
      - mistake
    GameJson_players:
      properties:
        white:
          $ref: '#/components/schemas/GameUser'
        black:
          $ref: '#/components/schemas/GameUser'
    GameJson_opening:
      properties:
        eco: {}
        name: {}
        ply: {}
    GameJson_clock:
      properties:
        initial: {}
        increment: {}
        totalTime: {}
    GameFullEvent_perf:
      properties:
        name:
          description: Translated perf name (e.g. "Classical" or "Blitz")
    GameEventInfo_compat:
      properties:
        bot: {}
        board: {}
  securitySchemes:
    OAuth2:
      description: |
        ### Which authentication method is right for me?
        [Read about the Lichess API authentication methods and code examples](https://github.com/lichess-org/api/blob/master/example/README.md)

        ### Personal Access Token
        Personal API access tokens allow you to quickly interact with Lichess API without going through an OAuth flow.
        - [Generate a personal access token](https://lichess.org/account/oauth/token)
        - `curl https://lichess.org/api/account -H "Authorization: Bearer {token}"`
        - [NodeJS example](https://github.com/lichess-org/api/tree/master/example/oauth-personal-token)

        ### Authorization Code Flow with PKCE
        The authorization code flow with PKCE allows your users to **login with Lichess**.
        Lichess supports unregistered and public clients (no client authentication, choose any unique client id).
        The only accepted code challenge method is `S256`.
        Access tokens are long-lived (expect one year), unless they are revoked.
        Refresh tokens are not supported.

        See the [documentation for the OAuth endpoints](#tag/OAuth) or
        the [PKCE RFC](https://datatracker.ietf.org/doc/html/rfc7636#section-4) for a precise protocol description.

        - [Demo app](https://lichess-org.github.io/api-demo/)
        - [Minimal client-side example](https://github.com/lichess-org/api/tree/master/example/oauth-app)
        - [Flask/Python example](https://github.com/lakinwecker/lichess-oauth-flask)
        - [Java example](https://github.com/tors42/lichess-oauth-pkce-app)
        - [NodeJS Passport strategy to login with Lichess OAuth2](https://www.npmjs.com/package/passport-lichess)

        #### Real life examples
        - [PyChess](https://github.com/gbtami/pychess-variants) ([source code](https://github.com/gbtami/pychess-variants))
        - [Lichess4545](https://www.lichess4545.com/) ([source code](https://github.com/cyanfish/heltour))
        - [English Chess Federation](https://ecf.octoknight.com/)
        - [Rotherham Online Chess](https://rotherhamonlinechess.azurewebsites.net/tournaments)

        ### Token format
        Access tokens and authorization codes match `^[A-Za-z0-9_]+$`.
        The length of tokens can be increased without notice. Make sure your application can handle at least 512 characters.
        By convention tokens have a recognizable prefix, but do not rely on this.
      flows:
        authorizationCode:
          authorizationUrl: https://lichess.org/oauth
          scopes:
            preference:read: Read your preferences
            preference:write: Write your preferences
            email:read: Read your email address
            challenge:read: Read incoming challenges
            challenge:write: "Create, accept, decline challenges"
            challenge:bulk: "Create, delete, query bulk pairings"
            study:read: Read private studies and broadcasts
            study:write: "Create, update, delete studies and broadcasts"
            tournament:write: Create tournaments
            racer:write: Create and join puzzle races
            puzzle:read: Read puzzle activity
            team:read: Read private team information
            team:write: "Join, leave teams"
            team:lead: "Manage teams (kick members, send PMs)"
            follow:read: Read followed players
            follow:write: Follow and unfollow other players
            msg:write: Send private messages to other players
            board:play: Play with the Board API
            bot:play: "Play with the Bot API. Only for [Bot accounts](#operation/botAccountUpgrade)"
            web:mod: Use moderator tools (within the bounds of your permissions)
          tokenUrl: https://lichess.org/api/token
      type: oauth2
