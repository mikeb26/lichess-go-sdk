/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// OAuthApiService OAuthApi service
type OAuthApiService service

type ApiApiTokenRequest struct {
	ctx context.Context
	ApiService *OAuthApiService
	grantType *interface{}
	code *interface{}
	codeVerifier *interface{}
	redirectUri *interface{}
	clientId *interface{}
}

// Must be &#x60;authorization_code&#x60;.
func (r ApiApiTokenRequest) GrantType(grantType interface{}) ApiApiTokenRequest {
	r.grantType = &grantType
	return r
}

// The authorization code that was sent in the &#x60;code&#x60; parameter to your &#x60;redirect_uri&#x60;.
func (r ApiApiTokenRequest) Code(code interface{}) ApiApiTokenRequest {
	r.code = &code
	return r
}

// A &#x60;code_challenge&#x60; was used to request the authorization code. This must be the &#x60;code_verifier&#x60; it was derived from.
func (r ApiApiTokenRequest) CodeVerifier(codeVerifier interface{}) ApiApiTokenRequest {
	r.codeVerifier = &codeVerifier
	return r
}

// Must match the &#x60;redirect_uri&#x60; used to request the authorization code.
func (r ApiApiTokenRequest) RedirectUri(redirectUri interface{}) ApiApiTokenRequest {
	r.redirectUri = &redirectUri
	return r
}

// Must match the &#x60;client_id&#x60; used to request the authorization code.
func (r ApiApiTokenRequest) ClientId(clientId interface{}) ApiApiTokenRequest {
	r.clientId = &clientId
	return r
}

func (r ApiApiTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiTokenExecute(r)
}

/*
ApiToken Obtain access token

OAuth2 token endpoint. Exchanges an authorization code for an access token.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiTokenRequest
*/
func (a *OAuthApiService) ApiToken(ctx context.Context) ApiApiTokenRequest {
	return ApiApiTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *OAuthApiService) ApiTokenExecute(r ApiApiTokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OAuthApiService.ApiToken")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.grantType != nil {
		localVarFormParams.Add("grant_type", parameterToString(*r.grantType, ""))
	}
	if r.code != nil {
		localVarFormParams.Add("code", parameterToString(*r.code, ""))
	}
	if r.codeVerifier != nil {
		localVarFormParams.Add("code_verifier", parameterToString(*r.codeVerifier, ""))
	}
	if r.redirectUri != nil {
		localVarFormParams.Add("redirect_uri", parameterToString(*r.redirectUri, ""))
	}
	if r.clientId != nil {
		localVarFormParams.Add("client_id", parameterToString(*r.clientId, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v OAuthError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiTokenDeleteRequest struct {
	ctx context.Context
	ApiService *OAuthApiService
}

func (r ApiApiTokenDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiTokenDeleteExecute(r)
}

/*
ApiTokenDelete Revoke access token

Revokes the access token sent as Bearer for this request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiTokenDeleteRequest
*/
func (a *OAuthApiService) ApiTokenDelete(ctx context.Context) ApiApiTokenDeleteRequest {
	return ApiApiTokenDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *OAuthApiService) ApiTokenDeleteExecute(r ApiApiTokenDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OAuthApiService.ApiTokenDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOauthRequest struct {
	ctx context.Context
	ApiService *OAuthApiService
	responseType *interface{}
	clientId *interface{}
	redirectUri *interface{}
	codeChallengeMethod *interface{}
	codeChallenge *interface{}
	scope *interface{}
	username *interface{}
	state *interface{}
}

// Must be &#x60;code&#x60;.
func (r ApiOauthRequest) ResponseType(responseType interface{}) ApiOauthRequest {
	r.responseType = &responseType
	return r
}

// Arbitrary identifier that uniquely identifies your application.
func (r ApiOauthRequest) ClientId(clientId interface{}) ApiOauthRequest {
	r.clientId = &clientId
	return r
}

// The absolute URL that the user should be redirected to with the authorization result.
func (r ApiOauthRequest) RedirectUri(redirectUri interface{}) ApiOauthRequest {
	r.redirectUri = &redirectUri
	return r
}

// Must be &#x60;S256&#x60;.
func (r ApiOauthRequest) CodeChallengeMethod(codeChallengeMethod interface{}) ApiOauthRequest {
	r.codeChallengeMethod = &codeChallengeMethod
	return r
}

// Compute &#x60;BASE64URL(SHA256(code_verifier))&#x60;.
func (r ApiOauthRequest) CodeChallenge(codeChallenge interface{}) ApiOauthRequest {
	r.codeChallenge = &codeChallenge
	return r
}

// Space separated list of requested OAuth scopes, if any.
func (r ApiOauthRequest) Scope(scope interface{}) ApiOauthRequest {
	r.scope = &scope
	return r
}

// Hint that you want the user to log in with a specific Lichess username.
func (r ApiOauthRequest) Username(username interface{}) ApiOauthRequest {
	r.username = &username
	return r
}

// Arbitrary state that will be returned verbatim with the authorization result.
func (r ApiOauthRequest) State(state interface{}) ApiOauthRequest {
	r.state = &state
	return r
}

func (r ApiOauthRequest) Execute() (*http.Response, error) {
	return r.ApiService.OauthExecute(r)
}

/*
Oauth Request authorization code

OAuth2 authorization endpoint.

Start the OAuth2 Authorization Code Flow with PKCE by securely
generating two random strings unique to each authorization
request:
* `code_verifier`
* `state`

Store these in session storage. Make sure not to reveal `code_verifier`
to eavesdroppers. Do not show it in URLs, do not abuse `state` to store
it, do not send it over insecure connections. However it is fine if
the user themselves can extract `code_verifier`, which will always be
possible for fully client-side apps.

Then send the user to this endpoint. They will be prompted to grant
authorization and then be redirected back to the given `redirect_uri`.

If the authorization failed, the following query string parameters will
be appended to the redirection:
* `error`, in particular with value `access_denied` if the user
   cancelled authorization
* `error_description` to aid debugging
* `state`, exactly as passed in the `state` parameter

If the authorization succeeded, the following query string parameters
will be appended to the redirection:
* `code`, containing a fresh short-lived authorization code
* `state`, exactly as passed in the `state` parameter

Next, to defend against cross site request forgery, check that the
returned `state` matches the `state` you originally generated.

Finally, continue by using the authorization code to
[obtain an access token](#operation/apiToken).


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOauthRequest
*/
func (a *OAuthApiService) Oauth(ctx context.Context) ApiOauthRequest {
	return ApiOauthRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *OAuthApiService) OauthExecute(r ApiOauthRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OAuthApiService.Oauth")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.responseType == nil {
		return nil, reportError("responseType is required and must be specified")
	}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}
	if r.redirectUri == nil {
		return nil, reportError("redirectUri is required and must be specified")
	}
	if r.codeChallengeMethod == nil {
		return nil, reportError("codeChallengeMethod is required and must be specified")
	}
	if r.codeChallenge == nil {
		return nil, reportError("codeChallenge is required and must be specified")
	}

	localVarQueryParams.Add("response_type", parameterToString(*r.responseType, ""))
	localVarQueryParams.Add("client_id", parameterToString(*r.clientId, ""))
	localVarQueryParams.Add("redirect_uri", parameterToString(*r.redirectUri, ""))
	localVarQueryParams.Add("code_challenge_method", parameterToString(*r.codeChallengeMethod, ""))
	localVarQueryParams.Add("code_challenge", parameterToString(*r.codeChallenge, ""))
	if r.scope != nil {
		localVarQueryParams.Add("scope", parameterToString(*r.scope, ""))
	}
	if r.username != nil {
		localVarQueryParams.Add("username", parameterToString(*r.username, ""))
	}
	if r.state != nil {
		localVarQueryParams.Add("state", parameterToString(*r.state, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiTokenTestRequest struct {
	ctx context.Context
	ApiService *OAuthApiService
	body *interface{}
}

// OAuth tokens separated by commas. Up to 1000.
func (r ApiTokenTestRequest) Body(body interface{}) ApiTokenTestRequest {
	r.body = &body
	return r
}

func (r ApiTokenTestRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.TokenTestExecute(r)
}

/*
TokenTest Test multiple OAuth tokens

For up to 1000 OAuth tokens, 
returns their associated user ID and scopes,
or `null` if the token is invalid.

The method is `POST` so a longer list of tokens can be sent in the request body.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTokenTestRequest
*/
func (a *OAuthApiService) TokenTest(ctx context.Context) ApiTokenTestRequest {
	return ApiTokenTestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *OAuthApiService) TokenTestExecute(r ApiTokenTestRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OAuthApiService.TokenTest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/token/test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"text/plain"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
