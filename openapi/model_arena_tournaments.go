/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ArenaTournaments struct for ArenaTournaments
type ArenaTournaments struct {
	Created interface{} `json:"created,omitempty"`
	Started interface{} `json:"started,omitempty"`
	Finished interface{} `json:"finished,omitempty"`
}

// NewArenaTournaments instantiates a new ArenaTournaments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArenaTournaments() *ArenaTournaments {
	this := ArenaTournaments{}
	return &this
}

// NewArenaTournamentsWithDefaults instantiates a new ArenaTournaments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArenaTournamentsWithDefaults() *ArenaTournaments {
	this := ArenaTournaments{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArenaTournaments) GetCreated() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArenaTournaments) GetCreatedOk() (*interface{}, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return &o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ArenaTournaments) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given interface{} and assigns it to the Created field.
func (o *ArenaTournaments) SetCreated(v interface{}) {
	o.Created = v
}

// GetStarted returns the Started field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArenaTournaments) GetStarted() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArenaTournaments) GetStartedOk() (*interface{}, bool) {
	if o == nil || o.Started == nil {
		return nil, false
	}
	return &o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *ArenaTournaments) HasStarted() bool {
	if o != nil && o.Started != nil {
		return true
	}

	return false
}

// SetStarted gets a reference to the given interface{} and assigns it to the Started field.
func (o *ArenaTournaments) SetStarted(v interface{}) {
	o.Started = v
}

// GetFinished returns the Finished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArenaTournaments) GetFinished() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Finished
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArenaTournaments) GetFinishedOk() (*interface{}, bool) {
	if o == nil || o.Finished == nil {
		return nil, false
	}
	return &o.Finished, true
}

// HasFinished returns a boolean if a field has been set.
func (o *ArenaTournaments) HasFinished() bool {
	if o != nil && o.Finished != nil {
		return true
	}

	return false
}

// SetFinished gets a reference to the given interface{} and assigns it to the Finished field.
func (o *ArenaTournaments) SetFinished(v interface{}) {
	o.Finished = v
}

func (o ArenaTournaments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Started != nil {
		toSerialize["started"] = o.Started
	}
	if o.Finished != nil {
		toSerialize["finished"] = o.Finished
	}
	return json.Marshal(toSerialize)
}

type NullableArenaTournaments struct {
	value *ArenaTournaments
	isSet bool
}

func (v NullableArenaTournaments) Get() *ArenaTournaments {
	return v.value
}

func (v *NullableArenaTournaments) Set(val *ArenaTournaments) {
	v.value = val
	v.isSet = true
}

func (v NullableArenaTournaments) IsSet() bool {
	return v.isSet
}

func (v *NullableArenaTournaments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArenaTournaments(val *ArenaTournaments) *NullableArenaTournaments {
	return &NullableArenaTournaments{value: val, isSet: true}
}

func (v NullableArenaTournaments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArenaTournaments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


