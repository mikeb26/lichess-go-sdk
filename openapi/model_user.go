/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// User struct for User
type User struct {
	Id interface{} `json:"id,omitempty"`
	Username interface{} `json:"username,omitempty"`
	Perfs *Perfs `json:"perfs,omitempty"`
	CreatedAt interface{} `json:"createdAt,omitempty"`
	Disabled interface{} `json:"disabled,omitempty"`
	TosViolation interface{} `json:"tosViolation,omitempty"`
	Profile *Profile `json:"profile,omitempty"`
	SeenAt interface{} `json:"seenAt,omitempty"`
	Patron interface{} `json:"patron,omitempty"`
	Verified interface{} `json:"verified,omitempty"`
	PlayTime *PlayTime `json:"playTime,omitempty"`
	Title *Title `json:"title,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetIdOk() (*interface{}, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return &o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *User) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given interface{} and assigns it to the Id field.
func (o *User) SetId(v interface{}) {
	o.Id = v
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetUsername() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetUsernameOk() (*interface{}, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return &o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *User) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given interface{} and assigns it to the Username field.
func (o *User) SetUsername(v interface{}) {
	o.Username = v
}

// GetPerfs returns the Perfs field value if set, zero value otherwise.
func (o *User) GetPerfs() Perfs {
	if o == nil || o.Perfs == nil {
		var ret Perfs
		return ret
	}
	return *o.Perfs
}

// GetPerfsOk returns a tuple with the Perfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPerfsOk() (*Perfs, bool) {
	if o == nil || o.Perfs == nil {
		return nil, false
	}
	return o.Perfs, true
}

// HasPerfs returns a boolean if a field has been set.
func (o *User) HasPerfs() bool {
	if o != nil && o.Perfs != nil {
		return true
	}

	return false
}

// SetPerfs gets a reference to the given Perfs and assigns it to the Perfs field.
func (o *User) SetPerfs(v Perfs) {
	o.Perfs = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetCreatedAt() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetCreatedAtOk() (*interface{}, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *User) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given interface{} and assigns it to the CreatedAt field.
func (o *User) SetCreatedAt(v interface{}) {
	o.CreatedAt = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetDisabled() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetDisabledOk() (*interface{}, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *User) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given interface{} and assigns it to the Disabled field.
func (o *User) SetDisabled(v interface{}) {
	o.Disabled = v
}

// GetTosViolation returns the TosViolation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetTosViolation() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.TosViolation
}

// GetTosViolationOk returns a tuple with the TosViolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetTosViolationOk() (*interface{}, bool) {
	if o == nil || o.TosViolation == nil {
		return nil, false
	}
	return &o.TosViolation, true
}

// HasTosViolation returns a boolean if a field has been set.
func (o *User) HasTosViolation() bool {
	if o != nil && o.TosViolation != nil {
		return true
	}

	return false
}

// SetTosViolation gets a reference to the given interface{} and assigns it to the TosViolation field.
func (o *User) SetTosViolation(v interface{}) {
	o.TosViolation = v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *User) GetProfile() Profile {
	if o == nil || o.Profile == nil {
		var ret Profile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetProfileOk() (*Profile, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *User) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given Profile and assigns it to the Profile field.
func (o *User) SetProfile(v Profile) {
	o.Profile = &v
}

// GetSeenAt returns the SeenAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetSeenAt() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SeenAt
}

// GetSeenAtOk returns a tuple with the SeenAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetSeenAtOk() (*interface{}, bool) {
	if o == nil || o.SeenAt == nil {
		return nil, false
	}
	return &o.SeenAt, true
}

// HasSeenAt returns a boolean if a field has been set.
func (o *User) HasSeenAt() bool {
	if o != nil && o.SeenAt != nil {
		return true
	}

	return false
}

// SetSeenAt gets a reference to the given interface{} and assigns it to the SeenAt field.
func (o *User) SetSeenAt(v interface{}) {
	o.SeenAt = v
}

// GetPatron returns the Patron field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetPatron() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Patron
}

// GetPatronOk returns a tuple with the Patron field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetPatronOk() (*interface{}, bool) {
	if o == nil || o.Patron == nil {
		return nil, false
	}
	return &o.Patron, true
}

// HasPatron returns a boolean if a field has been set.
func (o *User) HasPatron() bool {
	if o != nil && o.Patron != nil {
		return true
	}

	return false
}

// SetPatron gets a reference to the given interface{} and assigns it to the Patron field.
func (o *User) SetPatron(v interface{}) {
	o.Patron = v
}

// GetVerified returns the Verified field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetVerified() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetVerifiedOk() (*interface{}, bool) {
	if o == nil || o.Verified == nil {
		return nil, false
	}
	return &o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *User) HasVerified() bool {
	if o != nil && o.Verified != nil {
		return true
	}

	return false
}

// SetVerified gets a reference to the given interface{} and assigns it to the Verified field.
func (o *User) SetVerified(v interface{}) {
	o.Verified = v
}

// GetPlayTime returns the PlayTime field value if set, zero value otherwise.
func (o *User) GetPlayTime() PlayTime {
	if o == nil || o.PlayTime == nil {
		var ret PlayTime
		return ret
	}
	return *o.PlayTime
}

// GetPlayTimeOk returns a tuple with the PlayTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPlayTimeOk() (*PlayTime, bool) {
	if o == nil || o.PlayTime == nil {
		return nil, false
	}
	return o.PlayTime, true
}

// HasPlayTime returns a boolean if a field has been set.
func (o *User) HasPlayTime() bool {
	if o != nil && o.PlayTime != nil {
		return true
	}

	return false
}

// SetPlayTime gets a reference to the given PlayTime and assigns it to the PlayTime field.
func (o *User) SetPlayTime(v PlayTime) {
	o.PlayTime = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *User) GetTitle() Title {
	if o == nil || o.Title == nil {
		var ret Title
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetTitleOk() (*Title, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *User) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given Title and assigns it to the Title field.
func (o *User) SetTitle(v Title) {
	o.Title = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Perfs != nil {
		toSerialize["perfs"] = o.Perfs
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if o.TosViolation != nil {
		toSerialize["tosViolation"] = o.TosViolation
	}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}
	if o.SeenAt != nil {
		toSerialize["seenAt"] = o.SeenAt
	}
	if o.Patron != nil {
		toSerialize["patron"] = o.Patron
	}
	if o.Verified != nil {
		toSerialize["verified"] = o.Verified
	}
	if o.PlayTime != nil {
		toSerialize["playTime"] = o.PlayTime
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


