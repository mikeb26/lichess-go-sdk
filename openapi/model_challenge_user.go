/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ChallengeUser struct for ChallengeUser
type ChallengeUser struct {
	Rating interface{} `json:"rating,omitempty"`
	Provisional interface{} `json:"provisional,omitempty"`
	Online interface{} `json:"online,omitempty"`
}

// NewChallengeUser instantiates a new ChallengeUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChallengeUser() *ChallengeUser {
	this := ChallengeUser{}
	return &this
}

// NewChallengeUserWithDefaults instantiates a new ChallengeUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChallengeUserWithDefaults() *ChallengeUser {
	this := ChallengeUser{}
	return &this
}

// GetRating returns the Rating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChallengeUser) GetRating() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeUser) GetRatingOk() (*interface{}, bool) {
	if o == nil || o.Rating == nil {
		return nil, false
	}
	return &o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *ChallengeUser) HasRating() bool {
	if o != nil && o.Rating != nil {
		return true
	}

	return false
}

// SetRating gets a reference to the given interface{} and assigns it to the Rating field.
func (o *ChallengeUser) SetRating(v interface{}) {
	o.Rating = v
}

// GetProvisional returns the Provisional field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChallengeUser) GetProvisional() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Provisional
}

// GetProvisionalOk returns a tuple with the Provisional field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeUser) GetProvisionalOk() (*interface{}, bool) {
	if o == nil || o.Provisional == nil {
		return nil, false
	}
	return &o.Provisional, true
}

// HasProvisional returns a boolean if a field has been set.
func (o *ChallengeUser) HasProvisional() bool {
	if o != nil && o.Provisional != nil {
		return true
	}

	return false
}

// SetProvisional gets a reference to the given interface{} and assigns it to the Provisional field.
func (o *ChallengeUser) SetProvisional(v interface{}) {
	o.Provisional = v
}

// GetOnline returns the Online field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChallengeUser) GetOnline() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Online
}

// GetOnlineOk returns a tuple with the Online field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeUser) GetOnlineOk() (*interface{}, bool) {
	if o == nil || o.Online == nil {
		return nil, false
	}
	return &o.Online, true
}

// HasOnline returns a boolean if a field has been set.
func (o *ChallengeUser) HasOnline() bool {
	if o != nil && o.Online != nil {
		return true
	}

	return false
}

// SetOnline gets a reference to the given interface{} and assigns it to the Online field.
func (o *ChallengeUser) SetOnline(v interface{}) {
	o.Online = v
}

func (o ChallengeUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Rating != nil {
		toSerialize["rating"] = o.Rating
	}
	if o.Provisional != nil {
		toSerialize["provisional"] = o.Provisional
	}
	if o.Online != nil {
		toSerialize["online"] = o.Online
	}
	return json.Marshal(toSerialize)
}

type NullableChallengeUser struct {
	value *ChallengeUser
	isSet bool
}

func (v NullableChallengeUser) Get() *ChallengeUser {
	return v.value
}

func (v *NullableChallengeUser) Set(val *ChallengeUser) {
	v.value = val
	v.isSet = true
}

func (v NullableChallengeUser) IsSet() bool {
	return v.isSet
}

func (v *NullableChallengeUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChallengeUser(val *ChallengeUser) *NullableChallengeUser {
	return &NullableChallengeUser{value: val, isSet: true}
}

func (v NullableChallengeUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChallengeUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


