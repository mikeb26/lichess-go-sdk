/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OpponentGone struct for OpponentGone
type OpponentGone struct {
	Type interface{} `json:"type"`
	Gone interface{} `json:"gone"`
	ClaimWinInSeconds interface{} `json:"claimWinInSeconds,omitempty"`
}

// NewOpponentGone instantiates a new OpponentGone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpponentGone(type_ interface{}, gone interface{}) *OpponentGone {
	this := OpponentGone{}
	this.Type = type_
	this.Gone = gone
	return &this
}

// NewOpponentGoneWithDefaults instantiates a new OpponentGone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpponentGoneWithDefaults() *OpponentGone {
	this := OpponentGone{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *OpponentGone) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpponentGone) GetTypeOk() (*interface{}, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OpponentGone) SetType(v interface{}) {
	o.Type = v
}

// GetGone returns the Gone field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *OpponentGone) GetGone() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Gone
}

// GetGoneOk returns a tuple with the Gone field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpponentGone) GetGoneOk() (*interface{}, bool) {
	if o == nil || o.Gone == nil {
		return nil, false
	}
	return &o.Gone, true
}

// SetGone sets field value
func (o *OpponentGone) SetGone(v interface{}) {
	o.Gone = v
}

// GetClaimWinInSeconds returns the ClaimWinInSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpponentGone) GetClaimWinInSeconds() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ClaimWinInSeconds
}

// GetClaimWinInSecondsOk returns a tuple with the ClaimWinInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpponentGone) GetClaimWinInSecondsOk() (*interface{}, bool) {
	if o == nil || o.ClaimWinInSeconds == nil {
		return nil, false
	}
	return &o.ClaimWinInSeconds, true
}

// HasClaimWinInSeconds returns a boolean if a field has been set.
func (o *OpponentGone) HasClaimWinInSeconds() bool {
	if o != nil && o.ClaimWinInSeconds != nil {
		return true
	}

	return false
}

// SetClaimWinInSeconds gets a reference to the given interface{} and assigns it to the ClaimWinInSeconds field.
func (o *OpponentGone) SetClaimWinInSeconds(v interface{}) {
	o.ClaimWinInSeconds = v
}

func (o OpponentGone) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Gone != nil {
		toSerialize["gone"] = o.Gone
	}
	if o.ClaimWinInSeconds != nil {
		toSerialize["claimWinInSeconds"] = o.ClaimWinInSeconds
	}
	return json.Marshal(toSerialize)
}

type NullableOpponentGone struct {
	value *OpponentGone
	isSet bool
}

func (v NullableOpponentGone) Get() *OpponentGone {
	return v.value
}

func (v *NullableOpponentGone) Set(val *OpponentGone) {
	v.value = val
	v.isSet = true
}

func (v NullableOpponentGone) IsSet() bool {
	return v.isSet
}

func (v *NullableOpponentGone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpponentGone(val *OpponentGone) *NullableOpponentGone {
	return &NullableOpponentGone{value: val, isSet: true}
}

func (v NullableOpponentGone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpponentGone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


