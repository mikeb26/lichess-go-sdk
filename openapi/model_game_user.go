/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GameUser struct for GameUser
type GameUser struct {
	User *LightUser `json:"user,omitempty"`
	Rating interface{} `json:"rating,omitempty"`
	RatingDiff interface{} `json:"ratingDiff,omitempty"`
	Name interface{} `json:"name,omitempty"`
	Provisional interface{} `json:"provisional,omitempty"`
	AiLevel interface{} `json:"aiLevel,omitempty"`
	Analysis *GameUserAnalysis `json:"analysis,omitempty"`
	Team interface{} `json:"team,omitempty"`
}

// NewGameUser instantiates a new GameUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGameUser() *GameUser {
	this := GameUser{}
	return &this
}

// NewGameUserWithDefaults instantiates a new GameUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameUserWithDefaults() *GameUser {
	this := GameUser{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *GameUser) GetUser() LightUser {
	if o == nil || o.User == nil {
		var ret LightUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameUser) GetUserOk() (*LightUser, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *GameUser) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given LightUser and assigns it to the User field.
func (o *GameUser) SetUser(v LightUser) {
	o.User = &v
}

// GetRating returns the Rating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameUser) GetRating() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameUser) GetRatingOk() (*interface{}, bool) {
	if o == nil || o.Rating == nil {
		return nil, false
	}
	return &o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *GameUser) HasRating() bool {
	if o != nil && o.Rating != nil {
		return true
	}

	return false
}

// SetRating gets a reference to the given interface{} and assigns it to the Rating field.
func (o *GameUser) SetRating(v interface{}) {
	o.Rating = v
}

// GetRatingDiff returns the RatingDiff field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameUser) GetRatingDiff() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RatingDiff
}

// GetRatingDiffOk returns a tuple with the RatingDiff field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameUser) GetRatingDiffOk() (*interface{}, bool) {
	if o == nil || o.RatingDiff == nil {
		return nil, false
	}
	return &o.RatingDiff, true
}

// HasRatingDiff returns a boolean if a field has been set.
func (o *GameUser) HasRatingDiff() bool {
	if o != nil && o.RatingDiff != nil {
		return true
	}

	return false
}

// SetRatingDiff gets a reference to the given interface{} and assigns it to the RatingDiff field.
func (o *GameUser) SetRatingDiff(v interface{}) {
	o.RatingDiff = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameUser) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameUser) GetNameOk() (*interface{}, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return &o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GameUser) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given interface{} and assigns it to the Name field.
func (o *GameUser) SetName(v interface{}) {
	o.Name = v
}

// GetProvisional returns the Provisional field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameUser) GetProvisional() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Provisional
}

// GetProvisionalOk returns a tuple with the Provisional field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameUser) GetProvisionalOk() (*interface{}, bool) {
	if o == nil || o.Provisional == nil {
		return nil, false
	}
	return &o.Provisional, true
}

// HasProvisional returns a boolean if a field has been set.
func (o *GameUser) HasProvisional() bool {
	if o != nil && o.Provisional != nil {
		return true
	}

	return false
}

// SetProvisional gets a reference to the given interface{} and assigns it to the Provisional field.
func (o *GameUser) SetProvisional(v interface{}) {
	o.Provisional = v
}

// GetAiLevel returns the AiLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameUser) GetAiLevel() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AiLevel
}

// GetAiLevelOk returns a tuple with the AiLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameUser) GetAiLevelOk() (*interface{}, bool) {
	if o == nil || o.AiLevel == nil {
		return nil, false
	}
	return &o.AiLevel, true
}

// HasAiLevel returns a boolean if a field has been set.
func (o *GameUser) HasAiLevel() bool {
	if o != nil && o.AiLevel != nil {
		return true
	}

	return false
}

// SetAiLevel gets a reference to the given interface{} and assigns it to the AiLevel field.
func (o *GameUser) SetAiLevel(v interface{}) {
	o.AiLevel = v
}

// GetAnalysis returns the Analysis field value if set, zero value otherwise.
func (o *GameUser) GetAnalysis() GameUserAnalysis {
	if o == nil || o.Analysis == nil {
		var ret GameUserAnalysis
		return ret
	}
	return *o.Analysis
}

// GetAnalysisOk returns a tuple with the Analysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameUser) GetAnalysisOk() (*GameUserAnalysis, bool) {
	if o == nil || o.Analysis == nil {
		return nil, false
	}
	return o.Analysis, true
}

// HasAnalysis returns a boolean if a field has been set.
func (o *GameUser) HasAnalysis() bool {
	if o != nil && o.Analysis != nil {
		return true
	}

	return false
}

// SetAnalysis gets a reference to the given GameUserAnalysis and assigns it to the Analysis field.
func (o *GameUser) SetAnalysis(v GameUserAnalysis) {
	o.Analysis = &v
}

// GetTeam returns the Team field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GameUser) GetTeam() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GameUser) GetTeamOk() (*interface{}, bool) {
	if o == nil || o.Team == nil {
		return nil, false
	}
	return &o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *GameUser) HasTeam() bool {
	if o != nil && o.Team != nil {
		return true
	}

	return false
}

// SetTeam gets a reference to the given interface{} and assigns it to the Team field.
func (o *GameUser) SetTeam(v interface{}) {
	o.Team = v
}

func (o GameUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Rating != nil {
		toSerialize["rating"] = o.Rating
	}
	if o.RatingDiff != nil {
		toSerialize["ratingDiff"] = o.RatingDiff
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Provisional != nil {
		toSerialize["provisional"] = o.Provisional
	}
	if o.AiLevel != nil {
		toSerialize["aiLevel"] = o.AiLevel
	}
	if o.Analysis != nil {
		toSerialize["analysis"] = o.Analysis
	}
	if o.Team != nil {
		toSerialize["team"] = o.Team
	}
	return json.Marshal(toSerialize)
}

type NullableGameUser struct {
	value *GameUser
	isSet bool
}

func (v NullableGameUser) Get() *GameUser {
	return v.value
}

func (v *NullableGameUser) Set(val *GameUser) {
	v.value = val
	v.isSet = true
}

func (v NullableGameUser) IsSet() bool {
	return v.isSet
}

func (v *NullableGameUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameUser(val *GameUser) *NullableGameUser {
	return &NullableGameUser{value: val, isSet: true}
}

func (v NullableGameUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


