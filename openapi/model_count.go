/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Count struct for Count
type Count struct {
	All interface{} `json:"all,omitempty"`
	Rated interface{} `json:"rated,omitempty"`
	Ai interface{} `json:"ai,omitempty"`
	Draw interface{} `json:"draw,omitempty"`
	DrawH interface{} `json:"drawH,omitempty"`
	Loss interface{} `json:"loss,omitempty"`
	LossH interface{} `json:"lossH,omitempty"`
	Win interface{} `json:"win,omitempty"`
	WinH interface{} `json:"winH,omitempty"`
	Bookmark interface{} `json:"bookmark,omitempty"`
	Playing interface{} `json:"playing,omitempty"`
	Import interface{} `json:"import,omitempty"`
	Me interface{} `json:"me,omitempty"`
}

// NewCount instantiates a new Count object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCount() *Count {
	this := Count{}
	return &this
}

// NewCountWithDefaults instantiates a new Count object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountWithDefaults() *Count {
	this := Count{}
	return &this
}

// GetAll returns the All field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetAll() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetAllOk() (*interface{}, bool) {
	if o == nil || o.All == nil {
		return nil, false
	}
	return &o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *Count) HasAll() bool {
	if o != nil && o.All != nil {
		return true
	}

	return false
}

// SetAll gets a reference to the given interface{} and assigns it to the All field.
func (o *Count) SetAll(v interface{}) {
	o.All = v
}

// GetRated returns the Rated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetRated() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Rated
}

// GetRatedOk returns a tuple with the Rated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetRatedOk() (*interface{}, bool) {
	if o == nil || o.Rated == nil {
		return nil, false
	}
	return &o.Rated, true
}

// HasRated returns a boolean if a field has been set.
func (o *Count) HasRated() bool {
	if o != nil && o.Rated != nil {
		return true
	}

	return false
}

// SetRated gets a reference to the given interface{} and assigns it to the Rated field.
func (o *Count) SetRated(v interface{}) {
	o.Rated = v
}

// GetAi returns the Ai field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetAi() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Ai
}

// GetAiOk returns a tuple with the Ai field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetAiOk() (*interface{}, bool) {
	if o == nil || o.Ai == nil {
		return nil, false
	}
	return &o.Ai, true
}

// HasAi returns a boolean if a field has been set.
func (o *Count) HasAi() bool {
	if o != nil && o.Ai != nil {
		return true
	}

	return false
}

// SetAi gets a reference to the given interface{} and assigns it to the Ai field.
func (o *Count) SetAi(v interface{}) {
	o.Ai = v
}

// GetDraw returns the Draw field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetDraw() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Draw
}

// GetDrawOk returns a tuple with the Draw field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetDrawOk() (*interface{}, bool) {
	if o == nil || o.Draw == nil {
		return nil, false
	}
	return &o.Draw, true
}

// HasDraw returns a boolean if a field has been set.
func (o *Count) HasDraw() bool {
	if o != nil && o.Draw != nil {
		return true
	}

	return false
}

// SetDraw gets a reference to the given interface{} and assigns it to the Draw field.
func (o *Count) SetDraw(v interface{}) {
	o.Draw = v
}

// GetDrawH returns the DrawH field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetDrawH() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DrawH
}

// GetDrawHOk returns a tuple with the DrawH field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetDrawHOk() (*interface{}, bool) {
	if o == nil || o.DrawH == nil {
		return nil, false
	}
	return &o.DrawH, true
}

// HasDrawH returns a boolean if a field has been set.
func (o *Count) HasDrawH() bool {
	if o != nil && o.DrawH != nil {
		return true
	}

	return false
}

// SetDrawH gets a reference to the given interface{} and assigns it to the DrawH field.
func (o *Count) SetDrawH(v interface{}) {
	o.DrawH = v
}

// GetLoss returns the Loss field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetLoss() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Loss
}

// GetLossOk returns a tuple with the Loss field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetLossOk() (*interface{}, bool) {
	if o == nil || o.Loss == nil {
		return nil, false
	}
	return &o.Loss, true
}

// HasLoss returns a boolean if a field has been set.
func (o *Count) HasLoss() bool {
	if o != nil && o.Loss != nil {
		return true
	}

	return false
}

// SetLoss gets a reference to the given interface{} and assigns it to the Loss field.
func (o *Count) SetLoss(v interface{}) {
	o.Loss = v
}

// GetLossH returns the LossH field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetLossH() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.LossH
}

// GetLossHOk returns a tuple with the LossH field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetLossHOk() (*interface{}, bool) {
	if o == nil || o.LossH == nil {
		return nil, false
	}
	return &o.LossH, true
}

// HasLossH returns a boolean if a field has been set.
func (o *Count) HasLossH() bool {
	if o != nil && o.LossH != nil {
		return true
	}

	return false
}

// SetLossH gets a reference to the given interface{} and assigns it to the LossH field.
func (o *Count) SetLossH(v interface{}) {
	o.LossH = v
}

// GetWin returns the Win field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetWin() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Win
}

// GetWinOk returns a tuple with the Win field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetWinOk() (*interface{}, bool) {
	if o == nil || o.Win == nil {
		return nil, false
	}
	return &o.Win, true
}

// HasWin returns a boolean if a field has been set.
func (o *Count) HasWin() bool {
	if o != nil && o.Win != nil {
		return true
	}

	return false
}

// SetWin gets a reference to the given interface{} and assigns it to the Win field.
func (o *Count) SetWin(v interface{}) {
	o.Win = v
}

// GetWinH returns the WinH field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetWinH() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.WinH
}

// GetWinHOk returns a tuple with the WinH field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetWinHOk() (*interface{}, bool) {
	if o == nil || o.WinH == nil {
		return nil, false
	}
	return &o.WinH, true
}

// HasWinH returns a boolean if a field has been set.
func (o *Count) HasWinH() bool {
	if o != nil && o.WinH != nil {
		return true
	}

	return false
}

// SetWinH gets a reference to the given interface{} and assigns it to the WinH field.
func (o *Count) SetWinH(v interface{}) {
	o.WinH = v
}

// GetBookmark returns the Bookmark field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetBookmark() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Bookmark
}

// GetBookmarkOk returns a tuple with the Bookmark field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetBookmarkOk() (*interface{}, bool) {
	if o == nil || o.Bookmark == nil {
		return nil, false
	}
	return &o.Bookmark, true
}

// HasBookmark returns a boolean if a field has been set.
func (o *Count) HasBookmark() bool {
	if o != nil && o.Bookmark != nil {
		return true
	}

	return false
}

// SetBookmark gets a reference to the given interface{} and assigns it to the Bookmark field.
func (o *Count) SetBookmark(v interface{}) {
	o.Bookmark = v
}

// GetPlaying returns the Playing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetPlaying() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Playing
}

// GetPlayingOk returns a tuple with the Playing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetPlayingOk() (*interface{}, bool) {
	if o == nil || o.Playing == nil {
		return nil, false
	}
	return &o.Playing, true
}

// HasPlaying returns a boolean if a field has been set.
func (o *Count) HasPlaying() bool {
	if o != nil && o.Playing != nil {
		return true
	}

	return false
}

// SetPlaying gets a reference to the given interface{} and assigns it to the Playing field.
func (o *Count) SetPlaying(v interface{}) {
	o.Playing = v
}

// GetImport returns the Import field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetImport() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Import
}

// GetImportOk returns a tuple with the Import field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetImportOk() (*interface{}, bool) {
	if o == nil || o.Import == nil {
		return nil, false
	}
	return &o.Import, true
}

// HasImport returns a boolean if a field has been set.
func (o *Count) HasImport() bool {
	if o != nil && o.Import != nil {
		return true
	}

	return false
}

// SetImport gets a reference to the given interface{} and assigns it to the Import field.
func (o *Count) SetImport(v interface{}) {
	o.Import = v
}

// GetMe returns the Me field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Count) GetMe() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Me
}

// GetMeOk returns a tuple with the Me field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Count) GetMeOk() (*interface{}, bool) {
	if o == nil || o.Me == nil {
		return nil, false
	}
	return &o.Me, true
}

// HasMe returns a boolean if a field has been set.
func (o *Count) HasMe() bool {
	if o != nil && o.Me != nil {
		return true
	}

	return false
}

// SetMe gets a reference to the given interface{} and assigns it to the Me field.
func (o *Count) SetMe(v interface{}) {
	o.Me = v
}

func (o Count) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.All != nil {
		toSerialize["all"] = o.All
	}
	if o.Rated != nil {
		toSerialize["rated"] = o.Rated
	}
	if o.Ai != nil {
		toSerialize["ai"] = o.Ai
	}
	if o.Draw != nil {
		toSerialize["draw"] = o.Draw
	}
	if o.DrawH != nil {
		toSerialize["drawH"] = o.DrawH
	}
	if o.Loss != nil {
		toSerialize["loss"] = o.Loss
	}
	if o.LossH != nil {
		toSerialize["lossH"] = o.LossH
	}
	if o.Win != nil {
		toSerialize["win"] = o.Win
	}
	if o.WinH != nil {
		toSerialize["winH"] = o.WinH
	}
	if o.Bookmark != nil {
		toSerialize["bookmark"] = o.Bookmark
	}
	if o.Playing != nil {
		toSerialize["playing"] = o.Playing
	}
	if o.Import != nil {
		toSerialize["import"] = o.Import
	}
	if o.Me != nil {
		toSerialize["me"] = o.Me
	}
	return json.Marshal(toSerialize)
}

type NullableCount struct {
	value *Count
	isSet bool
}

func (v NullableCount) Get() *Count {
	return v.value
}

func (v *NullableCount) Set(val *Count) {
	v.value = val
	v.isSet = true
}

func (v NullableCount) IsSet() bool {
	return v.isSet
}

func (v *NullableCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCount(val *Count) *NullableCount {
	return &NullableCount{value: val, isSet: true}
}

func (v NullableCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


