/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserPreferences struct for UserPreferences
type UserPreferences struct {
	Dark interface{} `json:"dark,omitempty"`
	Transp interface{} `json:"transp,omitempty"`
	BgImg interface{} `json:"bgImg,omitempty"`
	Is3d interface{} `json:"is3d,omitempty"`
	Theme interface{} `json:"theme,omitempty"`
	PieceSet interface{} `json:"pieceSet,omitempty"`
	Theme3d interface{} `json:"theme3d,omitempty"`
	PieceSet3d interface{} `json:"pieceSet3d,omitempty"`
	SoundSet interface{} `json:"soundSet,omitempty"`
	Blindfold interface{} `json:"blindfold,omitempty"`
	AutoQueen interface{} `json:"autoQueen,omitempty"`
	AutoThreefold interface{} `json:"autoThreefold,omitempty"`
	Takeback interface{} `json:"takeback,omitempty"`
	Moretime interface{} `json:"moretime,omitempty"`
	ClockTenths interface{} `json:"clockTenths,omitempty"`
	ClockBar interface{} `json:"clockBar,omitempty"`
	ClockSound interface{} `json:"clockSound,omitempty"`
	Premove interface{} `json:"premove,omitempty"`
	Animation interface{} `json:"animation,omitempty"`
	Captured interface{} `json:"captured,omitempty"`
	Follow interface{} `json:"follow,omitempty"`
	Highlight interface{} `json:"highlight,omitempty"`
	Destination interface{} `json:"destination,omitempty"`
	Coords interface{} `json:"coords,omitempty"`
	Replay interface{} `json:"replay,omitempty"`
	Challenge interface{} `json:"challenge,omitempty"`
	Message interface{} `json:"message,omitempty"`
	CoordColor interface{} `json:"coordColor,omitempty"`
	SubmitMove interface{} `json:"submitMove,omitempty"`
	ConfirmResign interface{} `json:"confirmResign,omitempty"`
	InsightShare interface{} `json:"insightShare,omitempty"`
	KeyboardMove interface{} `json:"keyboardMove,omitempty"`
	Zen interface{} `json:"zen,omitempty"`
	MoveEvent interface{} `json:"moveEvent,omitempty"`
	RookCastle interface{} `json:"rookCastle,omitempty"`
}

// NewUserPreferences instantiates a new UserPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPreferences() *UserPreferences {
	this := UserPreferences{}
	return &this
}

// NewUserPreferencesWithDefaults instantiates a new UserPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPreferencesWithDefaults() *UserPreferences {
	this := UserPreferences{}
	return &this
}

// GetDark returns the Dark field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetDark() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Dark
}

// GetDarkOk returns a tuple with the Dark field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetDarkOk() (*interface{}, bool) {
	if o == nil || o.Dark == nil {
		return nil, false
	}
	return &o.Dark, true
}

// HasDark returns a boolean if a field has been set.
func (o *UserPreferences) HasDark() bool {
	if o != nil && o.Dark != nil {
		return true
	}

	return false
}

// SetDark gets a reference to the given interface{} and assigns it to the Dark field.
func (o *UserPreferences) SetDark(v interface{}) {
	o.Dark = v
}

// GetTransp returns the Transp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetTransp() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Transp
}

// GetTranspOk returns a tuple with the Transp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetTranspOk() (*interface{}, bool) {
	if o == nil || o.Transp == nil {
		return nil, false
	}
	return &o.Transp, true
}

// HasTransp returns a boolean if a field has been set.
func (o *UserPreferences) HasTransp() bool {
	if o != nil && o.Transp != nil {
		return true
	}

	return false
}

// SetTransp gets a reference to the given interface{} and assigns it to the Transp field.
func (o *UserPreferences) SetTransp(v interface{}) {
	o.Transp = v
}

// GetBgImg returns the BgImg field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetBgImg() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BgImg
}

// GetBgImgOk returns a tuple with the BgImg field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetBgImgOk() (*interface{}, bool) {
	if o == nil || o.BgImg == nil {
		return nil, false
	}
	return &o.BgImg, true
}

// HasBgImg returns a boolean if a field has been set.
func (o *UserPreferences) HasBgImg() bool {
	if o != nil && o.BgImg != nil {
		return true
	}

	return false
}

// SetBgImg gets a reference to the given interface{} and assigns it to the BgImg field.
func (o *UserPreferences) SetBgImg(v interface{}) {
	o.BgImg = v
}

// GetIs3d returns the Is3d field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetIs3d() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Is3d
}

// GetIs3dOk returns a tuple with the Is3d field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetIs3dOk() (*interface{}, bool) {
	if o == nil || o.Is3d == nil {
		return nil, false
	}
	return &o.Is3d, true
}

// HasIs3d returns a boolean if a field has been set.
func (o *UserPreferences) HasIs3d() bool {
	if o != nil && o.Is3d != nil {
		return true
	}

	return false
}

// SetIs3d gets a reference to the given interface{} and assigns it to the Is3d field.
func (o *UserPreferences) SetIs3d(v interface{}) {
	o.Is3d = v
}

// GetTheme returns the Theme field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetTheme() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetThemeOk() (*interface{}, bool) {
	if o == nil || o.Theme == nil {
		return nil, false
	}
	return &o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *UserPreferences) HasTheme() bool {
	if o != nil && o.Theme != nil {
		return true
	}

	return false
}

// SetTheme gets a reference to the given interface{} and assigns it to the Theme field.
func (o *UserPreferences) SetTheme(v interface{}) {
	o.Theme = v
}

// GetPieceSet returns the PieceSet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetPieceSet() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.PieceSet
}

// GetPieceSetOk returns a tuple with the PieceSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetPieceSetOk() (*interface{}, bool) {
	if o == nil || o.PieceSet == nil {
		return nil, false
	}
	return &o.PieceSet, true
}

// HasPieceSet returns a boolean if a field has been set.
func (o *UserPreferences) HasPieceSet() bool {
	if o != nil && o.PieceSet != nil {
		return true
	}

	return false
}

// SetPieceSet gets a reference to the given interface{} and assigns it to the PieceSet field.
func (o *UserPreferences) SetPieceSet(v interface{}) {
	o.PieceSet = v
}

// GetTheme3d returns the Theme3d field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetTheme3d() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Theme3d
}

// GetTheme3dOk returns a tuple with the Theme3d field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetTheme3dOk() (*interface{}, bool) {
	if o == nil || o.Theme3d == nil {
		return nil, false
	}
	return &o.Theme3d, true
}

// HasTheme3d returns a boolean if a field has been set.
func (o *UserPreferences) HasTheme3d() bool {
	if o != nil && o.Theme3d != nil {
		return true
	}

	return false
}

// SetTheme3d gets a reference to the given interface{} and assigns it to the Theme3d field.
func (o *UserPreferences) SetTheme3d(v interface{}) {
	o.Theme3d = v
}

// GetPieceSet3d returns the PieceSet3d field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetPieceSet3d() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.PieceSet3d
}

// GetPieceSet3dOk returns a tuple with the PieceSet3d field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetPieceSet3dOk() (*interface{}, bool) {
	if o == nil || o.PieceSet3d == nil {
		return nil, false
	}
	return &o.PieceSet3d, true
}

// HasPieceSet3d returns a boolean if a field has been set.
func (o *UserPreferences) HasPieceSet3d() bool {
	if o != nil && o.PieceSet3d != nil {
		return true
	}

	return false
}

// SetPieceSet3d gets a reference to the given interface{} and assigns it to the PieceSet3d field.
func (o *UserPreferences) SetPieceSet3d(v interface{}) {
	o.PieceSet3d = v
}

// GetSoundSet returns the SoundSet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetSoundSet() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SoundSet
}

// GetSoundSetOk returns a tuple with the SoundSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetSoundSetOk() (*interface{}, bool) {
	if o == nil || o.SoundSet == nil {
		return nil, false
	}
	return &o.SoundSet, true
}

// HasSoundSet returns a boolean if a field has been set.
func (o *UserPreferences) HasSoundSet() bool {
	if o != nil && o.SoundSet != nil {
		return true
	}

	return false
}

// SetSoundSet gets a reference to the given interface{} and assigns it to the SoundSet field.
func (o *UserPreferences) SetSoundSet(v interface{}) {
	o.SoundSet = v
}

// GetBlindfold returns the Blindfold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetBlindfold() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Blindfold
}

// GetBlindfoldOk returns a tuple with the Blindfold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetBlindfoldOk() (*interface{}, bool) {
	if o == nil || o.Blindfold == nil {
		return nil, false
	}
	return &o.Blindfold, true
}

// HasBlindfold returns a boolean if a field has been set.
func (o *UserPreferences) HasBlindfold() bool {
	if o != nil && o.Blindfold != nil {
		return true
	}

	return false
}

// SetBlindfold gets a reference to the given interface{} and assigns it to the Blindfold field.
func (o *UserPreferences) SetBlindfold(v interface{}) {
	o.Blindfold = v
}

// GetAutoQueen returns the AutoQueen field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetAutoQueen() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AutoQueen
}

// GetAutoQueenOk returns a tuple with the AutoQueen field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetAutoQueenOk() (*interface{}, bool) {
	if o == nil || o.AutoQueen == nil {
		return nil, false
	}
	return &o.AutoQueen, true
}

// HasAutoQueen returns a boolean if a field has been set.
func (o *UserPreferences) HasAutoQueen() bool {
	if o != nil && o.AutoQueen != nil {
		return true
	}

	return false
}

// SetAutoQueen gets a reference to the given interface{} and assigns it to the AutoQueen field.
func (o *UserPreferences) SetAutoQueen(v interface{}) {
	o.AutoQueen = v
}

// GetAutoThreefold returns the AutoThreefold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetAutoThreefold() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AutoThreefold
}

// GetAutoThreefoldOk returns a tuple with the AutoThreefold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetAutoThreefoldOk() (*interface{}, bool) {
	if o == nil || o.AutoThreefold == nil {
		return nil, false
	}
	return &o.AutoThreefold, true
}

// HasAutoThreefold returns a boolean if a field has been set.
func (o *UserPreferences) HasAutoThreefold() bool {
	if o != nil && o.AutoThreefold != nil {
		return true
	}

	return false
}

// SetAutoThreefold gets a reference to the given interface{} and assigns it to the AutoThreefold field.
func (o *UserPreferences) SetAutoThreefold(v interface{}) {
	o.AutoThreefold = v
}

// GetTakeback returns the Takeback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetTakeback() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Takeback
}

// GetTakebackOk returns a tuple with the Takeback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetTakebackOk() (*interface{}, bool) {
	if o == nil || o.Takeback == nil {
		return nil, false
	}
	return &o.Takeback, true
}

// HasTakeback returns a boolean if a field has been set.
func (o *UserPreferences) HasTakeback() bool {
	if o != nil && o.Takeback != nil {
		return true
	}

	return false
}

// SetTakeback gets a reference to the given interface{} and assigns it to the Takeback field.
func (o *UserPreferences) SetTakeback(v interface{}) {
	o.Takeback = v
}

// GetMoretime returns the Moretime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetMoretime() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Moretime
}

// GetMoretimeOk returns a tuple with the Moretime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetMoretimeOk() (*interface{}, bool) {
	if o == nil || o.Moretime == nil {
		return nil, false
	}
	return &o.Moretime, true
}

// HasMoretime returns a boolean if a field has been set.
func (o *UserPreferences) HasMoretime() bool {
	if o != nil && o.Moretime != nil {
		return true
	}

	return false
}

// SetMoretime gets a reference to the given interface{} and assigns it to the Moretime field.
func (o *UserPreferences) SetMoretime(v interface{}) {
	o.Moretime = v
}

// GetClockTenths returns the ClockTenths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetClockTenths() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ClockTenths
}

// GetClockTenthsOk returns a tuple with the ClockTenths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetClockTenthsOk() (*interface{}, bool) {
	if o == nil || o.ClockTenths == nil {
		return nil, false
	}
	return &o.ClockTenths, true
}

// HasClockTenths returns a boolean if a field has been set.
func (o *UserPreferences) HasClockTenths() bool {
	if o != nil && o.ClockTenths != nil {
		return true
	}

	return false
}

// SetClockTenths gets a reference to the given interface{} and assigns it to the ClockTenths field.
func (o *UserPreferences) SetClockTenths(v interface{}) {
	o.ClockTenths = v
}

// GetClockBar returns the ClockBar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetClockBar() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ClockBar
}

// GetClockBarOk returns a tuple with the ClockBar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetClockBarOk() (*interface{}, bool) {
	if o == nil || o.ClockBar == nil {
		return nil, false
	}
	return &o.ClockBar, true
}

// HasClockBar returns a boolean if a field has been set.
func (o *UserPreferences) HasClockBar() bool {
	if o != nil && o.ClockBar != nil {
		return true
	}

	return false
}

// SetClockBar gets a reference to the given interface{} and assigns it to the ClockBar field.
func (o *UserPreferences) SetClockBar(v interface{}) {
	o.ClockBar = v
}

// GetClockSound returns the ClockSound field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetClockSound() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ClockSound
}

// GetClockSoundOk returns a tuple with the ClockSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetClockSoundOk() (*interface{}, bool) {
	if o == nil || o.ClockSound == nil {
		return nil, false
	}
	return &o.ClockSound, true
}

// HasClockSound returns a boolean if a field has been set.
func (o *UserPreferences) HasClockSound() bool {
	if o != nil && o.ClockSound != nil {
		return true
	}

	return false
}

// SetClockSound gets a reference to the given interface{} and assigns it to the ClockSound field.
func (o *UserPreferences) SetClockSound(v interface{}) {
	o.ClockSound = v
}

// GetPremove returns the Premove field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetPremove() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Premove
}

// GetPremoveOk returns a tuple with the Premove field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetPremoveOk() (*interface{}, bool) {
	if o == nil || o.Premove == nil {
		return nil, false
	}
	return &o.Premove, true
}

// HasPremove returns a boolean if a field has been set.
func (o *UserPreferences) HasPremove() bool {
	if o != nil && o.Premove != nil {
		return true
	}

	return false
}

// SetPremove gets a reference to the given interface{} and assigns it to the Premove field.
func (o *UserPreferences) SetPremove(v interface{}) {
	o.Premove = v
}

// GetAnimation returns the Animation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetAnimation() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Animation
}

// GetAnimationOk returns a tuple with the Animation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetAnimationOk() (*interface{}, bool) {
	if o == nil || o.Animation == nil {
		return nil, false
	}
	return &o.Animation, true
}

// HasAnimation returns a boolean if a field has been set.
func (o *UserPreferences) HasAnimation() bool {
	if o != nil && o.Animation != nil {
		return true
	}

	return false
}

// SetAnimation gets a reference to the given interface{} and assigns it to the Animation field.
func (o *UserPreferences) SetAnimation(v interface{}) {
	o.Animation = v
}

// GetCaptured returns the Captured field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetCaptured() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Captured
}

// GetCapturedOk returns a tuple with the Captured field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetCapturedOk() (*interface{}, bool) {
	if o == nil || o.Captured == nil {
		return nil, false
	}
	return &o.Captured, true
}

// HasCaptured returns a boolean if a field has been set.
func (o *UserPreferences) HasCaptured() bool {
	if o != nil && o.Captured != nil {
		return true
	}

	return false
}

// SetCaptured gets a reference to the given interface{} and assigns it to the Captured field.
func (o *UserPreferences) SetCaptured(v interface{}) {
	o.Captured = v
}

// GetFollow returns the Follow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetFollow() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Follow
}

// GetFollowOk returns a tuple with the Follow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetFollowOk() (*interface{}, bool) {
	if o == nil || o.Follow == nil {
		return nil, false
	}
	return &o.Follow, true
}

// HasFollow returns a boolean if a field has been set.
func (o *UserPreferences) HasFollow() bool {
	if o != nil && o.Follow != nil {
		return true
	}

	return false
}

// SetFollow gets a reference to the given interface{} and assigns it to the Follow field.
func (o *UserPreferences) SetFollow(v interface{}) {
	o.Follow = v
}

// GetHighlight returns the Highlight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetHighlight() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetHighlightOk() (*interface{}, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return &o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *UserPreferences) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given interface{} and assigns it to the Highlight field.
func (o *UserPreferences) SetHighlight(v interface{}) {
	o.Highlight = v
}

// GetDestination returns the Destination field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetDestination() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetDestinationOk() (*interface{}, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return &o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *UserPreferences) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given interface{} and assigns it to the Destination field.
func (o *UserPreferences) SetDestination(v interface{}) {
	o.Destination = v
}

// GetCoords returns the Coords field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetCoords() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Coords
}

// GetCoordsOk returns a tuple with the Coords field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetCoordsOk() (*interface{}, bool) {
	if o == nil || o.Coords == nil {
		return nil, false
	}
	return &o.Coords, true
}

// HasCoords returns a boolean if a field has been set.
func (o *UserPreferences) HasCoords() bool {
	if o != nil && o.Coords != nil {
		return true
	}

	return false
}

// SetCoords gets a reference to the given interface{} and assigns it to the Coords field.
func (o *UserPreferences) SetCoords(v interface{}) {
	o.Coords = v
}

// GetReplay returns the Replay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetReplay() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Replay
}

// GetReplayOk returns a tuple with the Replay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetReplayOk() (*interface{}, bool) {
	if o == nil || o.Replay == nil {
		return nil, false
	}
	return &o.Replay, true
}

// HasReplay returns a boolean if a field has been set.
func (o *UserPreferences) HasReplay() bool {
	if o != nil && o.Replay != nil {
		return true
	}

	return false
}

// SetReplay gets a reference to the given interface{} and assigns it to the Replay field.
func (o *UserPreferences) SetReplay(v interface{}) {
	o.Replay = v
}

// GetChallenge returns the Challenge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetChallenge() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Challenge
}

// GetChallengeOk returns a tuple with the Challenge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetChallengeOk() (*interface{}, bool) {
	if o == nil || o.Challenge == nil {
		return nil, false
	}
	return &o.Challenge, true
}

// HasChallenge returns a boolean if a field has been set.
func (o *UserPreferences) HasChallenge() bool {
	if o != nil && o.Challenge != nil {
		return true
	}

	return false
}

// SetChallenge gets a reference to the given interface{} and assigns it to the Challenge field.
func (o *UserPreferences) SetChallenge(v interface{}) {
	o.Challenge = v
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetMessage() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetMessageOk() (*interface{}, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return &o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *UserPreferences) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given interface{} and assigns it to the Message field.
func (o *UserPreferences) SetMessage(v interface{}) {
	o.Message = v
}

// GetCoordColor returns the CoordColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetCoordColor() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CoordColor
}

// GetCoordColorOk returns a tuple with the CoordColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetCoordColorOk() (*interface{}, bool) {
	if o == nil || o.CoordColor == nil {
		return nil, false
	}
	return &o.CoordColor, true
}

// HasCoordColor returns a boolean if a field has been set.
func (o *UserPreferences) HasCoordColor() bool {
	if o != nil && o.CoordColor != nil {
		return true
	}

	return false
}

// SetCoordColor gets a reference to the given interface{} and assigns it to the CoordColor field.
func (o *UserPreferences) SetCoordColor(v interface{}) {
	o.CoordColor = v
}

// GetSubmitMove returns the SubmitMove field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetSubmitMove() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SubmitMove
}

// GetSubmitMoveOk returns a tuple with the SubmitMove field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetSubmitMoveOk() (*interface{}, bool) {
	if o == nil || o.SubmitMove == nil {
		return nil, false
	}
	return &o.SubmitMove, true
}

// HasSubmitMove returns a boolean if a field has been set.
func (o *UserPreferences) HasSubmitMove() bool {
	if o != nil && o.SubmitMove != nil {
		return true
	}

	return false
}

// SetSubmitMove gets a reference to the given interface{} and assigns it to the SubmitMove field.
func (o *UserPreferences) SetSubmitMove(v interface{}) {
	o.SubmitMove = v
}

// GetConfirmResign returns the ConfirmResign field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetConfirmResign() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ConfirmResign
}

// GetConfirmResignOk returns a tuple with the ConfirmResign field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetConfirmResignOk() (*interface{}, bool) {
	if o == nil || o.ConfirmResign == nil {
		return nil, false
	}
	return &o.ConfirmResign, true
}

// HasConfirmResign returns a boolean if a field has been set.
func (o *UserPreferences) HasConfirmResign() bool {
	if o != nil && o.ConfirmResign != nil {
		return true
	}

	return false
}

// SetConfirmResign gets a reference to the given interface{} and assigns it to the ConfirmResign field.
func (o *UserPreferences) SetConfirmResign(v interface{}) {
	o.ConfirmResign = v
}

// GetInsightShare returns the InsightShare field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetInsightShare() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.InsightShare
}

// GetInsightShareOk returns a tuple with the InsightShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetInsightShareOk() (*interface{}, bool) {
	if o == nil || o.InsightShare == nil {
		return nil, false
	}
	return &o.InsightShare, true
}

// HasInsightShare returns a boolean if a field has been set.
func (o *UserPreferences) HasInsightShare() bool {
	if o != nil && o.InsightShare != nil {
		return true
	}

	return false
}

// SetInsightShare gets a reference to the given interface{} and assigns it to the InsightShare field.
func (o *UserPreferences) SetInsightShare(v interface{}) {
	o.InsightShare = v
}

// GetKeyboardMove returns the KeyboardMove field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetKeyboardMove() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.KeyboardMove
}

// GetKeyboardMoveOk returns a tuple with the KeyboardMove field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetKeyboardMoveOk() (*interface{}, bool) {
	if o == nil || o.KeyboardMove == nil {
		return nil, false
	}
	return &o.KeyboardMove, true
}

// HasKeyboardMove returns a boolean if a field has been set.
func (o *UserPreferences) HasKeyboardMove() bool {
	if o != nil && o.KeyboardMove != nil {
		return true
	}

	return false
}

// SetKeyboardMove gets a reference to the given interface{} and assigns it to the KeyboardMove field.
func (o *UserPreferences) SetKeyboardMove(v interface{}) {
	o.KeyboardMove = v
}

// GetZen returns the Zen field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetZen() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Zen
}

// GetZenOk returns a tuple with the Zen field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetZenOk() (*interface{}, bool) {
	if o == nil || o.Zen == nil {
		return nil, false
	}
	return &o.Zen, true
}

// HasZen returns a boolean if a field has been set.
func (o *UserPreferences) HasZen() bool {
	if o != nil && o.Zen != nil {
		return true
	}

	return false
}

// SetZen gets a reference to the given interface{} and assigns it to the Zen field.
func (o *UserPreferences) SetZen(v interface{}) {
	o.Zen = v
}

// GetMoveEvent returns the MoveEvent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetMoveEvent() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.MoveEvent
}

// GetMoveEventOk returns a tuple with the MoveEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetMoveEventOk() (*interface{}, bool) {
	if o == nil || o.MoveEvent == nil {
		return nil, false
	}
	return &o.MoveEvent, true
}

// HasMoveEvent returns a boolean if a field has been set.
func (o *UserPreferences) HasMoveEvent() bool {
	if o != nil && o.MoveEvent != nil {
		return true
	}

	return false
}

// SetMoveEvent gets a reference to the given interface{} and assigns it to the MoveEvent field.
func (o *UserPreferences) SetMoveEvent(v interface{}) {
	o.MoveEvent = v
}

// GetRookCastle returns the RookCastle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferences) GetRookCastle() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RookCastle
}

// GetRookCastleOk returns a tuple with the RookCastle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferences) GetRookCastleOk() (*interface{}, bool) {
	if o == nil || o.RookCastle == nil {
		return nil, false
	}
	return &o.RookCastle, true
}

// HasRookCastle returns a boolean if a field has been set.
func (o *UserPreferences) HasRookCastle() bool {
	if o != nil && o.RookCastle != nil {
		return true
	}

	return false
}

// SetRookCastle gets a reference to the given interface{} and assigns it to the RookCastle field.
func (o *UserPreferences) SetRookCastle(v interface{}) {
	o.RookCastle = v
}

func (o UserPreferences) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dark != nil {
		toSerialize["dark"] = o.Dark
	}
	if o.Transp != nil {
		toSerialize["transp"] = o.Transp
	}
	if o.BgImg != nil {
		toSerialize["bgImg"] = o.BgImg
	}
	if o.Is3d != nil {
		toSerialize["is3d"] = o.Is3d
	}
	if o.Theme != nil {
		toSerialize["theme"] = o.Theme
	}
	if o.PieceSet != nil {
		toSerialize["pieceSet"] = o.PieceSet
	}
	if o.Theme3d != nil {
		toSerialize["theme3d"] = o.Theme3d
	}
	if o.PieceSet3d != nil {
		toSerialize["pieceSet3d"] = o.PieceSet3d
	}
	if o.SoundSet != nil {
		toSerialize["soundSet"] = o.SoundSet
	}
	if o.Blindfold != nil {
		toSerialize["blindfold"] = o.Blindfold
	}
	if o.AutoQueen != nil {
		toSerialize["autoQueen"] = o.AutoQueen
	}
	if o.AutoThreefold != nil {
		toSerialize["autoThreefold"] = o.AutoThreefold
	}
	if o.Takeback != nil {
		toSerialize["takeback"] = o.Takeback
	}
	if o.Moretime != nil {
		toSerialize["moretime"] = o.Moretime
	}
	if o.ClockTenths != nil {
		toSerialize["clockTenths"] = o.ClockTenths
	}
	if o.ClockBar != nil {
		toSerialize["clockBar"] = o.ClockBar
	}
	if o.ClockSound != nil {
		toSerialize["clockSound"] = o.ClockSound
	}
	if o.Premove != nil {
		toSerialize["premove"] = o.Premove
	}
	if o.Animation != nil {
		toSerialize["animation"] = o.Animation
	}
	if o.Captured != nil {
		toSerialize["captured"] = o.Captured
	}
	if o.Follow != nil {
		toSerialize["follow"] = o.Follow
	}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	if o.Coords != nil {
		toSerialize["coords"] = o.Coords
	}
	if o.Replay != nil {
		toSerialize["replay"] = o.Replay
	}
	if o.Challenge != nil {
		toSerialize["challenge"] = o.Challenge
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.CoordColor != nil {
		toSerialize["coordColor"] = o.CoordColor
	}
	if o.SubmitMove != nil {
		toSerialize["submitMove"] = o.SubmitMove
	}
	if o.ConfirmResign != nil {
		toSerialize["confirmResign"] = o.ConfirmResign
	}
	if o.InsightShare != nil {
		toSerialize["insightShare"] = o.InsightShare
	}
	if o.KeyboardMove != nil {
		toSerialize["keyboardMove"] = o.KeyboardMove
	}
	if o.Zen != nil {
		toSerialize["zen"] = o.Zen
	}
	if o.MoveEvent != nil {
		toSerialize["moveEvent"] = o.MoveEvent
	}
	if o.RookCastle != nil {
		toSerialize["rookCastle"] = o.RookCastle
	}
	return json.Marshal(toSerialize)
}

type NullableUserPreferences struct {
	value *UserPreferences
	isSet bool
}

func (v NullableUserPreferences) Get() *UserPreferences {
	return v.value
}

func (v *NullableUserPreferences) Set(val *UserPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPreferences(val *UserPreferences) *NullableUserPreferences {
	return &NullableUserPreferences{value: val, isSet: true}
}

func (v NullableUserPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


