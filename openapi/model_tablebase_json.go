/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TablebaseJson struct for TablebaseJson
type TablebaseJson struct {
	// `cursed-win` and `blessed-loss` means the 50-move rule prevents the decisive result.  `maybe-win` and `maybe-loss` means exact result is unknown due to [DTZ rounding](https://syzygy-tables.info/metrics#dtz), i.e., the win or loss could also be prevented by the 50-move rule if the user has deviated from the tablebase recommendation since the last pawn move or capture. 
	Category interface{} `json:"category,omitempty"`
	// [DTZ50'' with rounding](https://syzygy-tables.info/metrics#dtz) or null if unknown 
	Dtz interface{} `json:"dtz,omitempty"`
	// DTZ50'' (only if guaranteed to be not rounded) or null if unknown 
	PreciseDtz interface{} `json:"precise_dtz,omitempty"`
	// Distance to mate (only for positions with not more than 5 pieces)
	Dtm interface{} `json:"dtm,omitempty"`
	Checkmate interface{} `json:"checkmate,omitempty"`
	Stalemate interface{} `json:"stalemate,omitempty"`
	// Only in chess variants
	VariantWin interface{} `json:"variant_win,omitempty"`
	// Only in chess variants
	VariantLoss interface{} `json:"variant_loss,omitempty"`
	InsufficientMaterial interface{} `json:"insufficient_material,omitempty"`
	// Information about legal moves, best first
	Moves interface{} `json:"moves,omitempty"`
}

// NewTablebaseJson instantiates a new TablebaseJson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTablebaseJson() *TablebaseJson {
	this := TablebaseJson{}
	return &this
}

// NewTablebaseJsonWithDefaults instantiates a new TablebaseJson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTablebaseJsonWithDefaults() *TablebaseJson {
	this := TablebaseJson{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TablebaseJson) GetCategory() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TablebaseJson) GetCategoryOk() (*interface{}, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return &o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *TablebaseJson) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given interface{} and assigns it to the Category field.
func (o *TablebaseJson) SetCategory(v interface{}) {
	o.Category = v
}

// GetDtz returns the Dtz field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TablebaseJson) GetDtz() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Dtz
}

// GetDtzOk returns a tuple with the Dtz field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TablebaseJson) GetDtzOk() (*interface{}, bool) {
	if o == nil || o.Dtz == nil {
		return nil, false
	}
	return &o.Dtz, true
}

// HasDtz returns a boolean if a field has been set.
func (o *TablebaseJson) HasDtz() bool {
	if o != nil && o.Dtz != nil {
		return true
	}

	return false
}

// SetDtz gets a reference to the given interface{} and assigns it to the Dtz field.
func (o *TablebaseJson) SetDtz(v interface{}) {
	o.Dtz = v
}

// GetPreciseDtz returns the PreciseDtz field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TablebaseJson) GetPreciseDtz() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.PreciseDtz
}

// GetPreciseDtzOk returns a tuple with the PreciseDtz field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TablebaseJson) GetPreciseDtzOk() (*interface{}, bool) {
	if o == nil || o.PreciseDtz == nil {
		return nil, false
	}
	return &o.PreciseDtz, true
}

// HasPreciseDtz returns a boolean if a field has been set.
func (o *TablebaseJson) HasPreciseDtz() bool {
	if o != nil && o.PreciseDtz != nil {
		return true
	}

	return false
}

// SetPreciseDtz gets a reference to the given interface{} and assigns it to the PreciseDtz field.
func (o *TablebaseJson) SetPreciseDtz(v interface{}) {
	o.PreciseDtz = v
}

// GetDtm returns the Dtm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TablebaseJson) GetDtm() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Dtm
}

// GetDtmOk returns a tuple with the Dtm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TablebaseJson) GetDtmOk() (*interface{}, bool) {
	if o == nil || o.Dtm == nil {
		return nil, false
	}
	return &o.Dtm, true
}

// HasDtm returns a boolean if a field has been set.
func (o *TablebaseJson) HasDtm() bool {
	if o != nil && o.Dtm != nil {
		return true
	}

	return false
}

// SetDtm gets a reference to the given interface{} and assigns it to the Dtm field.
func (o *TablebaseJson) SetDtm(v interface{}) {
	o.Dtm = v
}

// GetCheckmate returns the Checkmate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TablebaseJson) GetCheckmate() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Checkmate
}

// GetCheckmateOk returns a tuple with the Checkmate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TablebaseJson) GetCheckmateOk() (*interface{}, bool) {
	if o == nil || o.Checkmate == nil {
		return nil, false
	}
	return &o.Checkmate, true
}

// HasCheckmate returns a boolean if a field has been set.
func (o *TablebaseJson) HasCheckmate() bool {
	if o != nil && o.Checkmate != nil {
		return true
	}

	return false
}

// SetCheckmate gets a reference to the given interface{} and assigns it to the Checkmate field.
func (o *TablebaseJson) SetCheckmate(v interface{}) {
	o.Checkmate = v
}

// GetStalemate returns the Stalemate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TablebaseJson) GetStalemate() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Stalemate
}

// GetStalemateOk returns a tuple with the Stalemate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TablebaseJson) GetStalemateOk() (*interface{}, bool) {
	if o == nil || o.Stalemate == nil {
		return nil, false
	}
	return &o.Stalemate, true
}

// HasStalemate returns a boolean if a field has been set.
func (o *TablebaseJson) HasStalemate() bool {
	if o != nil && o.Stalemate != nil {
		return true
	}

	return false
}

// SetStalemate gets a reference to the given interface{} and assigns it to the Stalemate field.
func (o *TablebaseJson) SetStalemate(v interface{}) {
	o.Stalemate = v
}

// GetVariantWin returns the VariantWin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TablebaseJson) GetVariantWin() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.VariantWin
}

// GetVariantWinOk returns a tuple with the VariantWin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TablebaseJson) GetVariantWinOk() (*interface{}, bool) {
	if o == nil || o.VariantWin == nil {
		return nil, false
	}
	return &o.VariantWin, true
}

// HasVariantWin returns a boolean if a field has been set.
func (o *TablebaseJson) HasVariantWin() bool {
	if o != nil && o.VariantWin != nil {
		return true
	}

	return false
}

// SetVariantWin gets a reference to the given interface{} and assigns it to the VariantWin field.
func (o *TablebaseJson) SetVariantWin(v interface{}) {
	o.VariantWin = v
}

// GetVariantLoss returns the VariantLoss field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TablebaseJson) GetVariantLoss() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.VariantLoss
}

// GetVariantLossOk returns a tuple with the VariantLoss field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TablebaseJson) GetVariantLossOk() (*interface{}, bool) {
	if o == nil || o.VariantLoss == nil {
		return nil, false
	}
	return &o.VariantLoss, true
}

// HasVariantLoss returns a boolean if a field has been set.
func (o *TablebaseJson) HasVariantLoss() bool {
	if o != nil && o.VariantLoss != nil {
		return true
	}

	return false
}

// SetVariantLoss gets a reference to the given interface{} and assigns it to the VariantLoss field.
func (o *TablebaseJson) SetVariantLoss(v interface{}) {
	o.VariantLoss = v
}

// GetInsufficientMaterial returns the InsufficientMaterial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TablebaseJson) GetInsufficientMaterial() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.InsufficientMaterial
}

// GetInsufficientMaterialOk returns a tuple with the InsufficientMaterial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TablebaseJson) GetInsufficientMaterialOk() (*interface{}, bool) {
	if o == nil || o.InsufficientMaterial == nil {
		return nil, false
	}
	return &o.InsufficientMaterial, true
}

// HasInsufficientMaterial returns a boolean if a field has been set.
func (o *TablebaseJson) HasInsufficientMaterial() bool {
	if o != nil && o.InsufficientMaterial != nil {
		return true
	}

	return false
}

// SetInsufficientMaterial gets a reference to the given interface{} and assigns it to the InsufficientMaterial field.
func (o *TablebaseJson) SetInsufficientMaterial(v interface{}) {
	o.InsufficientMaterial = v
}

// GetMoves returns the Moves field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TablebaseJson) GetMoves() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Moves
}

// GetMovesOk returns a tuple with the Moves field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TablebaseJson) GetMovesOk() (*interface{}, bool) {
	if o == nil || o.Moves == nil {
		return nil, false
	}
	return &o.Moves, true
}

// HasMoves returns a boolean if a field has been set.
func (o *TablebaseJson) HasMoves() bool {
	if o != nil && o.Moves != nil {
		return true
	}

	return false
}

// SetMoves gets a reference to the given interface{} and assigns it to the Moves field.
func (o *TablebaseJson) SetMoves(v interface{}) {
	o.Moves = v
}

func (o TablebaseJson) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Dtz != nil {
		toSerialize["dtz"] = o.Dtz
	}
	if o.PreciseDtz != nil {
		toSerialize["precise_dtz"] = o.PreciseDtz
	}
	if o.Dtm != nil {
		toSerialize["dtm"] = o.Dtm
	}
	if o.Checkmate != nil {
		toSerialize["checkmate"] = o.Checkmate
	}
	if o.Stalemate != nil {
		toSerialize["stalemate"] = o.Stalemate
	}
	if o.VariantWin != nil {
		toSerialize["variant_win"] = o.VariantWin
	}
	if o.VariantLoss != nil {
		toSerialize["variant_loss"] = o.VariantLoss
	}
	if o.InsufficientMaterial != nil {
		toSerialize["insufficient_material"] = o.InsufficientMaterial
	}
	if o.Moves != nil {
		toSerialize["moves"] = o.Moves
	}
	return json.Marshal(toSerialize)
}

type NullableTablebaseJson struct {
	value *TablebaseJson
	isSet bool
}

func (v NullableTablebaseJson) Get() *TablebaseJson {
	return v.value
}

func (v *NullableTablebaseJson) Set(val *TablebaseJson) {
	v.value = val
	v.isSet = true
}

func (v NullableTablebaseJson) IsSet() bool {
	return v.isSet
}

func (v *NullableTablebaseJson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTablebaseJson(val *TablebaseJson) *NullableTablebaseJson {
	return &NullableTablebaseJson{value: val, isSet: true}
}

func (v NullableTablebaseJson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTablebaseJson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


