/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Perf struct for Perf
type Perf struct {
	Games interface{} `json:"games,omitempty"`
	Rating interface{} `json:"rating,omitempty"`
	Rd interface{} `json:"rd,omitempty"`
	Prog interface{} `json:"prog,omitempty"`
	Prov interface{} `json:"prov,omitempty"`
}

// NewPerf instantiates a new Perf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerf() *Perf {
	this := Perf{}
	return &this
}

// NewPerfWithDefaults instantiates a new Perf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPerfWithDefaults() *Perf {
	this := Perf{}
	return &this
}

// GetGames returns the Games field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Perf) GetGames() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Games
}

// GetGamesOk returns a tuple with the Games field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Perf) GetGamesOk() (*interface{}, bool) {
	if o == nil || o.Games == nil {
		return nil, false
	}
	return &o.Games, true
}

// HasGames returns a boolean if a field has been set.
func (o *Perf) HasGames() bool {
	if o != nil && o.Games != nil {
		return true
	}

	return false
}

// SetGames gets a reference to the given interface{} and assigns it to the Games field.
func (o *Perf) SetGames(v interface{}) {
	o.Games = v
}

// GetRating returns the Rating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Perf) GetRating() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Perf) GetRatingOk() (*interface{}, bool) {
	if o == nil || o.Rating == nil {
		return nil, false
	}
	return &o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *Perf) HasRating() bool {
	if o != nil && o.Rating != nil {
		return true
	}

	return false
}

// SetRating gets a reference to the given interface{} and assigns it to the Rating field.
func (o *Perf) SetRating(v interface{}) {
	o.Rating = v
}

// GetRd returns the Rd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Perf) GetRd() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Rd
}

// GetRdOk returns a tuple with the Rd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Perf) GetRdOk() (*interface{}, bool) {
	if o == nil || o.Rd == nil {
		return nil, false
	}
	return &o.Rd, true
}

// HasRd returns a boolean if a field has been set.
func (o *Perf) HasRd() bool {
	if o != nil && o.Rd != nil {
		return true
	}

	return false
}

// SetRd gets a reference to the given interface{} and assigns it to the Rd field.
func (o *Perf) SetRd(v interface{}) {
	o.Rd = v
}

// GetProg returns the Prog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Perf) GetProg() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Prog
}

// GetProgOk returns a tuple with the Prog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Perf) GetProgOk() (*interface{}, bool) {
	if o == nil || o.Prog == nil {
		return nil, false
	}
	return &o.Prog, true
}

// HasProg returns a boolean if a field has been set.
func (o *Perf) HasProg() bool {
	if o != nil && o.Prog != nil {
		return true
	}

	return false
}

// SetProg gets a reference to the given interface{} and assigns it to the Prog field.
func (o *Perf) SetProg(v interface{}) {
	o.Prog = v
}

// GetProv returns the Prov field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Perf) GetProv() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Prov
}

// GetProvOk returns a tuple with the Prov field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Perf) GetProvOk() (*interface{}, bool) {
	if o == nil || o.Prov == nil {
		return nil, false
	}
	return &o.Prov, true
}

// HasProv returns a boolean if a field has been set.
func (o *Perf) HasProv() bool {
	if o != nil && o.Prov != nil {
		return true
	}

	return false
}

// SetProv gets a reference to the given interface{} and assigns it to the Prov field.
func (o *Perf) SetProv(v interface{}) {
	o.Prov = v
}

func (o Perf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Games != nil {
		toSerialize["games"] = o.Games
	}
	if o.Rating != nil {
		toSerialize["rating"] = o.Rating
	}
	if o.Rd != nil {
		toSerialize["rd"] = o.Rd
	}
	if o.Prog != nil {
		toSerialize["prog"] = o.Prog
	}
	if o.Prov != nil {
		toSerialize["prov"] = o.Prov
	}
	return json.Marshal(toSerialize)
}

type NullablePerf struct {
	value *Perf
	isSet bool
}

func (v NullablePerf) Get() *Perf {
	return v.value
}

func (v *NullablePerf) Set(val *Perf) {
	v.value = val
	v.isSet = true
}

func (v NullablePerf) IsSet() bool {
	return v.isSet
}

func (v *NullablePerf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerf(val *Perf) *NullablePerf {
	return &NullablePerf{value: val, isSet: true}
}

func (v NullablePerf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


