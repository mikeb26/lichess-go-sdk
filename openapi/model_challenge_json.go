/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ChallengeJson struct for ChallengeJson
type ChallengeJson struct {
	Id interface{} `json:"id"`
	Url interface{} `json:"url"`
	Status interface{} `json:"status"`
	Challenger ChallengeUser `json:"challenger"`
	DestUser interface{} `json:"destUser"`
	Variant Variant `json:"variant"`
	Rated interface{} `json:"rated"`
	Speed Speed `json:"speed"`
	TimeControl interface{} `json:"timeControl"`
	Color interface{} `json:"color"`
	Perf ChallengeJsonPerf `json:"perf"`
	Direction interface{} `json:"direction,omitempty"`
	InitialFen interface{} `json:"initialFen,omitempty"`
	DeclineReason interface{} `json:"declineReason,omitempty"`
}

// NewChallengeJson instantiates a new ChallengeJson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChallengeJson(id interface{}, url interface{}, status interface{}, challenger ChallengeUser, destUser interface{}, variant Variant, rated interface{}, speed Speed, timeControl interface{}, color interface{}, perf ChallengeJsonPerf) *ChallengeJson {
	this := ChallengeJson{}
	this.Id = id
	this.Url = url
	this.Status = status
	this.Challenger = challenger
	this.DestUser = destUser
	this.Variant = variant
	this.Rated = rated
	this.Speed = speed
	this.TimeControl = timeControl
	this.Color = color
	this.Perf = perf
	return &this
}

// NewChallengeJsonWithDefaults instantiates a new ChallengeJson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChallengeJsonWithDefaults() *ChallengeJson {
	this := ChallengeJson{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChallengeJson) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeJson) GetIdOk() (*interface{}, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChallengeJson) SetId(v interface{}) {
	o.Id = v
}

// GetUrl returns the Url field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChallengeJson) GetUrl() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeJson) GetUrlOk() (*interface{}, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ChallengeJson) SetUrl(v interface{}) {
	o.Url = v
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChallengeJson) GetStatus() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeJson) GetStatusOk() (*interface{}, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ChallengeJson) SetStatus(v interface{}) {
	o.Status = v
}

// GetChallenger returns the Challenger field value
func (o *ChallengeJson) GetChallenger() ChallengeUser {
	if o == nil {
		var ret ChallengeUser
		return ret
	}

	return o.Challenger
}

// GetChallengerOk returns a tuple with the Challenger field value
// and a boolean to check if the value has been set.
func (o *ChallengeJson) GetChallengerOk() (*ChallengeUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Challenger, true
}

// SetChallenger sets field value
func (o *ChallengeJson) SetChallenger(v ChallengeUser) {
	o.Challenger = v
}

// GetDestUser returns the DestUser field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChallengeJson) GetDestUser() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.DestUser
}

// GetDestUserOk returns a tuple with the DestUser field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeJson) GetDestUserOk() (*interface{}, bool) {
	if o == nil || o.DestUser == nil {
		return nil, false
	}
	return &o.DestUser, true
}

// SetDestUser sets field value
func (o *ChallengeJson) SetDestUser(v interface{}) {
	o.DestUser = v
}

// GetVariant returns the Variant field value
func (o *ChallengeJson) GetVariant() Variant {
	if o == nil {
		var ret Variant
		return ret
	}

	return o.Variant
}

// GetVariantOk returns a tuple with the Variant field value
// and a boolean to check if the value has been set.
func (o *ChallengeJson) GetVariantOk() (*Variant, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Variant, true
}

// SetVariant sets field value
func (o *ChallengeJson) SetVariant(v Variant) {
	o.Variant = v
}

// GetRated returns the Rated field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChallengeJson) GetRated() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Rated
}

// GetRatedOk returns a tuple with the Rated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeJson) GetRatedOk() (*interface{}, bool) {
	if o == nil || o.Rated == nil {
		return nil, false
	}
	return &o.Rated, true
}

// SetRated sets field value
func (o *ChallengeJson) SetRated(v interface{}) {
	o.Rated = v
}

// GetSpeed returns the Speed field value
func (o *ChallengeJson) GetSpeed() Speed {
	if o == nil {
		var ret Speed
		return ret
	}

	return o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value
// and a boolean to check if the value has been set.
func (o *ChallengeJson) GetSpeedOk() (*Speed, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Speed, true
}

// SetSpeed sets field value
func (o *ChallengeJson) SetSpeed(v Speed) {
	o.Speed = v
}

// GetTimeControl returns the TimeControl field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChallengeJson) GetTimeControl() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.TimeControl
}

// GetTimeControlOk returns a tuple with the TimeControl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeJson) GetTimeControlOk() (*interface{}, bool) {
	if o == nil || o.TimeControl == nil {
		return nil, false
	}
	return &o.TimeControl, true
}

// SetTimeControl sets field value
func (o *ChallengeJson) SetTimeControl(v interface{}) {
	o.TimeControl = v
}

// GetColor returns the Color field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChallengeJson) GetColor() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeJson) GetColorOk() (*interface{}, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *ChallengeJson) SetColor(v interface{}) {
	o.Color = v
}

// GetPerf returns the Perf field value
func (o *ChallengeJson) GetPerf() ChallengeJsonPerf {
	if o == nil {
		var ret ChallengeJsonPerf
		return ret
	}

	return o.Perf
}

// GetPerfOk returns a tuple with the Perf field value
// and a boolean to check if the value has been set.
func (o *ChallengeJson) GetPerfOk() (*ChallengeJsonPerf, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Perf, true
}

// SetPerf sets field value
func (o *ChallengeJson) SetPerf(v ChallengeJsonPerf) {
	o.Perf = v
}

// GetDirection returns the Direction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChallengeJson) GetDirection() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeJson) GetDirectionOk() (*interface{}, bool) {
	if o == nil || o.Direction == nil {
		return nil, false
	}
	return &o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *ChallengeJson) HasDirection() bool {
	if o != nil && o.Direction != nil {
		return true
	}

	return false
}

// SetDirection gets a reference to the given interface{} and assigns it to the Direction field.
func (o *ChallengeJson) SetDirection(v interface{}) {
	o.Direction = v
}

// GetInitialFen returns the InitialFen field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChallengeJson) GetInitialFen() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.InitialFen
}

// GetInitialFenOk returns a tuple with the InitialFen field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeJson) GetInitialFenOk() (*interface{}, bool) {
	if o == nil || o.InitialFen == nil {
		return nil, false
	}
	return &o.InitialFen, true
}

// HasInitialFen returns a boolean if a field has been set.
func (o *ChallengeJson) HasInitialFen() bool {
	if o != nil && o.InitialFen != nil {
		return true
	}

	return false
}

// SetInitialFen gets a reference to the given interface{} and assigns it to the InitialFen field.
func (o *ChallengeJson) SetInitialFen(v interface{}) {
	o.InitialFen = v
}

// GetDeclineReason returns the DeclineReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChallengeJson) GetDeclineReason() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DeclineReason
}

// GetDeclineReasonOk returns a tuple with the DeclineReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeJson) GetDeclineReasonOk() (*interface{}, bool) {
	if o == nil || o.DeclineReason == nil {
		return nil, false
	}
	return &o.DeclineReason, true
}

// HasDeclineReason returns a boolean if a field has been set.
func (o *ChallengeJson) HasDeclineReason() bool {
	if o != nil && o.DeclineReason != nil {
		return true
	}

	return false
}

// SetDeclineReason gets a reference to the given interface{} and assigns it to the DeclineReason field.
func (o *ChallengeJson) SetDeclineReason(v interface{}) {
	o.DeclineReason = v
}

func (o ChallengeJson) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["challenger"] = o.Challenger
	}
	if o.DestUser != nil {
		toSerialize["destUser"] = o.DestUser
	}
	if true {
		toSerialize["variant"] = o.Variant
	}
	if o.Rated != nil {
		toSerialize["rated"] = o.Rated
	}
	if true {
		toSerialize["speed"] = o.Speed
	}
	if o.TimeControl != nil {
		toSerialize["timeControl"] = o.TimeControl
	}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if true {
		toSerialize["perf"] = o.Perf
	}
	if o.Direction != nil {
		toSerialize["direction"] = o.Direction
	}
	if o.InitialFen != nil {
		toSerialize["initialFen"] = o.InitialFen
	}
	if o.DeclineReason != nil {
		toSerialize["declineReason"] = o.DeclineReason
	}
	return json.Marshal(toSerialize)
}

type NullableChallengeJson struct {
	value *ChallengeJson
	isSet bool
}

func (v NullableChallengeJson) Get() *ChallengeJson {
	return v.value
}

func (v *NullableChallengeJson) Set(val *ChallengeJson) {
	v.value = val
	v.isSet = true
}

func (v NullableChallengeJson) IsSet() bool {
	return v.isSet
}

func (v *NullableChallengeJson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChallengeJson(val *ChallengeJson) *NullableChallengeJson {
	return &NullableChallengeJson{value: val, isSet: true}
}

func (v NullableChallengeJson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChallengeJson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


