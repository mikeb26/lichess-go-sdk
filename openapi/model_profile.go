/*
Lichess.org API reference

# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by volunteers and donations. - Get help in the [Lichess Discord channel](https://discord.gg/lichess) - API demo app with OAuth2 login, gameplay, and more: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/) - [Contribute to this documentation on Github](https://github.com/lichess-org/api) - Check out [Lichess widgets to embed in your website](https://lichess.org/developers) - [Download all Lichess rated games](https://database.lichess.org/) - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)  ## Endpoint All requests go to `https://lichess.org` (unless otherwise specified).  ## Clients - [Python general API](https://github.com/ZackClements/berserk) - [MicroPython general API](https://github.com/mkomon/uberserk) - [Python general API - async](https://pypi.org/project/async-lichess-sdk) - [Python Lichess Bot](https://github.com/ShailChoksi/lichess-bot) - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess) - [Java general API](https://github.com/tors42/chariot)  ## Rate limiting All requests are rate limited using various strategies, to ensure the API remains responsive for everyone. Only make one request at a time. If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429), please wait a full minute before resuming API usage.  ## Streaming with ND-JSON Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.  Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses. 

API version: 2.0.0
Contact: contact@lichess.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Profile struct for Profile
type Profile struct {
	Country interface{} `json:"country,omitempty"`
	Location interface{} `json:"location,omitempty"`
	Bio interface{} `json:"bio,omitempty"`
	FirstName interface{} `json:"firstName,omitempty"`
	LastName interface{} `json:"lastName,omitempty"`
	FideRating interface{} `json:"fideRating,omitempty"`
	UscfRating interface{} `json:"uscfRating,omitempty"`
	EcfRating interface{} `json:"ecfRating,omitempty"`
	Links interface{} `json:"links,omitempty"`
}

// NewProfile instantiates a new Profile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfile() *Profile {
	this := Profile{}
	return &this
}

// NewProfileWithDefaults instantiates a new Profile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileWithDefaults() *Profile {
	this := Profile{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Profile) GetCountry() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Profile) GetCountryOk() (*interface{}, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return &o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Profile) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given interface{} and assigns it to the Country field.
func (o *Profile) SetCountry(v interface{}) {
	o.Country = v
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Profile) GetLocation() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Profile) GetLocationOk() (*interface{}, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return &o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Profile) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given interface{} and assigns it to the Location field.
func (o *Profile) SetLocation(v interface{}) {
	o.Location = v
}

// GetBio returns the Bio field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Profile) GetBio() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Profile) GetBioOk() (*interface{}, bool) {
	if o == nil || o.Bio == nil {
		return nil, false
	}
	return &o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *Profile) HasBio() bool {
	if o != nil && o.Bio != nil {
		return true
	}

	return false
}

// SetBio gets a reference to the given interface{} and assigns it to the Bio field.
func (o *Profile) SetBio(v interface{}) {
	o.Bio = v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Profile) GetFirstName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Profile) GetFirstNameOk() (*interface{}, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *Profile) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given interface{} and assigns it to the FirstName field.
func (o *Profile) SetFirstName(v interface{}) {
	o.FirstName = v
}

// GetLastName returns the LastName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Profile) GetLastName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Profile) GetLastNameOk() (*interface{}, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return &o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *Profile) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given interface{} and assigns it to the LastName field.
func (o *Profile) SetLastName(v interface{}) {
	o.LastName = v
}

// GetFideRating returns the FideRating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Profile) GetFideRating() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FideRating
}

// GetFideRatingOk returns a tuple with the FideRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Profile) GetFideRatingOk() (*interface{}, bool) {
	if o == nil || o.FideRating == nil {
		return nil, false
	}
	return &o.FideRating, true
}

// HasFideRating returns a boolean if a field has been set.
func (o *Profile) HasFideRating() bool {
	if o != nil && o.FideRating != nil {
		return true
	}

	return false
}

// SetFideRating gets a reference to the given interface{} and assigns it to the FideRating field.
func (o *Profile) SetFideRating(v interface{}) {
	o.FideRating = v
}

// GetUscfRating returns the UscfRating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Profile) GetUscfRating() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.UscfRating
}

// GetUscfRatingOk returns a tuple with the UscfRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Profile) GetUscfRatingOk() (*interface{}, bool) {
	if o == nil || o.UscfRating == nil {
		return nil, false
	}
	return &o.UscfRating, true
}

// HasUscfRating returns a boolean if a field has been set.
func (o *Profile) HasUscfRating() bool {
	if o != nil && o.UscfRating != nil {
		return true
	}

	return false
}

// SetUscfRating gets a reference to the given interface{} and assigns it to the UscfRating field.
func (o *Profile) SetUscfRating(v interface{}) {
	o.UscfRating = v
}

// GetEcfRating returns the EcfRating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Profile) GetEcfRating() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EcfRating
}

// GetEcfRatingOk returns a tuple with the EcfRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Profile) GetEcfRatingOk() (*interface{}, bool) {
	if o == nil || o.EcfRating == nil {
		return nil, false
	}
	return &o.EcfRating, true
}

// HasEcfRating returns a boolean if a field has been set.
func (o *Profile) HasEcfRating() bool {
	if o != nil && o.EcfRating != nil {
		return true
	}

	return false
}

// SetEcfRating gets a reference to the given interface{} and assigns it to the EcfRating field.
func (o *Profile) SetEcfRating(v interface{}) {
	o.EcfRating = v
}

// GetLinks returns the Links field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Profile) GetLinks() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Profile) GetLinksOk() (*interface{}, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return &o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Profile) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given interface{} and assigns it to the Links field.
func (o *Profile) SetLinks(v interface{}) {
	o.Links = v
}

func (o Profile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Bio != nil {
		toSerialize["bio"] = o.Bio
	}
	if o.FirstName != nil {
		toSerialize["firstName"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["lastName"] = o.LastName
	}
	if o.FideRating != nil {
		toSerialize["fideRating"] = o.FideRating
	}
	if o.UscfRating != nil {
		toSerialize["uscfRating"] = o.UscfRating
	}
	if o.EcfRating != nil {
		toSerialize["ecfRating"] = o.EcfRating
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableProfile struct {
	value *Profile
	isSet bool
}

func (v NullableProfile) Get() *Profile {
	return v.value
}

func (v *NullableProfile) Set(val *Profile) {
	v.value = val
	v.isSet = true
}

func (v NullableProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfile(val *Profile) *NullableProfile {
	return &NullableProfile{value: val, isSet: true}
}

func (v NullableProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


